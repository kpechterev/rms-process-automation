# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

"""

Директива, проверяющие наличие только одного свойство из перечисленных в Input object
по аналогии с oneOf в json-schema
https://json-schema.org/understanding-json-schema/reference/combining.html#oneof
"""
directive @oneOf on INPUT_OBJECT

interface IAodbMasterData {
  aodbInternalId: String!
  lastUpdateDateTime: DateTime!
}

interface ICondition {
  createdAt: DateTime!
  id: ID!
  object: ObjectPropertyReference!
  type: ConditionType!
  updatedAt: DateTime!
}

interface IEntity {
  id: ID!
}

interface IPage {
  pageInfo: PageInfo!
}

interface IPersonnel {
  "Personnel number / Табельный номер"
  number: String!
}

interface IResource {
  businessRoleNames: [String!]!
  businessRoles: [BusinessRole!]!
  deletedAt: DateTime
  erpResourceId: String @deprecated(reason: "Deprecated in a favour of ErpResource.resource")
  id: ID!
  isPartOfComplexResource: Boolean!
  "Флаг неисправности"
  malfunction: Boolean!
  mobileIdent: String
  mobilityType: MobilityType!
  onlineStatus: OnlineStatus!
  "Наименование производственного участка"
  productionSiteName: String
  "Группа ресурсов"
  resourceGroup: ResourceGroup @deprecated(reason: "No longer supported")
  resourceGroupValidityPeriods(filter: ResourceGroupValidityPeriodFilter): [ResourceGroupValidityPeriod!]!
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivision: Subdivision
  unavailability(filter: ResourceUnavailabilityFilter): [ResourceUnavailabilityPeriod!]!
  waybills(filter: WaybillFilter): [Waybill!]!
}

interface IResourceNumberType {
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
}

interface IServiceObject {
  id: ID!
}

interface ISoftDelete {
  deletedAt: DateTime
}

interface ISubscriptionEvent {
  eventType: SubscriptionEventType!
  id: ID!
}

interface ITechnicalResource {
  empLifeCycleDependency: Boolean!
}

interface Mobility {
  mobilityType: MobilityType!
}

interface UserError {
  message(localeSpecification: LocaleSpecificationInput): String!
  path: [String!]
}

interface UserWarning {
  message(localeSpecification: LocaleSpecificationInput): String!
  path: [String!]
}

union AddEmployeeToShiftManualPayload = AddEmployeeToShiftManualHasAnotherShiftErrors | Shift | ShiftManualModificationUnsupportedCreationTypeError

union AssignResourceToTaskManualError = AvailablePairTasksNotFoundError | PairResourceTypeNotMatchPairResourceTypeInSourceTask | PerformerNotInComplexResourceError | TaskRequireComplexResourceError

union AssignResourceToTaskManualPayload = AssignResourceToTaskManualErrors | AssignResourceToTaskManualResponse

union AssignResourceToTaskManualWarning = TaskNotRequireComplexResourceWarning

union BusinessRule = EmptyValueCondition | EqualityBooleanCondition | EqualityFloatCondition | EqualityIntCondition | EqualityStringCondition

union ChangeTaskStatusManualPayload = ChangeTaskStatusManualResponse

union ComplexResourceDeleteError = ComplexResourceErrorHasFutureTask | ComplexResourceErrorInUse

union ComplexResourceDeletePayload = ComplexResourceDeleteErrors | DeleteComplexResourceResponse

"Условие"
union Condition = ComparableFloatCondition | ComparableIntCondition | EmptyValueCondition | EqualityBooleanCondition | EqualityFloatCondition | EqualityIntCondition | EqualityStringCondition | HasOfIntCondition | HasOfStringCondition | InIntCondition | InStringCondition | ObjectComparisonCondition

union ConditionGroupCreateError = ConditionGroupErrorDuplicatingName | ConditionGroupErrorEmptyName

union ConditionGroupCreatePayload = ConditionGroup | ConditionGroupCreateErrors

union ConditionGroupUpdateError = ConditionGroupErrorDuplicatingName | ConditionGroupErrorEmptyName

union ConditionGroupUpdatePayload = ConditionGroup | ConditionGroupUpdateErrors

union ConsumableResourceValue = ConsumableResourcePeriodValue | ConsumableResourceStringValue

"Заказчик"
union Customer = Airline

union EmployeeGroupCreateError = EmployeeGroupErrorDuplicatingName | EmployeeGroupErrorEmptyName | EmployeeGroupErrorEmptySubdivisions

union EmployeeGroupCreatePayload = EmployeeGroup | EmployeeGroupCreateErrors

union EmployeeGroupDeleteError = EmployeeGroupErrorInUse

union EmployeeGroupDeletePayload = DeleteResult | EmployeeGroupDeleteErrors

union EmployeeGroupUpdateError = EmployeeGroupErrorDuplicatingName | EmployeeGroupErrorEmptySubdivisions | EmployeeGroupErrorInUse

union EmployeeGroupUpdatePayload = EmployeeGroup | EmployeeGroupUpdateErrors

union EmployeeGroupViewToShiftJournalAssignmentError = EmployeeGroupViewErrorInvalidFrom | EmployeeGroupViewErrorStarted

union EmployeeGroupViewToShiftJournalAssignmentPayload = EmployeeGroupViewToShiftJournalAssignmentErrors | ShiftJournal

union ExtendedParamValueUnion = ExtendedParamStringArrayValue | ExtendedParamStringValue

union LeaveResourceLocationPayload = ResourceLocation

union ObjectLocation = Belt | CheckInCounter | Gate | ParkingSpot

union RemoveEmployeeFromShiftManualPayload = Shift | ShiftManualModificationUnsupportedCreationTypeError

"Ресурс"
union Resource = AirBridge | AirConditioner | AirStartDevice | AircraftTug | Ambulift | BaggageTractor | BeltLoader | Car | ContainerLoader | DeicingCar | Employee | Extinguisher | FollowMeCar | GPU | GasRefueller | Heater | HeaterCar | PaxBus | PaxStairs | Stepladder | Towbar | TowbarAdapter | VacuumCleaner | VacuumSweeper | VipServiceCar | WasteDisposalMachine | WaterCar

"Объект обслуживания"
union ServiceObject = Aircraft | Flight

union ServiceObjectDetails = FlightDetails

union ServiceObjectLocation = Belt | CheckInCounter | Gate | ParkingSpot

union SetIconToResourceTypeSpecError = SetIconToResourceTypeSpecIconMimeTypeDetectError | SetIconToResourceTypeSpecIconSizeError | SetIconToResourceTypeSpecIconTypeError

union SetIconToResourceTypeSpecPayload = ResourceTypeSpec | SetIconToResourceTypeSpecErrors

union SetResourceLocationPayload = ResourceLocation

union ShiftFilterProfileCreatePayload = ShiftFilterProfile | ShiftFilterProfileCreateErrors

union ShiftFilterProfileDeletePayload = DeleteResult | ShiftFilterProfileDeleteErrors

union ShiftFilterProfileRuleCreatePayload = ShiftFilterProfileRule | ShiftFilterProfileRuleCreateErrors

union ShiftFilterProfileRuleDeleteError = ShiftFilterProfileRuleErrorInUse

union ShiftFilterProfileRuleDeletePayload = DeleteResult | ShiftFilterProfileRuleDeleteErrors

union ShiftFilterProfileRuleUpdatePayload = ShiftFilterProfileRule | ShiftFilterProfileRuleUpdateErrors

union ShiftFilterProfileUpdatePayload = ShiftFilterProfile | ShiftFilterProfileUpdateErrors

union ShiftJournalError = EmployeeArrivedToShiftHasAnotherShiftJournalError | EmployeeDepartureFromShiftWithInvalidDepartureTimeError

union ShiftJournalPayload = ShiftJournal | ShiftJournalErrors

union TaskFilterProfileCreatePayload = TaskFilterProfile | TaskFilterProfileCreateErrors

union TaskFilterProfileDeletePayload = DeleteResult | TaskFilterProfileDeleteErrors

union TaskFilterProfileRuleCreatePayload = TaskFilterProfileRule | TaskFilterProfileRuleCreateErrors

union TaskFilterProfileRuleDeleteError = TaskFilterProfileRuleErrorInUse

union TaskFilterProfileRuleDeletePayload = DeleteResult | TaskFilterProfileRuleDeleteErrors

union TaskFilterProfileRuleUpdatePayload = TaskFilterProfileRule | TaskFilterProfileRuleUpdateErrors

union TaskFilterProfileUpdatePayload = TaskFilterProfile | TaskFilterProfileUpdateErrors

union TaskServiceObjectDetails = TaskFlightDetails

union UnassignResourceFromTaskManualPayload = UnassignResourceFromTaskManualResponse

union UpdateBusinessRoleInResourceError = EmployeeInEmployeeGroupError

union UpdateBusinessRoleInResourcePayload = ResourceItem | UpdateBusinessRoleInResourceErrors

type AddEmployeeToShiftManualHasAnotherShiftError implements UserError {
  anotherShiftJournal: ShiftJournal!
  message(localeSpecification: LocaleSpecificationInput): String!
  path: [String!]
}

type AddEmployeeToShiftManualHasAnotherShiftErrors {
  errors: [AddEmployeeToShiftManualHasAnotherShiftError!]!
}

type AirBridge implements IResource & IResourceNumberType & ISoftDelete & ITechnicalResource & Mobility {
  businessRoleNames: [String!]!
  businessRoles: [BusinessRole!]!
  deletedAt: DateTime
  empLifeCycleDependency: Boolean!
  erpResourceId: String @deprecated(reason: "Deprecated in a favour of ErpResource.resource")
  id: ID!
  isPartOfComplexResource: Boolean!
  malfunction: Boolean!
  mobileIdent: String
  mobilityType: MobilityType!
  onlineStatus: OnlineStatus!
  passengerDeckHeight: Int
  productionSiteName: String
  resourceGroup: ResourceGroup @deprecated(reason: "No longer supported")
  resourceGroupValidityPeriods(filter: ResourceGroupValidityPeriodFilter): [ResourceGroupValidityPeriod!]!
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivision: Subdivision!
  subdivisionId: String! @deprecated(reason: "Will be removed. Use field subdivison")
  supportedAircraftTypes: [String]!
  unavailability(filter: ResourceUnavailabilityFilter): [ResourceUnavailabilityPeriod!]!
  waybills(filter: WaybillFilter): [Waybill!]!
}

type AirConditioner implements IResource & IResourceNumberType & ISoftDelete & ITechnicalResource & Mobility {
  airTemperature: Int!
  businessRoleNames: [String!]!
  businessRoles: [BusinessRole!]!
  deletedAt: DateTime
  empLifeCycleDependency: Boolean!
  erpResourceId: String @deprecated(reason: "Deprecated in a favour of ErpResource.resource")
  id: ID!
  isPartOfComplexResource: Boolean!
  malfunction: Boolean!
  mobileIdent: String
  mobilityType: MobilityType!
  onlineStatus: OnlineStatus!
  productionSiteName: String
  resourceGroup: ResourceGroup @deprecated(reason: "No longer supported")
  resourceGroupValidityPeriods(filter: ResourceGroupValidityPeriodFilter): [ResourceGroupValidityPeriod!]!
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivision: Subdivision!
  subdivisionId: String! @deprecated(reason: "Will be removed. Use field subdivison")
  supportedAircraftTypes: [String]! @deprecated(reason: "No longer supported")
  unavailability(filter: ResourceUnavailabilityFilter): [ResourceUnavailabilityPeriod!]!
  waybills(filter: WaybillFilter): [Waybill!]!
}

type AirStartDevice implements IResource & IResourceNumberType & ISoftDelete & ITechnicalResource & Mobility {
  airVolume: Int!
  businessRoleNames: [String!]!
  businessRoles: [BusinessRole!]!
  deletedAt: DateTime
  empLifeCycleDependency: Boolean!
  erpResourceId: String @deprecated(reason: "Deprecated in a favour of ErpResource.resource")
  id: ID!
  isPartOfComplexResource: Boolean!
  malfunction: Boolean!
  mobileIdent: String
  mobilityType: MobilityType!
  onlineStatus: OnlineStatus!
  productionSiteName: String
  resourceGroup: ResourceGroup @deprecated(reason: "No longer supported")
  resourceGroupValidityPeriods(filter: ResourceGroupValidityPeriodFilter): [ResourceGroupValidityPeriod!]!
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivision: Subdivision!
  subdivisionId: String! @deprecated(reason: "Will be removed. Use field subdivison")
  supportedAircraftTypes: [String]!
  unavailability(filter: ResourceUnavailabilityFilter): [ResourceUnavailabilityPeriod!]!
  waybills(filter: WaybillFilter): [Waybill!]!
}

"ВС - Воздушное судно"
type Aircraft implements IAodbMasterData & IServiceObject & ISoftDelete {
  GPU: String
  aircraftType: AircraftType @deprecated(reason: "Will be removed")
  aircraftTypeCode: String
  airline: Airline
  aodbInternalId: String!
  comment: String
  deletedAt: DateTime
  id: ID!
  internalLadder: Boolean @deprecated(reason: "Will be removed")
  internalStaircase: String
  lastUpdateDateTime: DateTime!
  maximumTakeoffWeight: Int
  noiseCategory: String
  owner: String
  packingMethod: String
  seatsBusinessClassQty: Int @deprecated(reason: "Will be removed")
  seatsEconomClassQty: Int @deprecated(reason: "Will be removed")
  seatsFirstClassQty: Int @deprecated(reason: "Will be removed")
  seatsQty: Int
  tailNumber: String!
}

type AircraftTug implements IResource & IResourceNumberType & ISoftDelete & ITechnicalResource & Mobility {
  businessRoleNames: [String!]!
  businessRoles: [BusinessRole!]!
  deletedAt: DateTime
  empLifeCycleDependency: Boolean!
  equipmentCompatibility: Boolean
  erpResourceId: String @deprecated(reason: "Deprecated in a favour of ErpResource.resource")
  id: ID!
  isPartOfComplexResource: Boolean!
  malfunction: Boolean!
  mobileIdent: String
  mobilityType: MobilityType!
  onlineStatus: OnlineStatus!
  productionSiteName: String
  pullingForceMax: Int
  pullingForceMin: Int
  resourceGroup: ResourceGroup @deprecated(reason: "No longer supported")
  resourceGroupValidityPeriods(filter: ResourceGroupValidityPeriodFilter): [ResourceGroupValidityPeriod!]!
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivision: Subdivision!
  subdivisionId: String! @deprecated(reason: "Will be removed. Use field subdivison")
  supportedAircraftTypes: [String]!
  typeOfTractor: String
  unavailability(filter: ResourceUnavailabilityFilter): [ResourceUnavailabilityPeriod!]!
  waybills(filter: WaybillFilter): [Waybill!]!
}

"Тип ВС"
type AircraftType implements IAodbMasterData & ISoftDelete {
  aodbInternalId: String!
  aodbPeriodId: String!
  deletedAt: DateTime
  designGroup: String
  engineType: String
  height: Int @deprecated(reason: "Will be removed")
  iataCode: String
  iataIcao: String
  icaoCode: String
  id: ID!
  lastUpdateDateTime: DateTime!
  length: Int
  maximumTakeoffWeight: Int
  name: String!
  packingMethod: String
  seatCapacity: Int
  validFrom: DateTime
  validTo: DateTime
  wingspan: Int
}

"Авиакомпания"
type Airline implements IAodbMasterData & ISoftDelete {
  aodbInternalId: String!
  aodbPeriodId: String!
  deletedAt: DateTime
  emails: [String!]!
  iataCode: String
  icaoCode: String
  id: ID!
  lastUpdateDateTime: DateTime!
  name: String!
  registeredIn: Country
  validFrom: DateTime
  validTo: DateTime
}

"Аэропорт"
type Airport implements IAodbMasterData & ISoftDelete {
  aodbInternalId: String!
  aodbPeriodId: String!
  deletedAt: DateTime
  iataCode: String
  icaoCode: String
  id: ID!
  lastUpdateDateTime: DateTime!
  locatedIn: City
  name: String
  validFrom: DateTime
  validTo: DateTime
}

type AirportInstallationParameters {
  iataCode: String!
  icaoCode: String!
  timeZone: TimeZoneParameters!
}

type Ambulift implements IResource & IResourceNumberType & ISoftDelete & ITechnicalResource & Mobility {
  businessRoleNames: [String!]!
  businessRoles: [BusinessRole!]!
  deletedAt: DateTime
  empLifeCycleDependency: Boolean!
  erpResourceId: String @deprecated(reason: "Deprecated in a favour of ErpResource.resource")
  id: ID!
  isPartOfComplexResource: Boolean!
  malfunction: Boolean!
  mobileIdent: String
  mobilityType: MobilityType!
  onlineStatus: OnlineStatus!
  productionSiteName: String
  resourceGroup: ResourceGroup @deprecated(reason: "No longer supported")
  resourceGroupValidityPeriods(filter: ResourceGroupValidityPeriodFilter): [ResourceGroupValidityPeriod!]!
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivision: Subdivision!
  subdivisionId: String! @deprecated(reason: "Will be removed. Use field subdivison")
  supportedAircraftTypes: [String]!
  unavailability(filter: ResourceUnavailabilityFilter): [ResourceUnavailabilityPeriod!]!
  waybills(filter: WaybillFilter): [Waybill!]!
}

type AodbAllocation {
  allocationTypeCode: String
  arrival: AodbArrival
  beginActual: String
  beginPlan: String
  departure: AodbDeparture
  endActual: String
  endPlan: String
  id: ID!
  note: String
  resourceCode: String
}

type AodbAllocationType {
  code: ID!
  description: String
  resourceTypeCode: String
}

type AodbArrival {
  aircraftCode: String
  aircraftTypeCode: String
  airportCode: String
  departureId: String
  eta: String
  flightNumber: String
  id: ID!
  spotCode: String
}

type AodbDeparture {
  aircraftCode: String
  aircraftTypeCode: String
  airportCode: String
  arrivalId: String
  etd: String
  flightNumber: String
  id: ID!
  spotCode: String
}

type AodbMilestone {
  description(localeSpecification: LocaleSpecificationInput): String
  id: ID!
  qualifier: String!
}

type AodbResource {
  code: String
  description: String
  id: ID!
  resourceTypeCode: String
}

type AodbResourceType {
  code: ID!
  descriptionEn: String
  descriptionRu: String
}

type ApplicationParameters {
  airportInstallation: AirportInstallationParameters!
}

type AssignResourceToTaskManualErrors {
  errors: [AssignResourceToTaskManualError!]!
}

type AssignResourceToTaskManualResponse {
  pairTask: Task
  task: Task!
  warnings: [AssignResourceToTaskManualWarning!]!
}

type AssignedBatchResultWrapper {
  assignedResult: [ItemAssignedResourceResult!]!
}

type AssociatedOperationSpecificationRule {
  operationSpecification: OperationSpecification!
  plannedMomentType: PlannedMomentType!
}

type AvailablePairTasksNotFoundError implements UserError {
  message(localeSpecification: LocaleSpecificationInput): String!
  path: [String!]
}

"Доступный переход в следующий статус задачи"
type AvailableTaskStatusTransition {
  direction: TaskStatusDirection!
  newStatus: TaskStatus!
}

type BaggageTractor implements IResource & IResourceNumberType & ISoftDelete & ITechnicalResource & Mobility {
  businessRoleNames: [String!]!
  businessRoles: [BusinessRole!]!
  deletedAt: DateTime
  empLifeCycleDependency: Boolean!
  erpResourceId: String @deprecated(reason: "Deprecated in a favour of ErpResource.resource")
  id: ID!
  isPartOfComplexResource: Boolean!
  malfunction: Boolean!
  mobileIdent: String
  mobilityType: MobilityType!
  onlineStatus: OnlineStatus!
  productionSiteName: String
  resourceGroup: ResourceGroup @deprecated(reason: "No longer supported")
  resourceGroupValidityPeriods(filter: ResourceGroupValidityPeriodFilter): [ResourceGroupValidityPeriod!]!
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivision: Subdivision!
  subdivisionId: String! @deprecated(reason: "Will be removed. Use field subdivison")
  supportedAircraftTypes: [String]! @deprecated(reason: "No longer supported")
  unavailability(filter: ResourceUnavailabilityFilter): [ResourceUnavailabilityPeriod!]!
  waybills(filter: WaybillFilter): [Waybill!]!
}

type Belt implements IAodbMasterData & ISoftDelete {
  aodbInternalId: String!
  area: String
  deletedAt: DateTime
  id: ID!
  lastUpdateDateTime: DateTime!
  name: String
}

type BeltLoader implements IResource & IResourceNumberType & ISoftDelete & ITechnicalResource & Mobility {
  businessRoleNames: [String!]!
  businessRoles: [BusinessRole!]!
  deletedAt: DateTime
  empLifeCycleDependency: Boolean!
  erpResourceId: String @deprecated(reason: "Deprecated in a favour of ErpResource.resource")
  id: ID!
  isPartOfComplexResource: Boolean!
  malfunction: Boolean!
  mobileIdent: String
  mobilityType: MobilityType!
  onlineStatus: OnlineStatus!
  productionSiteName: String
  resourceGroup: ResourceGroup @deprecated(reason: "No longer supported")
  resourceGroupValidityPeriods(filter: ResourceGroupValidityPeriodFilter): [ResourceGroupValidityPeriod!]!
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivision: Subdivision!
  subdivisionId: String! @deprecated(reason: "Will be removed. Use field subdivison")
  unavailability(filter: ResourceUnavailabilityFilter): [ResourceUnavailabilityPeriod!]!
  waybills(filter: WaybillFilter): [Waybill!]!
}

type BusinessRole implements ISoftDelete {
  deleted: Boolean!
  deletedAt: DateTime
  description: String
  id: ID!
  name: String!
  resourceTypes: [ResourceType!]!
}

type BusinessRuleProviding {
  businessRules: [BusinessRule!]!
  conditionGroups: [ConditionGroup!]!
  conditions: [Condition!]!
  id: ID!
  name: String!
  serviceObjectType: ServiceObjectType!
}

type Car implements IResource & IResourceNumberType & ISoftDelete & ITechnicalResource & Mobility {
  businessRoleNames: [String!]!
  businessRoles: [BusinessRole!]!
  carriageOfBaggage: Boolean!
  carriageOfEmployees: Boolean!
  carriageOfPassengers: Boolean!
  deletedAt: DateTime
  empLifeCycleDependency: Boolean!
  erpResourceId: String @deprecated(reason: "Deprecated in a favour of ErpResource.resource")
  escortOnTerritoryAirport: Boolean!
  id: ID!
  isPartOfComplexResource: Boolean!
  malfunction: Boolean!
  mobileIdent: String
  mobilityType: MobilityType!
  onlineStatus: OnlineStatus!
  passengerCapacity: Int!
  productionSiteName: String
  resourceGroup: ResourceGroup @deprecated(reason: "No longer supported")
  resourceGroupValidityPeriods(filter: ResourceGroupValidityPeriodFilter): [ResourceGroupValidityPeriod!]!
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivision: Subdivision!
  subdivisionId: String! @deprecated(reason: "Will be removed. Use field subdivison")
  supportedAircraftTypes: [String]! @deprecated(reason: "No longer supported")
  unavailability(filter: ResourceUnavailabilityFilter): [ResourceUnavailabilityPeriod!]!
  waybills(filter: WaybillFilter): [Waybill!]!
}

type ChangeTaskStatusManualResponse {
  changedTasks: [Task!]!
  sourceTask: Task!
}

type CheckInCounter implements IAodbMasterData & IEntity & ISoftDelete {
  aodbInternalId: String!
  deletedAt: DateTime
  id: ID!
  lastUpdateDateTime: DateTime!
  name: String
  type: String
}

"Город"
type City implements IAodbMasterData & ISoftDelete {
  aodbInternalId: String!
  deletedAt: DateTime
  iataCode: String
  icaoCode: String
  id: ID!
  lastUpdateDateTime: DateTime!
  latitude: Float
  locatedIn: Country!
  longitude: Float
  name: String
}

type Comment implements IEntity {
  author: Employee!
  createdAt: DateTime!
  id: ID!
  text: String!
  updatedAt: DateTime!
}

type ComparableFloatCondition implements ICondition {
  createdAt: DateTime!
  id: ID!
  object: ObjectPropertyReference!
  operator: ComparableOperator!
  type: ConditionType!
  updatedAt: DateTime!
  value: Float!
}

"Comparable Condition"
type ComparableIntCondition implements ICondition {
  createdAt: DateTime!
  id: ID!
  object: ObjectPropertyReference!
  operator: ComparableOperator!
  type: ConditionType!
  updatedAt: DateTime!
  value: Int!
}

"Комплексный ресурс"
type ComplexResource implements IEntity & ISoftDelete {
  createType: ComplexResourceCreationType!
  deleted: Boolean!
  deletedAt: DateTime
  employee: Employee!
  id: ID!
  name: String!
  resource: ResourceItem!
  validityPeriodFact: OptionalDateTimePeriod!
  validityPeriodPlan: OptionalDateTimePeriod!
  waybill: Waybill
}

type ComplexResourceDeleteErrors {
  errors: [ComplexResourceDeleteError!]!
}

type ComplexResourceErrorHasFutureTask implements UserError {
  employee: Employee!
  message(localeSpecification: LocaleSpecificationInput): String!
  path: [String!]
  resource: ResourceItem!
}

type ComplexResourceErrorInUse implements UserError {
  employee: Employee!
  message(localeSpecification: LocaleSpecificationInput): String!
  path: [String!]
  resource: ResourceItem!
}

type ComplexResourceGroupedByEmployeeView {
  complexResources: [ComplexResource!]!
  employee: Employee!
}

type ConditionGroup implements IEntity {
  conditions: [Condition!]!
  id: ID!
  name: String!
  serviceObjectType: ServiceObjectType!
}

type ConditionGroupCreateErrors {
  errors: [ConditionGroupCreateError!]!
}

type ConditionGroupErrorDuplicatingName implements UserError {
  existing: ConditionGroup!
  message(localeSpecification: LocaleSpecificationInput): String!
  path: [String!]
}

type ConditionGroupErrorEmptyName implements UserError {
  message(localeSpecification: LocaleSpecificationInput): String!
  path: [String!]
}

type ConditionGroupUpdateErrors {
  errors: [ConditionGroupUpdateError!]!
}

type ConditionInfo {
  objectName: ObjectName!
  propertyNames: [String!]!
}

type ConsumableResource implements ISoftDelete {
  deletedAt: DateTime
  description: String
  id: ID!
  name: String!
}

type ConsumableResourcePeriod {
  duration: TimeDuration
  finish: DateTime
  start: DateTime
}

type ConsumableResourcePeriodValue {
  value: ConsumableResourcePeriod
}

type ConsumableResourceStringValue {
  value: String
}

type ConsumableResourceType implements ISoftDelete {
  deletedAt: DateTime
  description: String!
  id: ID!
  name: String!
  resource: ConsumableResource!
  unit: Unit!
}

type ContainerLoader implements IResource & IResourceNumberType & ISoftDelete & ITechnicalResource & Mobility {
  bearingCapacity: Int!
  businessRoleNames: [String!]!
  businessRoles: [BusinessRole!]!
  deletedAt: DateTime
  empLifeCycleDependency: Boolean!
  erpResourceId: String @deprecated(reason: "Deprecated in a favour of ErpResource.resource")
  id: ID!
  isPartOfComplexResource: Boolean!
  malfunction: Boolean!
  mobileIdent: String
  mobilityType: MobilityType!
  onlineStatus: OnlineStatus!
  productionSiteName: String
  resourceGroup: ResourceGroup @deprecated(reason: "No longer supported")
  resourceGroupValidityPeriods(filter: ResourceGroupValidityPeriodFilter): [ResourceGroupValidityPeriod!]!
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivision: Subdivision!
  subdivisionId: String! @deprecated(reason: "Will be removed. Use field subdivison")
  supportedAircraftTypes: [String]!
  unavailability(filter: ResourceUnavailabilityFilter): [ResourceUnavailabilityPeriod!]!
  waybills(filter: WaybillFilter): [Waybill!]!
}

"Договор"
type Contract {
  customer: CustomerItem
  id: ID!
  serviceOffers: [ServiceOffer]!
  validFrom: Date
  validTo: Date
}

"Страна"
type Country implements IAodbMasterData & IEntity & ISoftDelete {
  aodbInternalId: String!
  deletedAt: DateTime
  id: ID!
  isoCode: String!
  lastUpdateDateTime: DateTime!
  name: String
}

type CurrentUserInfo {
  employee: Employee
  employeeNumber: String
}

"Пара - Заказчик и тип заказчика"
type CustomerItem {
  customer: Customer!
  customerType: CustomerType!
}

type DecisionTree {
  id: ID!
  tree: String!
  type: String!
  validFrom: Date
  validTo: Date
}

type DeicingCar implements IResource & IResourceNumberType & ISoftDelete & ITechnicalResource & Mobility {
  businessRoleNames: [String!]!
  businessRoles: [BusinessRole!]!
  deletedAt: DateTime
  empLifeCycleDependency: Boolean!
  erpResourceId: String @deprecated(reason: "Deprecated in a favour of ErpResource.resource")
  id: ID!
  isPartOfComplexResource: Boolean!
  malfunction: Boolean!
  mixingSystem: String
  mobileIdent: String
  mobilityType: MobilityType!
  onlineStatus: OnlineStatus!
  productionSiteName: String
  resourceGroup: ResourceGroup @deprecated(reason: "No longer supported")
  resourceGroupValidityPeriods(filter: ResourceGroupValidityPeriodFilter): [ResourceGroupValidityPeriod!]!
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivision: Subdivision!
  subdivisionId: String! @deprecated(reason: "Will be removed. Use field subdivison")
  supportedAircraftTypes: [String]! @deprecated(reason: "No longer supported")
  tankVolume: Int
  tankVolumeTypeFour: Int
  tankVolumeTypeOne: Int
  unavailability(filter: ResourceUnavailabilityFilter): [ResourceUnavailabilityPeriod!]!
  waybills(filter: WaybillFilter): [Waybill!]!
}

type DelayCode implements IAodbMasterData & IEntity & ISoftDelete {
  alphanumericCode: String
  aodbInternalId: String!
  deletedAt: DateTime
  description: String
  id: ID!
  lastUpdateDateTime: DateTime!
  numericCode: String!
  summary: String
}

type DeleteComplexResourceResponse {
  deletedComplexResource: ComplexResource
  existed: Boolean!
}

type DeleteResult {
  existed: Boolean!
}

"Сотрудник"
type Employee implements IPersonnel & IResource & IResourceNumberType & ISoftDelete & Mobility {
  "Периоды доступности сотрудника. Формируются из смен, время которых пересекается с временами из фильтра"
  availability(filter: EmployeeAvailabilityFilter!): [EmployeeAvailability!]!
  availableBusinessRoles: [BusinessRole!]! @deprecated(reason: "Deprecated in a favour of `User.xxxFilterProfile`")
  availableResourceTypes: [ResourceType!]! @deprecated(reason: "Deprecated in a favour of `User.xxxFilterProfile`")
  availableServiceStandards(filter: ServiceStandardFilter): [ServiceStandard!]!
  availableSubdivisions: [Subdivision!]! @deprecated(reason: "Deprecated in a favour of `User.xxxFilterProfile`")
  businessRole: BusinessRole @deprecated(reason: "Deprecated in a favour of businessRoles")
  businessRoleNames: [String!]!
  businessRoles: [BusinessRole!]!
  "Статус сотрудника на текущую смену в момент получения данных"
  currentShiftStatus: EmployeeShiftStatus! @deprecated(reason: "Will be removed. Use ShiftJournal.currentShiftStatus")
  deletedAt: DateTime
  employeeGroupViews(filter: OptionalDateTimePeriodInput): [EmployeeGroupView!]!
  erpResourceId: String @deprecated(reason: "Deprecated in a favour of ErpResource.resource")
  firstName: String!
  id: ID!
  integrationId: String!
  isPartOfComplexResource: Boolean!
  lastName: String!
  "Недоступность (неисправность) сотрудника, как ресурса"
  malfunction: Boolean!
  middleName: String!
  mobileIdent: String
  mobilityType: MobilityType!
  number: String!
  onlineStatus: OnlineStatus!
  "Должность"
  position: Position!
  productionSiteName: String
  resourceGroup: ResourceGroup @deprecated(reason: "No longer supported")
  resourceGroupDisplayConfig: EmployeeResourceGroupDisplayConfig!
  resourceGroupValidityPeriods(filter: ResourceGroupValidityPeriodFilter): [ResourceGroupValidityPeriod!]!
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shiftJournals(filter: ShiftJournalFilter): [ShiftJournal!]!
  shifts(filter: ShiftFilter): [Shift!]!
  shortTitle: String
  skillData(filter: EmployeeSkillDataFilter): EmployeeSkillData!
  skillSpecificationCodes: [String!]! @deprecated(reason: "Will be removed. Use skillData.skillSpecificationCodes")
  skillSpecificationNames: [String]! @deprecated(reason: "Will be removed. Use skillData.skillSpecificationNames")
  skills: [Skill!]! @deprecated(reason: "Will be removed. Use skillData.skills")
  "Подразделение"
  subdivision: Subdivision!
  subdivisionId: String! @deprecated(reason: "Will be removed. Use field subdivison")
  subdivisionTrip: Subdivision
  unavailability(filter: ResourceUnavailabilityFilter): [ResourceUnavailabilityPeriod!]!
  "Уникальный код должности сотрудника: 'Subdivision.hrmId_Position.code'"
  uniquePositionCode: String!
  validityPeriod: OptionalDateTimePeriod!
  waybills(filter: WaybillFilter): [Waybill!]!
}

type EmployeeArrivedToShiftHasAnotherShiftJournalError implements UserError {
  anotherShiftJournal: ShiftJournal!
  message(localeSpecification: LocaleSpecificationInput): String!
  path: [String!]
}

type EmployeeAvailability {
  availableFrom: DateTime!
  availableTo: DateTime!
  isArrived: Boolean!
}

type EmployeeBlockView {
  "Employees outside the EmployeeGroups"
  employeeViews: [EmployeeWithTechResourceView!]!
  groupViews: [EmployeeGroupWithTechResourceView!]!
}

type EmployeeDepartureFromShiftWithInvalidDepartureTimeError implements UserError {
  employee: Employee!
  message(localeSpecification: LocaleSpecificationInput): String!
  path: [String!]
}

type EmployeeGroup implements IEntity & ISoftDelete {
  businessRoles: [BusinessRole!]!
  deleted: Boolean!
  deletedAt: DateTime
  id: ID!
  name: String!
  subdivisions: [Subdivision!]!
  validityPeriods(filter: EmployeeGroupValidityPeriodFilter): [EmployeeGroupValidityPeriod!]!
}

type EmployeeGroupCreateErrors {
  errors: [EmployeeGroupCreateError!]!
}

type EmployeeGroupDeleteErrors {
  errors: [EmployeeGroupDeleteError!]!
}

type EmployeeGroupEmployeeUsageView {
  employee: Employee!
  validityPeriods: [OptionalDateTimePeriod!]!
}

type EmployeeGroupErrorDuplicatingName implements UserError {
  existing: EmployeeGroup!
  message(localeSpecification: LocaleSpecificationInput): String!
  path: [String!]
}

type EmployeeGroupErrorEmptyName implements UserError {
  message(localeSpecification: LocaleSpecificationInput): String!
  path: [String!]
}

type EmployeeGroupErrorEmptySubdivisions implements UserError {
  message(localeSpecification: LocaleSpecificationInput): String!
  path: [String!]
}

type EmployeeGroupErrorInUse implements UserError {
  employeeGroup: EmployeeGroup!
  employeeUsageViews: [EmployeeGroupEmployeeUsageView!]!
  message(localeSpecification: LocaleSpecificationInput): String!
  path: [String!]
}

type EmployeeGroupUpdateErrors {
  errors: [EmployeeGroupUpdateError!]!
}

type EmployeeGroupValidityPeriod {
  employeeGroup: EmployeeGroup!
  employees: [Employee!]!
  validityPeriod: OptionalDateTimePeriod!
}

type EmployeeGroupView {
  deletable: Boolean!
  employeeGroup: EmployeeGroup
  validityPeriod: OptionalDateTimePeriod!
}

type EmployeeGroupViewErrorInvalidFrom implements UserError {
  message(localeSpecification: LocaleSpecificationInput): String!
  path: [String!]
  proposedFrom: DateTime
}

type EmployeeGroupViewErrorStarted implements UserError {
  message(localeSpecification: LocaleSpecificationInput): String!
  path: [String!]
}

type EmployeeGroupViewToShiftJournalAssignmentErrors {
  errors: [EmployeeGroupViewToShiftJournalAssignmentError!]!
}

type EmployeeGroupWithTechResourceView {
  employees: [EmployeeWithTechResourceView!]!
  group: EmployeeGroup!
  validityPeriod: OptionalDateTimePeriod!
}

type EmployeeInEmployeeGroupError implements UserError {
  employeeGroupViews: [EmployeeGroupView!]!
  message(localeSpecification: LocaleSpecificationInput): String!
  path: [String!]
}

type EmployeeSkillData {
  skillSpecificationCodes: [String!]!
  skillSpecificationNames: [String]!
  skills: [Skill!]!
}

type EmployeeWithTechResourceView {
  employee: Employee!
  techTypes: [ResourceType!]!
}

type EmptyValueCondition implements ICondition {
  createdAt: DateTime!
  id: ID!
  object: ObjectPropertyReference!
  operator: EmptyValueOperator!
  type: ConditionType!
  updatedAt: DateTime!
}

type EqualityBooleanCondition implements ICondition {
  createdAt: DateTime!
  id: ID!
  object: ObjectPropertyReference!
  operator: EqualityOperator!
  type: ConditionType!
  updatedAt: DateTime!
  value: Boolean!
}

type EqualityFloatCondition implements ICondition {
  createdAt: DateTime!
  id: ID!
  object: ObjectPropertyReference!
  operator: EqualityOperator!
  type: ConditionType!
  updatedAt: DateTime!
  value: Float!
}

type EqualityIntCondition implements ICondition {
  createdAt: DateTime!
  id: ID!
  object: ObjectPropertyReference!
  operator: EqualityOperator!
  type: ConditionType!
  updatedAt: DateTime!
  value: Int!
}

"Equality Condition"
type EqualityStringCondition implements ICondition {
  createdAt: DateTime!
  id: ID!
  object: ObjectPropertyReference!
  operator: EqualityOperator!
  type: ConditionType!
  updatedAt: DateTime!
  value: String!
}

type ErpResource implements ISoftDelete {
  availablePeriodEnd: DateTime
  availablePeriodStart: DateTime
  deletedAt: DateTime
  erpInternalId: String!
  fleetNumber: String
  id: ID!
  invNumber: String
  mileage: Int
  name: String
  productionYear: Int
  resource: ResourceItem
  unavailablePeriods: [ErpResourceUnavailabilityPeriod!]!
  underWarranty: Boolean
}

type ErpResourceUnavailabilityPeriod {
  id: ID!
  unavailableFrom: DateTime!
  unavailableTo: DateTime!
  wayBillNum: String
}

type ExtendedParam implements ISoftDelete {
  allowedValues: ExtendedParamValueUnion
  deleted: Boolean!
  deletedAt: DateTime
  id: ID!
  name: String!
  valueType: ExtendedParamValueType!
}

type ExtendedParamStringArrayValue {
  value: [String]!
}

type ExtendedParamStringValue {
  value: String
}

type ExtendedParamValue {
  param: ExtendedParam!
  value: ExtendedParamValueUnion!
}

type Extinguisher implements IResource & IResourceNumberType & ISoftDelete & ITechnicalResource & Mobility {
  businessRoleNames: [String!]!
  businessRoles: [BusinessRole!]!
  deletedAt: DateTime
  empLifeCycleDependency: Boolean!
  erpResourceId: String @deprecated(reason: "Deprecated in a favour of ErpResource.resource")
  id: ID!
  isPartOfComplexResource: Boolean!
  malfunction: Boolean!
  mobileIdent: String
  mobilityType: MobilityType!
  onlineStatus: OnlineStatus!
  productionSiteName: String
  resourceGroup: ResourceGroup @deprecated(reason: "No longer supported")
  resourceGroupValidityPeriods(filter: ResourceGroupValidityPeriodFilter): [ResourceGroupValidityPeriod!]!
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivision: Subdivision!
  subdivisionId: String! @deprecated(reason: "Will be removed. Use field subdivison")
  supportedAircraftTypes: [String]!
  unavailability(filter: ResourceUnavailabilityFilter): [ResourceUnavailabilityPeriod!]!
  validCheckPeriod: String
  waybills(filter: WaybillFilter): [Waybill!]!
}

type FileRecord {
  comment: String
  fileExtension: String
  fileName: String
  fileSize: Long
  id: String!
  metadata: [MetadataParameter!]!
  minioLink: MinioLink
  minioObjectName: String
  owner: String
  status: FileRecordStatus!
}

"Рейс"
type Flight implements IServiceObject {
  actualArrivalDatetime: DateTime @deprecated(reason: "Use `timeExtension`")
  actualDepartureDatetime: DateTime @deprecated(reason: "Use `timeExtension`")
  actualLandingDatetime: DateTime @deprecated(reason: "Use `timeExtension`")
  actualReadyForBoardingDatetime: DateTime @deprecated(reason: "Use `timeExtension`")
  actualTENDatetime: DateTime @deprecated(reason: "Use `timeExtension`")
  actualTakeoffDatetime: DateTime @deprecated(reason: "Use `timeExtension`")
  aidxStatus: String
  aircraft: Aircraft
  aircraftAirline: Airline
  aircraftExtension: FlightAircraftExtension!
  aircraftTerminal: String
  aircraftType: AircraftType
  "Авиакомпания"
  airline: Airline
  alerts: [FlightAlert!]!
  aodbInternalId: String!
  aodbInternalStatus: String
  baggageWeight: Int
  belt: Belt
  belts: [Belt]! @deprecated(reason: "Will be removed. Instead use belt.")
  cabinCrewNumber: Int
  cancellationDatetime: DateTime @deprecated(reason: "Use `timeExtension`")
  comments: [Comment!]!
  crewNumber: Int
  "Time in seconds"
  delayTime: Int
  deletedAt: DateTime
  estimatedArrivalDatetime: DateTime @deprecated(reason: "Use `timeExtension`")
  estimatedDepartureDatetime: DateTime @deprecated(reason: "Use `timeExtension`")
  estimatedLandingDatetime: DateTime @deprecated(reason: "Use `timeExtension`")
  estimatedReadyForBoardingDatetime: DateTime @deprecated(reason: "Use `timeExtension`")
  estimatedTENDatetime: DateTime @deprecated(reason: "Use `timeExtension`")
  estimatedTakeoffDatetime: DateTime @deprecated(reason: "Use `timeExtension`")
  flightNumber: String!
  flightOnParkings: [FlightOnParking!]!
  flightSpecification: FlightSpecification!
  gateNames: [String]!
  gates: [Gate]!
  handlingAgents: [FlightHandlingAgent!]!
  id: ID!
  invoice: Invoice
  invoices: [Invoice!]! @deprecated(reason: "No longer supported")
  irregularityTime: Int
  isReadyParkingSpot: Boolean
  lastUpdateDateTime: DateTime
  "Связанный рейс"
  linkedFlight: Flight
  linkedFlightNumId: ID @deprecated(reason: "No longer supported")
  loadInfo: [FlightLoadInfo!]!
  numId: ID!
  operationalTime: [FlightOperationalTime!]!
  originDate: DateTime!
  "Место стоянки"
  parkingSpot: ParkingSpot
  parkingSpotScheduledEndDatetime: DateTime @deprecated(reason: "No longer supported")
  parkingSpotScheduledStartDatetime: DateTime @deprecated(reason: "No longer supported")
  passengerAdditions: [FlightPassengerAdditional!]!
  passengerCountInfo: [FlightPassengerInfo!]!
  passengerCountTotal(cabinClasses: [String!] = ["ALL"], passengerTypes: [String!] = ["Adult", "Child", "Infant"], qualifiers: [String!] = ["Boarded"]): Int!
  paymentMethod: String!
  primaryAgentNames: [String]!
  readyForBilling: FlightBillingStatus
  runway: String
  scheduledArrivalDatetime: DateTime @deprecated(reason: "Use `timeExtension`")
  scheduledDepartureDatetime: DateTime @deprecated(reason: "Use `timeExtension`")
  "время перелёта (разница между STD и STA) в секундах"
  scheduledFlightTime: Int
  scheduledLandingDatetime: DateTime @deprecated(reason: "Use `timeExtension`")
  scheduledReadyForBoardingDatetime: DateTime @deprecated(reason: "Use `timeExtension`")
  scheduledTENDatetime: DateTime @deprecated(reason: "Use `timeExtension`")
  scheduledTakeoffDatetime: DateTime @deprecated(reason: "Use `timeExtension`")
  serviceType: FlightServiceType
  services(filter: ServiceFilter): [Service!]!
  shute: String
  specialEmphasis: SpecialEmphasis
  timeExtension: FlightTimeExtension!
  "Тип"
  trafficType: FlightTrafficType
  transportedPassengerCount: Int
  "является ли рейс оборотным: ETD - ETA < max turn around time"
  turnAround: Boolean!
  "время оборота (ETD - ETA) в секундах"
  turnAroundTime: Int
}

type FlightAircraftExtension {
  packingMethod: String!
  seatCapacity: Int!
}

type FlightAlert {
  category: String!
  code: String!
  severity: String!
}

type FlightDetails {
  flightDirectionType: FlightDirectionType
}

type FlightHandlingAgent {
  category: String!
  name: String!
}

type FlightLoadInfo {
  loadType: String!
  qualifier: String!
  value: Int!
}

type FlightOnParking {
  actualEndDatetime: DateTime
  actualStartDatetime: DateTime
  parkingSpot: ParkingSpot!
  scheduledEndDatetime: DateTime
  scheduledStartDatetime: DateTime
}

type FlightOperationalTime {
  qualifier: String!
  type: String!
  value: DateTime!
}

type FlightPassengerAdditional {
  additionalCategories: [PassengerCategoryAdditional!]
  category: PassengerCategory!
  id: ID!
  name: String!
}

type FlightPassengerInfo {
  cabinClass: String!
  passengerType: String!
  qualifier: String!
  value: Int!
}

type FlightPaymentMethod {
  id: ID!
  label: String!
}

"Инструкции к операциям и условия их выбора"
type FlightServiceManual {
  aircraftTypes: [AircraftType!]!
  airlines: [Airline!]!
  conditionGroups: [ConditionGroup!]! @deprecated(reason: "Refresh instructions model")
  conditions: [Condition!]! @deprecated(reason: "Refresh instructions model")
  fileRecord: FileRecord!
  id: ID!
  name: String!
  positions: [Position!]!
  serviceObjectType: ServiceObjectType!
  subdivisions: [Subdivision!]!
}

type FlightServiceType implements IAodbMasterData & ISoftDelete {
  aodbInternalId: String!
  category: String!
  code: String!
  deletedAt: DateTime
  description: String
  id: ID!
  lastUpdateDateTime: DateTime!
  operations: [String!]!
}

type FlightSpecification {
  arrivalAirport: Airport
  departureAirport: Airport
  type: FlightSpecificationType!
}

type FlightSubscriptionEvent implements ISubscriptionEvent {
  data: Flight
  eventType: SubscriptionEventType!
  id: ID!
}

type FlightTimeExtension {
  "фактическое время прибытия (ATA)"
  actualArrivalDatetime: DateTime
  "фактическое время вылета (ATD)"
  actualDepartureDatetime: DateTime
  "фактическое время приземления (LDT ACT)"
  actualLandingDatetime: DateTime
  "фактическое время RFB (RFB ACT)"
  actualReadyForBoardingDatetime: DateTime
  "фактическое время TEN (TEN ACT)"
  actualTENDatetime: DateTime
  "фактическое время отрыва (TKO ACT)"
  actualTakeoffDatetime: DateTime
  bestArrivalDatetime: DateTime
  bestDepartureDatetime: DateTime
  bestLandingDatetime: DateTime
  bestTakeoffDatetime: DateTime
  "время отмены"
  cancellationDatetime: DateTime
  "расчетное время прибытия (ETA) - EIBT"
  estimatedArrivalDatetime: DateTime
  "расчетное время вылета (ETD) - EOBT"
  estimatedDepartureDatetime: DateTime
  "расчётное время приземления (LDT EST)"
  estimatedLandingDatetime: DateTime
  "расчётное время RFB (RFB EST)"
  estimatedReadyForBoardingDatetime: DateTime
  "расчётное время TEN (TEN EST)"
  estimatedTENDatetime: DateTime
  "расчётное время отрыва (TKO EST)"
  estimatedTakeoffDatetime: DateTime
  "плановое время прибытия (STA) -  SIBT"
  scheduledArrivalDatetime: DateTime
  "плановое время вылета (STD) -  SOBT"
  scheduledDepartureDatetime: DateTime
  "плановое время приземления (LDT SCT)"
  scheduledLandingDatetime: DateTime
  "плановое время RFB (RFB SCT)"
  scheduledReadyForBoardingDatetime: DateTime
  "плановое время TEN (TEN SCT)"
  scheduledTENDatetime: DateTime
  "плановое время отрыва (TKO SCT)"
  scheduledTakeoffDatetime: DateTime
  scheduledTurnAroundTime: Int
}

type FollowMeCar implements IResource & IResourceNumberType & ISoftDelete & ITechnicalResource & Mobility {
  businessRoleNames: [String!]!
  businessRoles: [BusinessRole!]!
  deletedAt: DateTime
  empLifeCycleDependency: Boolean!
  erpResourceId: String @deprecated(reason: "Deprecated in a favour of ErpResource.resource")
  id: ID!
  isPartOfComplexResource: Boolean!
  malfunction: Boolean!
  mobileIdent: String
  mobilityType: MobilityType!
  nameUnitTechnicians: String
  onlineStatus: OnlineStatus!
  productionSiteName: String
  resourceGroup: ResourceGroup @deprecated(reason: "No longer supported")
  resourceGroupValidityPeriods(filter: ResourceGroupValidityPeriodFilter): [ResourceGroupValidityPeriod!]!
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivision: Subdivision!
  subdivisionId: String! @deprecated(reason: "Will be removed. Use field subdivison")
  unavailability(filter: ResourceUnavailabilityFilter): [ResourceUnavailabilityPeriod!]!
  waybills(filter: WaybillFilter): [Waybill!]!
}

type GPU implements IResource & IResourceNumberType & ISoftDelete & ITechnicalResource & Mobility {
  alternatingCurrent: Int!
  businessRoleNames: [String!]!
  businessRoles: [BusinessRole!]!
  deletedAt: DateTime
  directCurrent: Int!
  empLifeCycleDependency: Boolean!
  erpResourceId: String @deprecated(reason: "Deprecated in a favour of ErpResource.resource")
  id: ID!
  isPartOfComplexResource: Boolean!
  malfunction: Boolean!
  mobileIdent: String
  mobilityType: MobilityType!
  onlineStatus: OnlineStatus!
  productionSiteName: String
  resourceGroup: ResourceGroup @deprecated(reason: "No longer supported")
  resourceGroupValidityPeriods(filter: ResourceGroupValidityPeriodFilter): [ResourceGroupValidityPeriod!]!
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivision: Subdivision!
  subdivisionId: String! @deprecated(reason: "Will be removed. Use field subdivison")
  supportedAircraftTypes: [String]!
  unavailability(filter: ResourceUnavailabilityFilter): [ResourceUnavailabilityPeriod!]!
  waybills(filter: WaybillFilter): [Waybill!]!
}

type GasRefueller implements IResource & IResourceNumberType & ISoftDelete & ITechnicalResource & Mobility {
  businessRoleNames: [String!]!
  businessRoles: [BusinessRole!]!
  deletedAt: DateTime
  empLifeCycleDependency: Boolean!
  erpResourceId: String @deprecated(reason: "Deprecated in a favour of ErpResource.resource")
  id: ID!
  isPartOfComplexResource: Boolean!
  malfunction: Boolean!
  mobileIdent: String
  mobilityType: MobilityType!
  onlineStatus: OnlineStatus!
  productionSiteName: String
  resourceGroup: ResourceGroup @deprecated(reason: "No longer supported")
  resourceGroupValidityPeriods(filter: ResourceGroupValidityPeriodFilter): [ResourceGroupValidityPeriod!]!
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivision: Subdivision!
  subdivisionId: String! @deprecated(reason: "Will be removed. Use field subdivison")
  supportedAircraftTypes: [String]! @deprecated(reason: "No longer supported")
  typeGas: String!
  unavailability(filter: ResourceUnavailabilityFilter): [ResourceUnavailabilityPeriod!]!
  waybills(filter: WaybillFilter): [Waybill!]!
}

type Gate implements IAodbMasterData & ISoftDelete {
  allowedDirection: String
  aodbInternalId: String!
  arrivalCapacity: String
  arrivalSecurityLevels: [String]!
  busRequired: Boolean
  customCheck: String
  deletedAt: DateTime
  departureCapacity: String
  departureSecurityLevels: [String]!
  id: ID!
  lastUpdateDateTime: DateTime!
  loungeAvailable: Boolean
  name: String!
  passportCheck: String
  securityCheck: String
  telephone: String
  terminal: String
}

type HasOfIntCondition implements ICondition {
  createdAt: DateTime!
  id: ID!
  object: ObjectPropertyReference!
  operator: HasOfOperator!
  type: ConditionType!
  updatedAt: DateTime!
  value: [Int!]!
}

type HasOfStringCondition implements ICondition {
  createdAt: DateTime!
  id: ID!
  object: ObjectPropertyReference!
  operator: HasOfOperator!
  type: ConditionType!
  updatedAt: DateTime!
  value: [String!]!
}

type Heater implements IResource & IResourceNumberType & ISoftDelete & ITechnicalResource & Mobility {
  airTemperature: Int!
  businessRoleNames: [String!]!
  businessRoles: [BusinessRole!]!
  deletedAt: DateTime
  empLifeCycleDependency: Boolean!
  erpResourceId: String @deprecated(reason: "Deprecated in a favour of ErpResource.resource")
  heatingPrinciple: HeatingPrinciple!
  id: ID!
  isPartOfComplexResource: Boolean!
  malfunction: Boolean!
  mobileIdent: String
  mobilityType: MobilityType!
  onlineStatus: OnlineStatus!
  productionSiteName: String
  resourceGroup: ResourceGroup @deprecated(reason: "No longer supported")
  resourceGroupValidityPeriods(filter: ResourceGroupValidityPeriodFilter): [ResourceGroupValidityPeriod!]!
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivision: Subdivision!
  subdivisionId: String! @deprecated(reason: "Will be removed. Use field subdivison")
  supportedAircraftTypes: [String]! @deprecated(reason: "No longer supported")
  unavailability(filter: ResourceUnavailabilityFilter): [ResourceUnavailabilityPeriod!]!
  waybills(filter: WaybillFilter): [Waybill!]!
}

type HeaterCar implements IResource & IResourceNumberType & ISoftDelete & ITechnicalResource & Mobility {
  airTemperature: Int!
  businessRoleNames: [String!]!
  businessRoles: [BusinessRole!]!
  deletedAt: DateTime
  empLifeCycleDependency: Boolean!
  erpResourceId: String @deprecated(reason: "Deprecated in a favour of ErpResource.resource")
  id: ID!
  isPartOfComplexResource: Boolean!
  malfunction: Boolean!
  mobileIdent: String
  mobilityType: MobilityType!
  onlineStatus: OnlineStatus!
  productionSiteName: String
  resourceGroup: ResourceGroup @deprecated(reason: "No longer supported")
  resourceGroupValidityPeriods(filter: ResourceGroupValidityPeriodFilter): [ResourceGroupValidityPeriod!]!
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivision: Subdivision!
  subdivisionId: String! @deprecated(reason: "Will be removed. Use field subdivison")
  supportedAircraftTypes: [String]! @deprecated(reason: "No longer supported")
  unavailability(filter: ResourceUnavailabilityFilter): [ResourceUnavailabilityPeriod!]!
  waybills(filter: WaybillFilter): [Waybill!]!
}

type InIntCondition implements ICondition {
  createdAt: DateTime!
  id: ID!
  object: ObjectPropertyReference!
  operator: InOperator!
  type: ConditionType!
  updatedAt: DateTime!
  value: [Int!]!
}

"Comparison Multiple Values Condition"
type InStringCondition implements ICondition {
  createdAt: DateTime!
  id: ID!
  object: ObjectPropertyReference!
  operator: InOperator!
  type: ConditionType!
  updatedAt: DateTime!
  value: [String!]!
}

type Invoice {
  comment: String
  createdAt: DateTime!
  currentState: InvoiceState!
  currentStateId: ID!
  deletedAt: DateTime
  emailRequest: [InvoiceEmailRequest!]!
  flights: [Flight!]!
  id: ID!
  number: String!
  services(filter: ServiceFilter): [Service!]!
  signSamples: [InvoiceSignSample!]!
  signState: SignState!
  stateHistory: [InvoiceState!]!
}

type InvoiceEmailRequest {
  createdAt: DateTime!
  deletedAt: DateTime
  employeeId: ID
  htmlFileRecordId: ID
  id: ID!
  invoiceEmailFileRecord: [FileRecord!]!
  invoiceId: ID!
  invoiceStateId: ID!
  state: InvoiceEmailRequestState!
  xmlFileRecordId: ID
}

type InvoiceSignSample {
  createdAt: DateTime!
  deletedAt: DateTime
  fileRecordId: ID!
  id: ID!
  invoiceId: String!
  invoiceStateId: ID!
}

type InvoiceState {
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  invoiceId: String!
  signState: SignState!
}

type ItemAssignedResourceResult {
  assignedResult: AssignedResultStatus!
  employee: Employee
  employeeId: String!
}

type LinkedFlight {
  arrival: Flight
  departure: Flight
}

type LocalPlace implements ISoftDelete {
  code: ID!
  deletedAt: DateTime
  description: String
  id: ID!
  location: ObjectLocationItem
  locationCode: String
  name: String!
  types: [LocalPlaceType!]!
}

"Местоположение"
type Location implements IEntity & ISoftDelete {
  deletedAt: DateTime
  description(localeSpecification: LocaleSpecificationInput): String
  id: ID!
  object: ObjectPropertyReference!
}

type MandatoryDateTimePeriod {
  from: DateTime!
  to: DateTime!
}

type MathDictionary {
  dictionary: String!
  id: ID!
  type: String!
  validFrom: Date
  validTo: Date
}

type MetadataParameter {
  name: String!
  value: String!
}

type MinioLink {
  expiresAt: DateTime!
  link: String!
}

type Mutation {
  addAodbMilestoneToOperationSpecification(id: ID!, input: OperationAodbMilestoneAssociationInput!): OperationSpecification!
  addAvailableResourceTypes(employeeId: String!, resourceTypes: [ResourceType]!): Employee!
  addAvailableServiceStandardsToEmployee(employeeId: ID!, serviceStandardIds: [ID!]!): Employee!
  addAvailableSubdivision(employeeId: String!, subdivisions: [String]!): Employee!
  "Назначить бизнес-роль сотруднику"
  addBusinessRoleToEmployee(businessRoleId: ID!, employeeId: ID!): Employee! @deprecated(reason: "Deprecated in a favour of addBusinessRolesToResource")
  addBusinessRolesToOperationResourceSpecification(businessRoleIds: [ID!]!, id: ID!): OperationResourceSpecification!
  addBusinessRolesToResource(businessRoleIds: [ID!]!, resourceId: ID!): ResourceItem!
  addBusinessRuleToBusinessRuleProviding(businessRuleInput: BusinessRuleInput!, id: ID!): BusinessRuleProviding!
  "Мутации возвращают родительский ServiceStandard"
  addChildToServiceStandard(childId: ID!, serviceStandardId: ID!): ServiceStandard!
  "Добавление нового комментария"
  addCommentToFlight(flightId: ID!, input: [CommentCreateInput!]!): Flight!
  "Добавление нового комментария"
  addCommentToOperation(input: CommentCreateInput!, operationId: ID!): Operation!
  addConditionGroupsToBusinessRuleProviding(conditionGroupIds: [ID!]!, id: ID!): BusinessRuleProviding!
  addConditionGroupsToFlightServiceManual(conditionGroupIds: [ID!]!, id: ID!): FlightServiceManual! @deprecated(reason: "Refresh instructions model")
  addConditionGroupsToOperationGroupResourceSpecification(conditionGroupIds: [ID!]!, id: ID!): OperationGroupResourceSpecification!
  addConditionGroupsToOperationResourceSpecification(conditionGroupIds: [ID!]!, id: ID!): OperationResourceSpecification!
  addConditionGroupsToOperationResourceSpecificationCommon(conditionGroupIds: [ID!]!, id: ID!): OperationResourceSpecificationCommon!
  addConditionGroupsToOperationSpecificationNorm(conditionGroupIds: [ID!]!, id: ID!): OperationSpecificationNorm!
  addConditionGroupsToOperationSpecificationTimeCalculationRule(conditionGroupIds: [ID!]!, id: ID!): OperationSpecificationTimeCalculationRule!
  addConditionGroupsToRouteSpecificationProviding(conditionGroupIds: [ID!]!, id: ID!): RouteSpecificationProviding!
  addConditionGroupsToServiceObjectSla(conditionGroupIds: [ID!]!, id: ID!): ServiceObjectSla!
  addConditionGroupsToServiceStandardProviding(conditionGroupIds: [ID!]!, id: ID!): ServiceStandardProviding!
  addConditionGroupsToTaskTransferNorm(conditionGroupIds: [ID!]!, id: ID!): TaskTransferNorm!
  addConditionToBusinessRuleProviding(conditionInput: ConditionInput!, id: ID!): BusinessRuleProviding!
  addConditionToConditionGroup(conditionInput: ConditionInput!, id: ID!): ConditionGroup!
  addConditionToFlightServiceManual(conditionInput: ConditionInput!, id: ID!): FlightServiceManual! @deprecated(reason: "Refresh instructions model")
  addConditionToOperationGroupResourceSpecification(conditionInput: ConditionInput!, id: ID!): OperationGroupResourceSpecification!
  addConditionToOperationResourceSpecification(conditionInput: ConditionInput!, id: ID!): OperationResourceSpecification!
  addConditionToOperationResourceSpecificationCommon(conditionInput: ConditionInput!, id: ID!): OperationResourceSpecificationCommon!
  addConditionToOperationSpecificationNorm(conditionInput: ConditionInput!, id: ID!): OperationSpecificationNorm!
  addConditionToOperationSpecificationTimeCalculationRule(conditionInput: ConditionInput!, id: ID!): OperationSpecificationTimeCalculationRule!
  addConditionToRouteSpecificationProviding(conditionInput: ConditionInput!, id: ID!): RouteSpecificationProviding!
  addConditionToServiceObjectSla(conditionInput: ConditionInput!, id: ID!): ServiceObjectSla!
  addConditionToServiceStandardProviding(conditionInput: ConditionInput!, id: ID!): ServiceStandardProviding!
  addConditionToTaskTransferNorm(conditionInput: ConditionInput!, id: ID!): TaskTransferNorm!
  addConsumableResourceTypeToServiceStandard(consumableResourceTypeId: ID!, serviceStandardId: ID!): Boolean! @deprecated(reason: "Will be removed")
  addEmailToAirline(id: ID!, input: String!): Airline
  addEmployeeToShift(employeeId: [ID!]!, shiftId: ID!): Shift!
  addEmployeesToShiftManual(employeeIds: [ID!]!, shiftId: ID!): AddEmployeeToShiftManualPayload!
  addExtendedParamsToServiceStandard(extendedParamIds: [ID!]!, serviceStandardId: ID!): ServiceStandard!
  addItemsToServiceBasket(id: ID!, serviceStandardIds: [ID!]!): ServiceBasket!
  "Добавление нового ресурс-слота в операцию"
  addOperationResourceSlotToOperation(operationId: ID!, operationResourceSlotId: ID!): Boolean!
  "Добавление нового ресурс-слота в задачу"
  addOperationResourceSlotToTask(operationResourceSlotId: ID!, taskId: ID!): Boolean!
  addOperationTimeToFlight(flightId: ID!, input: [FlightOperationalTimeInput!]!): Flight!
  addOperationToTask(operationId: ID!, taskId: ID!): Task!
  "Добавление пассажира. Возвращается добавленный пассажир"
  addPassengerToFlight(flightId: ID!, input: FlightPassengerAdditionalCreateInput!): Flight!
  "Добавление нескольких пассажиров. Возвращается актуальная коллекция пассажиров"
  addPassengersToFlight(flightId: ID!, input: [FlightPassengerAdditionalCreateInput!]!): Flight!
  addRequirementToOperationResourceSpecificationCommon(id: ID!, requirementInput: ConditionInput!): OperationResourceSpecificationCommon!
  addResourceAndSubdivisionInBatch(assignResources: ResourceAssignBatchRequestWrapper!): AssignedBatchResultWrapper!
  addResourceRequirementToOperationGroupResourceSpecification(id: ID!, requirementInput: ConditionInput!): OperationGroupResourceSpecification!
  addResourceRequirementToOperationResourceSpecification(id: ID!, requirementInput: ConditionInput!): OperationResourceSpecification!
  addResourceToGroupValidityPeriod(id: ID!, resourceIds: [ID!]!): ResourceGroupValidityPeriod!
  addResourceToResourceGroup(resourceGroupId: ID!, resourceId: ID!): ResourceGroup!
  addResourceTypesToBusinessRole(id: ID!, resourceTypes: [ResourceType!]!): BusinessRole!
  addRouteSpecificationProvidingToOperationSpecification(id: ID!, input: OperationSpecificationRouteSpecificationProvidingInput!): OperationSpecification!
  addServiceStandardToRole(roleId: ID!, serviceStandardId: ID!): Role
  addSubdivisionsToOperationResourceSpecification(id: ID!, subdivisionIds: [ID!]!): OperationResourceSpecification!
  addUnavailabilityPeriodsToResource(input: [ResourceUnavailabilityPeriodCreateInput!]!, resourceId: ID!): ResourceItem!
  assignEmployeeGroupViewsToShiftJournal(employeeId: ID!, input: [EmployeeGroupViewInput!]!, shiftId: ID!): EmployeeGroupViewToShiftJournalAssignmentPayload!
  assignResourceAndSubdivisionInBatch(assignResources: ResourceAssignBatchRequestWrapper!): AssignedBatchResultWrapper!
  "Назначение ресурса на задачу"
  assignResourceToTask(id: ID!, input: TaskResourceInput!): Task!
  assignResourceToTaskManual(id: ID!, input: AssignResourceToTaskManualInput!): AssignResourceToTaskManualPayload!
  assignSubdivisionForResource(resourceId: String!, resourceType: ResourceType!, subdivisionId: String): ResourceItem!
  assignedAvailableResourceTypes(employeeId: String!, resourceTypes: [ResourceType]!): Employee!
  assignedAvailableSubdivision(employeeId: String!, subdivisions: [String]!): Employee!
  cancelOperationResourceSlot(id: ID!): OperationResourceSlot!
  cancelService(id: ID!): Service!
  cancelServiceManual(id: ID!): Service!
  cancelTask(id: ID!, input: CancelTaskInput): Task!
  changeServiceBasketStatus(id: ID!, status: ServiceBasketStatus!): Boolean! @deprecated(reason: "Will be removed")
  "Установка нового времени начала для задачи (перемещает во времени все операции внутри задачи)"
  changeTaskScheduledStartTime(scheduledStartTime: DateTime!, taskId: ID!): Task!
  changeTaskStatus(id: ID!, input: ChangeTaskStatusInput, nextStatus: TaskStatus!): Task!
  changeTaskStatusManual(id: ID!, input: ChangeTaskStatusManualInput!): ChangeTaskStatusManualPayload!
  "Копирование задачи"
  copyTask(id: ID!, input: ResourceItemInput!): Task!
  createAirBridge(input: AirBridgeCreateInput): AirBridge
  createAirConditioner(input: AirConditionerCreateInput): AirConditioner
  createAirStartDevice(input: AirStartDeviceCreateInput): AirStartDevice
  createAircraft(input: AircraftCreateInput): Aircraft!
  createAircraftTug(input: AircraftTugCreateInput): AircraftTug
  createAircraftType(input: AircraftTypeCreateInput): AircraftType!
  createAirline(input: AirlineCreateInput): Airline!
  createAirport(input: AirportCreateInput): Airport!
  createAmbulift(input: AmbuliftCreateInput): Ambulift
  createAodbMilestone(input: AodbMilestoneCreateInput!): AodbMilestone!
  createBaggageTractor(input: BaggageTractorCreateInput): BaggageTractor
  createBelt(input: BeltCreateInput!): Belt!
  createBeltLoader(input: BeltLoaderCreateInput): BeltLoader
  createBusinessRole(input: BusinessRoleCreateInput): BusinessRole!
  createBusinessRuleProviding(input: BusinessRuleProvidingCreateInput!): BusinessRuleProviding!
  createCar(input: CarCreateInput): Car
  createCheckInCounter(input: CheckInCounterCreateInput!): CheckInCounter!
  createCity(input: CityCreateInput!): City!
  createComment(input: CommentCreateInput): Comment @deprecated(reason: "No longer supported")
  createComplexResourceAutomatic(input: ComplexResourceAutomaticCreateInput!): ComplexResource!
  createComplexResourceManual(input: ComplexResourceManualCreateInput!): ComplexResource!
  createCondition(input: ConditionInput): Condition
  createConditionGroup(input: ConditionGroupCreateInput!): ConditionGroupCreatePayload!
  createConsumableResource(input: ConsumableResourceCreateInput!): ConsumableResource!
  createConsumableResourceType(input: ConsumableResourceTypeCreateInput): ConsumableResourceType!
  createContainerLoader(input: ContainerLoaderCreateInput): ContainerLoader
  createContract(input: ContractCreateInput): Contract
  createCountry(input: CountryCreateInput!): Country!
  createDecisionTree(id: ID!, input: DecisionTreeCreateInput): DecisionTree
  createDeicingCar(input: DeicingCarCreateInput): DeicingCar
  createDelayCode(input: DelayCodeCreateInput!): DelayCode!
  createEmployee(input: EmployeeCreateInput!): Employee!
  createEmployeeGroup(input: EmployeeGroupCreateInput!): EmployeeGroupCreatePayload!
  createEmployees(input: [EmployeeCreateInput!]!): [Employee!]!
  createErpResource(input: ErpResourceCreateInput!): ErpResource!
  createExtinguisher(input: ExtinguisherCreateInput): Extinguisher
  createFlight(input: FlightCreateInput!): Flight!
  createFlightServiceManual(input: FlightServiceManualCreateInput!): FlightServiceManual!
  createFlightServiceType(input: FlightServiceTypeCreateInput!): FlightServiceType!
  createFollowMeCar(input: FollowMeCarCreateInput!): FollowMeCar! @deprecated(reason: "No longer supported")
  createGPU(input: GPUCreateInput): GPU
  createGasRefueller(input: GasRefuellerCreateInput): GasRefueller
  createGate(input: GateCreateInput!): Gate!
  createHeater(input: HeaterCreateInput): Heater
  createHeaterCar(input: HeaterCarCreateInput): HeaterCar
  createInvoice(createInput: InvoiceCreateInput!): Invoice!
  createLocation(input: LocationCreateInput!): Location!
  createMathDictionary(input: MathDictionaryCreateInput): MathDictionary
  createOperation(input: OperationCreateInput!): Operation!
  createOperationGroupResourceSpecification(input: OperationGroupResourceSpecificationCreateInput): OperationGroupResourceSpecification!
  createOperationResourceSlots(input: OperationResourceSlotsCreateInput!): [OperationResourceSlot!]!
  createOperationResourceSpecification(input: OperationResourceSpecificationCreateInput!): OperationResourceSpecification!
  createOperationResourceSpecificationCommon(input: OperationResourceSpecificationCommonCreateInput!): OperationResourceSpecificationCommon!
  createOperationSpecification(input: OperationSpecificationCreateInput): OperationSpecification
  createOperationSpecificationGroup(input: OperationSpecificationGroupCreateInput!): OperationSpecificationGroup!
  createOperationSpecificationNorm(input: OperationSpecificationNormCreateInput): OperationSpecificationNorm!
  createOperationSpecificationTimeCalculationRule(input: OperationSpecificationTimeCalculationRuleCreateInput): OperationSpecificationTimeCalculationRule!
  createOrUpdateServicesByServiceBasket(serviceBasketId: ID!): [Service!]!
  createParkingSpot(input: ParkingSpotCreateInput!): ParkingSpot!
  createPatternComment(input: PatternCommentCreateInput): PatternComment!
  createPaxBus(input: PaxBusCreateInput): PaxBus
  createPaxStairs(input: PaxStairsCreateInput): PaxStairs
  createPosition(input: PositionCreateInput!): Position!
  createPositions(input: [PositionCreateInput!]!): [Position!]!
  createReasonCancellationTask(input: ReasonCancellationTaskCreateInput!): ReasonCancellationTask!
  createResourceGroup(input: ResourceGroupCreateInput!): ResourceGroup!
  createResourceGroupValidityPeriod(input: ResourceGroupValidityPeriodCreateInput!): ResourceGroupValidityPeriod!
  createResourceType(input: AodbResourceTypeInput): AodbResourceType! @deprecated(reason: "No longer supported")
  createRole(input: RoleCreateInput!): Role
  createRouteSpecification(input: RouteSpecificationCreateInput!): RouteSpecification!
  createService(input: ServiceCreateInput): Service!
  createServiceBasket(input: ServiceBasketCreateInput!): ServiceBasket!
  createServiceBasketByServices(serviceIds: [ID!]!): ServiceBasket!
  createServiceObjectSla(input: ServiceObjectSlaCreateInput!): ServiceObjectSla!
  createServiceOffer(input: ServiceOfferCreateInput): ServiceOffer
  createServiceStandard(input: ServiceStandardCreateInput): ServiceStandard
  createServiceStandardProviding(input: ServiceStandardProvidingCreateInput!): ServiceStandardProviding!
  createShift(input: ShiftCreateInput!): Shift!
  createShiftFilterProfile(input: ShiftFilterProfileCreateInput!): ShiftFilterProfileCreatePayload!
  createShiftFilterProfileRule(input: ShiftFilterProfileRuleCreateInput!): ShiftFilterProfileRuleCreatePayload!
  createShifts(input: [ShiftCreateInput!]!): [Shift!]!
  createSkillSpecification(input: SkillSpecificationCreateInput!): SkillSpecification!
  createSpecialEmphasis(input: SpecialEmphasisCreateInput!): SpecialEmphasis!
  createStepladder(input: StepladderCreateInput): Stepladder
  createSubdivision(input: SubdivisionCreateInput): Subdivision!
  createSubdivisions(input: [SubdivisionCreateInput!]!): [Subdivision!]!
  createTask(input: TaskCreateInput): Task!
  createTaskFilterProfile(input: TaskFilterProfileCreateInput!): TaskFilterProfileCreatePayload!
  createTaskFilterProfileRule(input: TaskFilterProfileRuleCreateInput!): TaskFilterProfileRuleCreatePayload!
  createTaskPublicationTimeDirectory(input: TaskPublicationTimeDirectoryCreateInput!): TaskPublicationTimeDirectory!
  createTaskTransferNorm(input: TaskTransferNormCreateInput!): TaskTransferNorm!
  createTowbar(input: TowbarCreateInput): Towbar
  createTowbarAdapter(input: TowbarAdapterCreateInput): TowbarAdapter
  createUnit(input: UnitCreateInput!): Unit!
  createVacuumCleaner(input: VacuumCleanerCreateInput): VacuumCleaner
  createVacuumSweeper(input: VacuumSweeperCreateInput): VacuumSweeper
  createVipServiceCar(input: VipServiceCarCreateInput): VipServiceCar @deprecated(reason: "No longer supported")
  createWasteDisposalMachine(input: WasteDisposalMachineCreateInput): WasteDisposalMachine
  createWaterCar(input: WaterCarCreateInput): WaterCar
  createWaybill(input: WaybillCreateInput!): Waybill!
  deleteAirBridge(id: ID!): Boolean
  deleteAirConditioner(id: ID!): Boolean
  deleteAirStartDevice(id: ID!): Boolean
  deleteAircraft(id: ID!): Boolean!
  deleteAircraftTug(id: ID!): Boolean
  deleteAircraftType(id: ID!): Boolean!
  deleteAirline(id: ID!): Boolean!
  deleteAirport(id: ID!): Boolean!
  deleteAmbulift(id: ID!): Boolean
  deleteAodbMilestone(id: ID!): Boolean
  deleteBaggageTractor(id: ID!): Boolean
  deleteBelt(id: ID!): Boolean!
  deleteBeltLoader(id: ID!): Boolean
  deleteBusinessRole(id: ID!): Boolean!
  deleteBusinessRuleProviding(id: ID!): Boolean!
  deleteCar(id: ID!): Boolean
  deleteCheckInCounter(id: ID!): Boolean!
  deleteCity(id: ID!): Boolean!
  deleteComment(id: ID!): Boolean @deprecated(reason: "No longer supported")
  deleteComplexResource(id: ID!): ComplexResourceDeletePayload!
  "updateCondition(id: ID!, input: ConditionInput): Condition"
  deleteCondition(id: ID!): Boolean
  deleteConditionGroup(id: ID!): Boolean!
  deleteConsumableResource(id: ID!): Boolean!
  deleteConsumableResourceType(id: ID!): Boolean!
  deleteContainerLoader(id: ID!): Boolean
  deleteContract(id: ID!): Boolean
  deleteCountry(id: ID!): Boolean!
  deleteDecisionTree(id: ID!): Boolean
  deleteDeicingCar(id: ID!): Boolean
  deleteDelayCode(id: ID!): Boolean!
  deleteEmployee(id: ID!): Boolean!
  deleteEmployeeGroup(id: ID!): EmployeeGroupDeletePayload!
  deleteErpResource(id: ID!): Boolean!
  deleteExtinguisher(id: ID!): Boolean
  deleteFileRecord(fileRecordId: String!): FileRecord
  deleteFlight(id: ID!): Boolean!
  deleteFlightServiceManual(id: ID!): Boolean!
  deleteFlightServiceType(id: ID!): Boolean!
  deleteFollowMeCar(id: ID!): Boolean! @deprecated(reason: "No longer supported")
  deleteGPU(id: ID!): Boolean
  deleteGasRefueller(id: ID!): Boolean
  deleteGate(id: ID!): Boolean!
  deleteHeater(id: ID!): Boolean
  deleteHeaterCar(id: ID!): Boolean
  deleteLocation(id: ID!): Boolean!
  deleteMathDictionary(id: ID!): Boolean
  deleteOperationGroupResourceSpecification(id: ID!): Boolean!
  deleteOperationResourceSlot(id: ID!): Boolean!
  deleteOperationResourceSpecification(id: ID!): Boolean!
  deleteOperationResourceSpecificationCommon(id: ID!): Boolean!
  deleteOperationSpecification(id: ID!): Boolean
  deleteOperationSpecificationGroup(id: ID!): Boolean
  deleteOperationSpecificationNorm(id: ID!): Boolean!
  deleteOperationSpecificationTimeCalculationRule(id: ID!): Boolean
  deleteParkingSpot(id: ID!): Boolean!
  deletePatternComment(id: ID!): Boolean!
  deletePaxBus(id: ID!): Boolean
  deletePaxStairs(id: ID!): Boolean
  deletePosition(id: ID!): Boolean!
  deleteProperty(id: ID!): Boolean!
  deleteReasonCancellationTask(id: ID!): Boolean!
  deleteResourceFromGroupValidityPeriod(id: ID!, resourceIds: [ID!]!): ResourceGroupValidityPeriod!
  deleteResourceGroup(id: ID!): Boolean
  deleteResourceGroupValidityPeriod(id: ID!): Boolean!
  deleteRole(id: ID!): Boolean
  deleteRouteSpecification(id: ID!): Boolean!
  deleteServiceBasket(id: ID!): Boolean!
  deleteServiceObjectSla(id: ID!): Boolean!
  deleteServiceOffer(id: ID!): Boolean
  deleteServiceStandard(id: ID!): Boolean
  deleteServiceStandardProviding(id: ID!): Boolean!
  deleteShift(id: ID!): Boolean
  deleteShiftFilterProfile(id: ID!): ShiftFilterProfileDeletePayload!
  deleteShiftFilterProfileRule(id: ID!): ShiftFilterProfileRuleDeletePayload!
  deleteSkillSpecification(id: ID!): Boolean!
  deleteSpecialEmphasis(id: ID!): Boolean!
  deleteStepladder(id: ID!): Boolean
  deleteSubdivision(id: ID!): Boolean!
  deleteTaskFilterProfile(id: ID!): TaskFilterProfileDeletePayload!
  deleteTaskFilterProfileRule(id: ID!): TaskFilterProfileRuleDeletePayload!
  deleteTaskPublicationTimeDirectory(id: ID!): Boolean!
  deleteTaskTransferNorm(id: ID!): Boolean!
  deleteTowbar(id: ID!): Boolean
  deleteTowbarAdapter(id: ID!): Boolean
  deleteUnit(id: ID!): Boolean!
  deleteVacuumCleaner(id: ID!): Boolean
  deleteVacuumSweeper(id: ID!): Boolean
  deleteVipServiceCar(id: ID!): Boolean @deprecated(reason: "No longer supported")
  deleteWasteDisposalMachine(id: ID!): Boolean
  deleteWaterCar(id: ID!): Boolean
  deleteWaybill(id: ID!): Boolean
  discardInvoice(invoiceId: String!): Invoice!
  "Проставление отметки прибыл на смену"
  employeesArrivedToShift(employeeId: String!, input: EmployeeArrivedToShiftInput, shiftId: String!): ShiftJournalPayload!
  "Проставление отметки убыл со смены"
  employeesDepartedFromShift(employeeId: String!, input: EmployeeDepartedFromShiftInput, shiftId: String!): ShiftJournalPayload!
  endOperation(id: ID!, input: OperationEndInput!): Operation!
  generateDownloadLinkForFileRecord(fileRecordId: String!): FileRecord!
  leaveResourceLocation(id: ID!, input: LeaveResourceLocationInput!): LeaveResourceLocationPayload!
  linkResourceToErpResource(id: ID!, link: ResourceItemInput!): ErpResource!
  preparedFileRecord: FileRecord!
  reloadBusinessRuleProvidingBusinessRules: Boolean!
  reloadBusinessRuleProvidingConditions: Boolean!
  reloadConditionGroupJsonConditions: Boolean!
  reloadFlightServiceManualJsonConditions: Boolean! @deprecated(reason: "Refresh instructions model")
  reloadOperationGroupResourceSpecificationJsonConditions: Boolean!
  reloadOperationGroupResourceSpecificationJsonRequirements: Boolean!
  reloadOperationResourceSpecificationCommonJsonConditions: Boolean!
  reloadOperationResourceSpecificationCommonJsonRequirements: Boolean!
  reloadOperationResourceSpecificationJsonConditions: Boolean!
  reloadOperationResourceSpecificationJsonRequirements: Boolean!
  reloadOperationSpecificationNormJsonConditions: Boolean!
  reloadOperationSpecificationTimeCalculationRuleJsonConditions: Boolean!
  reloadServiceObjectSlaConditions: Boolean!
  reloadServiceStandardProvidingJsonConditions: Boolean!
  reloadTaskTransferNormJsonConditions: Boolean!
  removeAodbMilestoneFromOperationSpecification(id: ID!, input: OperationAodbMilestoneAssociationInput!): OperationSpecification!
  removeAvailableServiceStandardsFromEmployee(employeeId: ID!, serviceStandardIds: [ID!]!): Employee!
  "Удалить привязку бизнес-роли к сотруднику"
  removeBusinessRoleFromEmployee(businessRoleId: ID!, employeeId: ID!): Employee! @deprecated(reason: "Deprecated in a favour of removeBusinessRolesFromResource")
  removeBusinessRolesFromOperationResourceSpecification(businessRoleIds: [ID!]!, id: ID!): OperationResourceSpecification!
  removeBusinessRolesFromResource(businessRoleIds: [ID!]!, resourceId: ID!): ResourceItem!
  removeBusinessRuleFromBusinessRuleProviding(businessRuleId: ID!, id: ID!): BusinessRuleProviding!
  removeChildFromServiceStandard(childId: ID!, serviceStandardId: ID!): ServiceStandard!
  removeCommentFromFlight(commentId: ID!, flightId: ID!): Flight!
  removeCommentFromOperation(commentId: ID!, operationId: ID!): Operation!
  removeConditionFromBusinessRuleProviding(conditionId: ID!, id: ID!): BusinessRuleProviding!
  removeConditionFromConditionGroup(conditionId: ID!, id: ID!): ConditionGroup!
  removeConditionFromFlightServiceManual(conditionId: ID!, id: ID!): FlightServiceManual! @deprecated(reason: "Refresh instructions model")
  removeConditionFromOperationGroupResourceSpecification(conditionId: ID!, id: ID!): OperationGroupResourceSpecification!
  removeConditionFromOperationResourceSpecification(conditionId: ID!, id: ID!): OperationResourceSpecification!
  removeConditionFromOperationResourceSpecificationCommon(conditionId: ID!, id: ID!): OperationResourceSpecificationCommon!
  removeConditionFromOperationSpecificationNorm(conditionId: ID!, id: ID!): OperationSpecificationNorm!
  removeConditionFromOperationSpecificationTimeCalculationRule(conditionId: ID!, id: ID!): OperationSpecificationTimeCalculationRule!
  removeConditionFromRouteSpecificationProviding(conditionId: ID!, id: ID!): RouteSpecificationProviding!
  removeConditionFromServiceObjectSla(conditionId: ID!, id: ID!): ServiceObjectSla!
  removeConditionFromServiceStandardProviding(conditionId: ID!, id: ID!): ServiceStandardProviding!
  removeConditionFromTaskTransferNorm(conditionId: ID!, id: ID!): TaskTransferNorm!
  removeConditionGroupsFromBusinessRuleProviding(conditionGroupIds: [ID!]!, id: ID!): BusinessRuleProviding!
  removeConditionGroupsFromFlightServiceManual(conditionGroupIds: [ID!]!, id: ID!): FlightServiceManual! @deprecated(reason: "Refresh instructions model")
  removeConditionGroupsFromOperationGroupResourceSpecification(conditionGroupIds: [ID!]!, id: ID!): OperationGroupResourceSpecification!
  removeConditionGroupsFromOperationResourceSpecification(conditionGroupIds: [ID!]!, id: ID!): OperationResourceSpecification!
  removeConditionGroupsFromOperationResourceSpecificationCommon(conditionGroupIds: [ID!]!, id: ID!): OperationResourceSpecificationCommon!
  removeConditionGroupsFromOperationSpecificationNorm(conditionGroupIds: [ID!]!, id: ID!): OperationSpecificationNorm!
  removeConditionGroupsFromOperationSpecificationTimeCalculationRule(conditionGroupIds: [ID!]!, id: ID!): OperationSpecificationTimeCalculationRule!
  removeConditionGroupsFromRouteSpecificationProviding(conditionGroupIds: [ID!]!, id: ID!): RouteSpecificationProviding!
  removeConditionGroupsFromServiceObjectSla(conditionGroupIds: [ID!]!, id: ID!): ServiceObjectSla!
  removeConditionGroupsFromServiceStandardProviding(conditionGroupIds: [ID!]!, id: ID!): ServiceStandardProviding!
  removeConditionGroupsFromTaskTransferNorm(conditionGroupIds: [ID!]!, id: ID!): TaskTransferNorm!
  removeConsumableResourceTypeFromServiceStandard(consumableResourceTypeId: ID!, serviceStandardId: ID!): Boolean! @deprecated(reason: "Will be removed")
  removeEmailFromAirline(id: ID!, input: String!): Boolean
  removeEmployeeFromShift(employeeId: [ID!]!, shiftId: ID!): Shift!
  removeEmployeesFromShiftManual(employeeIds: [ID!]!, shiftId: ID!): RemoveEmployeeFromShiftManualPayload!
  removeExtendedParamsFromServiceStandard(extendedParamIds: [ID!]!, serviceStandardId: ID!): ServiceStandard!
  removeItemsFromServiceBasket(id: ID!, itemIds: [ID!]!): ServiceBasket!
  removeOperationFromTask(operationId: ID!, taskId: ID!): Task!
  removeOperationResourceSlotFromOperation(operationId: ID!, operationResourceSlotId: ID!): Boolean!
  removeOperationResourceSlotFromTask(operationResourceSlotId: ID!, taskId: ID!): Boolean!
  removeOperationTimeFromFlight(flightId: ID!, qualifier: String!, type: String!): Flight!
  "Удаление пассажира"
  removePassengerFromFlight(flightId: ID!, passengerId: ID!): Flight!
  "Удаление нескольких пассажиров. Возвращается актуальная коллекция пассажиров"
  removePassengersFromFlight(flightId: ID!, passengerIds: [ID!]!): Flight!
  removeRequirementFromOperationResourceSpecificationCommon(id: ID!, requirementId: ID!): OperationResourceSpecificationCommon!
  removeResourceFromResourceGroup(resourceGroupId: ID!, resourceId: ID!): ResourceGroup!
  removeResourceRequirementFromOperationGroupResourceSpecification(id: ID!, requirementId: ID!): OperationGroupResourceSpecification!
  removeResourceRequirementFromOperationResourceSpecification(id: ID!, requirementId: ID!): OperationResourceSpecification!
  removeResourceTypesFromBusinessRole(id: ID!, resourceTypes: [ResourceType!]!): BusinessRole!
  removeRouteSpecificationProvidingFromOperationSpecification(id: ID!, routeSpecificationProvidingId: ID!): OperationSpecification!
  removeServiceStandardFromRole(roleId: ID!, serviceStandardId: ID!): Role
  removeSubdivisionsFromOperationResourceSpecification(id: ID!, subdivisionIds: [ID!]!): OperationResourceSpecification!
  removeUnavailabilityPeriodsFromResource(periodIds: [ID!]!, resourceId: ID!): ResourceItem!
  saveOrUpdateErpResourceUnavailablePeriods(id: ID!, input: [ErpResourceUnavailabilityPeriodSaveInput!]!): ErpResource!
  sendInvoiceEmailRequest(invoiceEmailInput: InvoiceEmailInput!): InvoiceEmailRequest!
  setAvailableBusinessRolesToEmployee(businessRoleIds: [ID!]!, employeeId: ID!): Employee!
  setBusinessRolesToPatternComment(businessRoleIds: [ID!]!, patternCommentId: ID!): PatternComment!
  setConditionGroupsToOperationSpecificationTimeCalculationRule(conditionGroupIds: [ID!]!, id: ID!): OperationSpecificationTimeCalculationRule!
  setConsumableResourceTypesToServiceStandard(consumableResourceTypeIds: [ID!]!, serviceStandardId: ID!): ServiceStandard!
  setCurrentUserOnlineStatus(onlineStatus: OnlineStatus! = ONLINE): Boolean!
  setIconToResourceTypeSpec(input: FileUploadInput, resourceType: ResourceType!): SetIconToResourceTypeSpecPayload!
  setPositionsToSubdivision(positionIds: [ID!]!, subdivisionId: ID!): Subdivision!
  setPropertyValue(id: ID!, intValue: Int, stringValue: String): Property!
  setResourceLocation(input: SetResourceLocationInput!): SetResourceLocationPayload!
  setShiftFilterProfileToCurrentUser(shiftFilterProfileId: ID): User!
  setSkillsToEmployee(employeeId: ID!, input: [EmployeeSkillInput!]!): Employee!
  setSubdivisionsToPosition(positionId: ID!, subdivisionIds: [ID!]!): Position!
  setTaskFilterProfileToCurrentUser(taskFilterProfileId: ID): User!
  setTechnicalResourceOnlineStatus(mobileIdent: String!, onlineStatus: OnlineStatus! = ONLINE): Boolean!
  signInvoice(fileLink: String!, invoiceId: String!): Invoice!
  startOperation(id: ID!, input: OperationStartInput!): Operation!
  "Удаление ресурса из задачи"
  unassignResourceFromTask(id: ID!): Task!
  unassignResourceFromTaskManual(id: ID!): UnassignResourceFromTaskManualPayload!
  updateAirBridge(id: ID!, input: AirBridgeUpdateInput): AirBridge
  updateAirConditioner(id: ID!, input: AirConditionerUpdateInput): AirConditioner
  updateAirStartDevice(id: ID!, input: AirStartDeviceUpdateInput): AirStartDevice
  updateAircraft(id: ID!, input: AircraftUpdateInput): Aircraft!
  updateAircraftTug(id: ID!, input: AircraftTugUpdateInput): AircraftTug
  updateAircraftType(id: ID!, input: AircraftTypeUpdateInput): AircraftType!
  updateAirline(id: ID!, input: AirlineUpdateInput): Airline!
  updateAirport(id: ID!, input: AirportUpdateInput): Airport!
  updateAmbulift(id: ID!, input: AmbuliftUpdateInput): Ambulift
  updateAodbMilestone(id: ID!, input: AodbMilestoneUpdateInput!): AodbMilestone!
  updateBaggageTractor(id: ID!, input: BaggageTractorUpdateInput): BaggageTractor
  updateBelt(id: ID!, input: BeltUpdateInput!): Belt!
  updateBeltLoader(id: ID!, input: BeltLoaderUpdateInput): BeltLoader
  updateBusinessRole(id: ID!, input: BusinessRoleUpdateInput): BusinessRole!
  updateBusinessRolesInResource(businessRoleIds: [ID!]!, resourceId: ID!): UpdateBusinessRoleInResourcePayload!
  updateBusinessRuleProviding(id: ID!, input: BusinessRuleProvidingUpdateInput!): BusinessRuleProviding!
  updateBusinessRuleProvidingBusinessRule(businessRuleId: ID!, businessRuleInput: BusinessRuleInput!, id: ID!): BusinessRuleProviding!
  updateBusinessRuleProvidingCondition(conditionId: ID!, conditionInput: ConditionInput!, id: ID!): BusinessRuleProviding!
  updateCar(id: ID!, input: CarUpdateInput): Car
  updateCheckInCounter(id: ID!, input: CheckInCounterUpdateInput!): CheckInCounter!
  updateCity(id: ID!, input: CityUpdateInput!): City!
  updateComment(id: ID!, input: CommentUpdateInput): Comment!
  updateComplexResourceAutomatic(id: ID!, input: ComplexResourceAutomaticUpdateInput!): ComplexResource!
  updateConditionGroup(id: ID!, input: ConditionGroupUpdateInput!): ConditionGroupUpdatePayload!
  updateConditionInConditionGroup(conditionId: ID!, conditionInput: ConditionInput!, id: ID!): ConditionGroup!
  updateConsumableResource(id: ID!, input: ConsumableResourceUpdateInput!): ConsumableResource!
  updateConsumableResourceType(id: ID!, input: ConsumableResourceTypeUpdateInput): ConsumableResourceType!
  updateContainerLoader(id: ID!, input: ContainerLoaderUpdateInput): ContainerLoader
  updateContract(id: ID!, input: ContractUpdateInput): Contract
  updateCountry(id: ID!, input: CountryUpdateInput!): Country!
  updateDecisionTree(id: ID!, input: DecisionTreeUpdateInput): DecisionTree
  updateDeicingCar(id: ID!, input: DeicingCarUpdateInput): DeicingCar
  updateDelayCode(id: ID!, input: DelayCodeUpdateInput!): DelayCode!
  updateEmployee(id: ID!, input: EmployeeUpdateInput): Employee
  updateEmployeeGroup(id: ID!, input: EmployeeGroupUpdateInput!): EmployeeGroupUpdatePayload!
  updateErpResource(id: ID!, input: ErpResourceUpdateInput!): ErpResource!
  updateExtinguisher(id: ID!, input: ExtinguisherUpdateInput): Extinguisher
  updateFlight(id: ID!, input: FlightUpdateInput!): Flight!
  updateFlightBillingStatus(flightId: ID!, status: FlightBillingStatus): Boolean!
  updateFlightParkingSpotReadyStatus(flightId: ID!, status: Boolean): Boolean!
  "Обновление пассажира. Возвращается обновлённый пассажир"
  updateFlightPassenger(flightId: ID!, input: FlightPassengerAdditionalUpdateInput!, passengerId: ID!): Flight!
  updateFlightServiceManual(id: ID!, input: FlightServiceManualUpdateInput!): FlightServiceManual!
  updateFlightServiceManualCondition(conditionId: ID!, conditionInput: ConditionInput!, id: ID!): FlightServiceManual! @deprecated(reason: "Refresh instructions model")
  updateFlightServiceType(id: ID!, input: FlightServiceTypeUpdateInput!): FlightServiceType!
  updateFollowMeCar(id: ID!, input: FollowMeCarUpdateInput!): FollowMeCar! @deprecated(reason: "No longer supported")
  updateGPU(id: ID!, input: GPUUpdateInput): GPU
  updateGasRefueller(id: ID!, input: GasRefuellerUpdateInput): GasRefueller
  updateGate(id: ID!, input: GateUpdateInput!): Gate!
  updateHeater(id: ID!, input: HeaterUpdateInput): Heater
  updateHeaterCar(id: ID!, input: HeaterCarUpdateInput): HeaterCar
  updateInvoice(invoiceId: ID!, updateInvoiceInput: InvoiceUpdateInput!): Invoice!
  updateLocation(id: ID!, input: LocationUpdateInput!): Location!
  updateMathDictionary(id: ID!, input: MathDictionaryUpdateInput): MathDictionary
  updateOperation(id: ID!, input: OperationUpdateInput!): Operation!
  updateOperationGroupResourceSpecification(id: ID!, input: OperationGroupResourceSpecificationUpdateInput): OperationGroupResourceSpecification!
  updateOperationGroupResourceSpecificationCondition(conditionId: ID!, conditionInput: ConditionInput!, id: ID!): OperationGroupResourceSpecification!
  updateOperationGroupResourceSpecificationRequirement(id: ID!, requirementId: ID!, requirementInput: ConditionInput!): OperationGroupResourceSpecification!
  updateOperationResourceSlot(id: ID!, input: OperationResourceSlotUpdateInput!): OperationResourceSlot @deprecated(reason: "No longer supported")
  updateOperationResourceSpecification(id: ID!, input: OperationResourceSpecificationUpdateInput!): OperationResourceSpecification!
  updateOperationResourceSpecificationCommon(id: ID!, input: OperationResourceSpecificationCommonUpdateInput!): OperationResourceSpecificationCommon!
  updateOperationResourceSpecificationCommonCondition(conditionId: ID!, conditionInput: ConditionInput!, id: ID!): OperationResourceSpecificationCommon!
  updateOperationResourceSpecificationCommonRequirement(id: ID!, requirementId: ID!, requirementInput: ConditionInput!): OperationResourceSpecificationCommon!
  updateOperationResourceSpecificationCondition(conditionId: ID!, conditionInput: ConditionInput!, id: ID!): OperationResourceSpecification!
  updateOperationResourceSpecificationRequirement(id: ID!, requirementId: ID!, requirementInput: ConditionInput!): OperationResourceSpecification!
  updateOperationSpecification(id: ID!, input: OperationSpecificationUpdateInput): OperationSpecification
  updateOperationSpecificationGroup(id: ID!, input: OperationSpecificationGroupUpdateInput!): OperationSpecificationGroup!
  updateOperationSpecificationNorm(id: ID!, input: OperationSpecificationNormUpdateInput): OperationSpecificationNorm!
  updateOperationSpecificationNormCondition(conditionId: ID!, conditionInput: ConditionInput!, id: ID!): OperationSpecificationNorm!
  updateOperationSpecificationTimeCalculationRule(id: ID!, input: OperationSpecificationTimeCalculationRuleUpdateInput): OperationSpecificationTimeCalculationRule!
  updateOperationSpecificationTimeCalculationRuleCondition(conditionId: ID!, conditionInput: ConditionInput!, id: ID!): OperationSpecificationTimeCalculationRule!
  updateParkingSpot(id: ID!, input: ParkingSpotUpdateInput): ParkingSpot!
  updatePatternComment(id: ID!, input: PatternCommentUpdateInput): PatternComment!
  updatePaxBus(id: ID!, input: PaxBusUpdateInput): PaxBus
  updatePaxStairs(id: ID!, input: PaxStairsUpdateInput): PaxStairs
  updatePaymentMethod(flightId: ID!, paymentMethod: String!): Boolean!
  updatePosition(id: ID!, input: PositionUpdateInput!): Position!
  updateReasonCancellationTask(id: ID!, input: ReasonCancellationTaskUpdateInput!): ReasonCancellationTask!
  updateResourceGroup(id: ID!, input: ResourceGroupUpdateInput!): ResourceGroup!
  updateResourceGroupValidityPeriod(id: ID!, input: ResourceGroupValidityPeriodUpdateInput!): ResourceGroupValidityPeriod!
  updateRole(id: ID!, input: RoleUpdateInput): Role
  updateRouteSpecificationProvidingCondition(conditionId: ID!, conditionInput: ConditionInput!, id: ID!): RouteSpecificationProviding!
  updateService(id: ID!, input: ServiceUpdateInput): Service!
  updateServiceBasket(id: ID!, input: ServiceBasketUpdateInput!): ServiceBasket!
  updateServiceBasketMath(id: ID!, input: ServiceBasketUpdateInput!): ServiceBasket!
  updateServiceConsumableResourceValue(consumableResourceTypeId: ID!, input: ConsumableResourceValueInput!, serviceId: ID!): Boolean!
  updateServiceExtendedParamValue(extendedParamId: ID!, input: ExtendedParamValueInput!, serviceId: ID!): Service!
  updateServiceObjectSla(id: ID!, input: ServiceObjectSlaUpdateInput!): ServiceObjectSla!
  updateServiceObjectSlaCondition(conditionId: ID!, conditionInput: ConditionInput!, id: ID!): ServiceObjectSla!
  updateServiceOffer(id: ID!, input: ServiceOfferUpdateInput): ServiceOffer
  updateServiceStandard(id: ID!, input: ServiceStandardUpdateInput): ServiceStandard
  updateServiceStandardProviding(id: ID!, input: ServiceStandardProvidingUpdateInput!): ServiceStandardProviding!
  updateServiceStandardProvidingCondition(conditionId: ID!, conditionInput: ConditionInput!, id: ID!): ServiceStandardProviding!
  updateShift(id: ID!, input: ShiftUpdateInput!): Shift!
  updateShiftFilterProfile(id: ID!, input: ShiftFilterProfileUpdateInput!): ShiftFilterProfileUpdatePayload!
  updateShiftFilterProfileRule(id: ID!, input: ShiftFilterProfileRuleUpdateInput!): ShiftFilterProfileRuleUpdatePayload!
  updateSkillSpecification(id: ID!, input: SkillSpecificationUpdateInput!): SkillSpecification!
  updateSpecialEmphasis(id: ID!, input: SpecialEmphasisUpdateInput!): SpecialEmphasis!
  updateStepladder(id: ID!, input: StepladderUpdateInput): Stepladder
  updateSubdivision(id: ID!, input: SubdivisionUpdateInput): Subdivision!
  updateTask(id: ID!, input: TaskUpdateInput): Task!
  updateTaskFilterProfile(id: ID!, input: TaskFilterProfileUpdateInput!): TaskFilterProfileUpdatePayload!
  updateTaskFilterProfileRule(id: ID!, input: TaskFilterProfileRuleUpdateInput!): TaskFilterProfileRuleUpdatePayload!
  updateTaskPlaceExecutionTime(event: TaskPlaceExecutionType, id: ID!): Task!
  updateTaskPublicationTimeDirectory(id: ID!, input: TaskPublicationTimeDirectoryUpdateInput!): TaskPublicationTimeDirectory!
  updateTaskTransferNorm(id: ID!, input: TaskTransferNormUpdateInput!): TaskTransferNorm!
  updateTaskTransferNormCondition(conditionId: ID!, conditionInput: ConditionInput!, id: ID!): TaskTransferNorm!
  updateTowbar(id: ID!, input: TowbarUpdateInput): Towbar
  updateTowbarAdapter(id: ID!, input: TowbarAdapterUpdateInput): TowbarAdapter
  updateUnavailabilityPeriodInResource(input: ResourceUnavailabilityPeriodUpdateInput!, periodId: ID!, resourceId: ID!): ResourceItem!
  updateUnit(id: ID!, input: UnitUpdateInput!): Unit!
  updateVacuumCleaner(id: ID!, input: VacuumCleanerUpdateInput): VacuumCleaner
  updateVacuumSweeper(id: ID!, input: VacuumSweeperUpdateInput): VacuumSweeper
  updateVipServiceCar(id: ID!, input: VipServiceCarUpdateInput): VipServiceCar @deprecated(reason: "No longer supported")
  updateWasteDisposalMachine(id: ID!, input: WasteDisposalMachineUpdateInput): WasteDisposalMachine
  updateWaterCar(id: ID!, input: WaterCarUpdateInput): WaterCar
  updateWaybill(id: ID!, input: WaybillUpdateInput!): Waybill!
  uploadFileByFileRecord(fileUploadInput: FileUploadInput!): FileRecord!
}

type ObjectComparisonCondition implements ICondition {
  createdAt: DateTime!
  id: ID!
  object: ObjectPropertyReference!
  operator: ObjectComparisonOperator!
  type: ConditionType!
  updatedAt: DateTime!
  value: ObjectPropertyReference!
}

type ObjectLocationItem {
  object: ObjectLocation
  type: ObjectLocationType!
}

"Ссылка на свойство составного объекта, например Flight.aircraft.aircraftType.iataCode"
type ObjectPropertyReference {
  "Тип или имя объекта (например 'Flight')"
  objectName: ObjectName!
  "Путь к свойству объекта (например 'aircraft.aircraftType.iataCode')"
  propertyName: String!
  "Тип свойства объекта"
  propertyType: ObjectPropertyType!
}

"Операция"
type Operation {
  actualEnd: DateTime
  actualStart: DateTime
  comment: [Comment]
  id: ID!
  operationResourceSlots(filter: OperationResourceSlotFilter): [OperationResourceSlot]!
  operationSpecification: OperationSpecification!
  route: Route
  scheduledEnd: DateTime!
  scheduledStart: DateTime!
  service: Service!
  serviceObject: ServiceObjectItem!
  serviceObjectDetails: ServiceObjectDetails
  status: OperationStatus!
}

type OperationAodbMilestoneAssociation {
  aodbMilestone: AodbMilestone!
  eventType: OperationAodbMilestoneAssociationEventType!
  timeType: TimeType!
}

type OperationGroupResourceSpecification {
  conditionGroups: [ConditionGroup!]!
  conditions: [Condition!]!
  id: ID!
  operationSpecificationGroup: OperationSpecificationGroup!
  resourceQuantityFormula: String!
  "условие по типу ресурса (Resource.resourceType) всегда будет в resourceRequirements"
  resourceRequirements: [Condition!]!
  resourceType: ResourceType!
}

type OperationGroupResourceSpecificationInfo {
  conditions: [ConditionInfo!]!
  resourceRequirements: ResourceRequirementsInfo!
}

"""

Слот под ресурс
Содержит условия выбора ресурсов (Condition)
"""
type OperationResourceSlot {
  actualArrivalToPlaceExecution: DateTime @deprecated(reason: "Will be removed. Added to Task")
  actualDepartureToPlaceExecution: DateTime @deprecated(reason: "Will be removed. Added to Task")
  createType: OperationResourceSlotCreateType!
  id: ID!
  operationResourceRequirements: [Condition!]!
  resourceType: ResourceType!
  scheduledArrivalToPlaceExecution: DateTime @deprecated(reason: "Will be removed. Added to Task")
  scheduledDepartureToPlaceExecution: DateTime @deprecated(reason: "Will be removed. Added to Task")
  "Статус слота"
  status: OperationResourceSlotStatus!
  task: Task
}

type OperationResourceSpecification {
  businessRoles: [BusinessRole!]!
  codeRms: String!
  conditionGroups: [ConditionGroup!]!
  conditions: [Condition!]!
  id: ID!
  operationSpecification: OperationSpecification!
  resourceQuantityFormula: String!
  resourceRequirements: [Condition!]!
  resourceType: ResourceType!
  subdivisions: [Subdivision!]!
}

type OperationResourceSpecificationCommon {
  codeRms: String!
  conditionGroups: [ConditionGroup!]!
  conditions: [Condition!]!
  id: ID!
  operationSpecification: OperationSpecification!
  resourceRequirements: [Condition!]!
  resourceType: ResourceType!
}

type OperationResourceSpecificationInfo {
  conditions: [ConditionInfo!]!
  resourceRequirements: ResourceRequirementsInfo!
}

"Спецификация операции"
type OperationSpecification implements ISoftDelete {
  aodbMilestoneAssociations: [OperationAodbMilestoneAssociation!]!
  arrivalPlaceExecutionTimeRequired: Boolean!
  businessRole: BusinessRole
  codeRms: String!
  createCopies: Boolean!
  deletedAt: DateTime
  departurePlaceExecutionTimeRequired: Boolean!
  description: String
  id: ID!
  name: String!
  operationSpecificationGroup: OperationSpecificationGroup
  routeSpecificationProvidings(filter: RouteSpecificationProvidingFilter, sort: [RouteSpecificationProvidingSort!]): [RouteSpecificationProviding!]!
  serviceStandard: ServiceStandard!
  startAndFinishOperationTimeRequired: Boolean!
  subdivision: Subdivision
  useComplexResource: Boolean!
  useSla: Boolean!
}

"Группа спецификаций операций"
type OperationSpecificationGroup {
  groupingType: OperationSpecificationGroupingType!
  id: ID!
  name: String!
  operationSpecifications: [OperationSpecification!]!
  serviceObjectType: ServiceObjectType!
}

"Норматив выполнения операций - условие спецификации операции, что-то типа справочника"
type OperationSpecificationNorm {
  codeRms: String!
  conditionGroups: [ConditionGroup!]!
  conditions: [Condition!]!
  id: ID!
  "Значение норматива (пока что всегда в секундах)"
  norm: Int!
  "Тип норматива (пока что всегда TimeInSeconds)"
  normUnit: NormUnit!
  operationSpecification: OperationSpecification!
}

type OperationSpecificationNormInfo {
  conditions: [ConditionInfo!]!
}

"""

Правило вычисления начала и конца спецификации операции
также говорит о том, какой порядок следования спецификаций операций

associatedOperationSpecification - либо следующая, либо предыдущая операция
"""
type OperationSpecificationTimeCalculationRule {
  associatedOperationSpecificationRules: [AssociatedOperationSpecificationRule!]!
  "заблокировано операцией"
  blockedByOperationSpecification: OperationSpecification
  codeRms: String!
  conditionGroups: [ConditionGroup!]!
  conditions: [Condition!]!
  id: ID!
  name: String
  operationSpecification: OperationSpecification!
  """

  формула (отталкивается от контрольных точек в рейсе)
  examples:
  plannedMoment = Flight.scheduledDepartureDatetime + 600 sec
  plannedMoment = Operation.associated.plannedEndMoment + 120 sec
  """
  plannedMoment: String!
  "Тип отсчета времени начала/конца операции"
  plannedMomentType: PlannedMomentType!
  "сдвиг начала/окончания операции в секундах"
  timeOffset: Int
}

type OperationSpecificationTimeCalculationRuleInfo {
  conditions: [ConditionInfo!]!
  conditionsInGroupsInfo: [ConditionInfo!]!
}

type OptionalDateTimePeriod {
  from: DateTime
  to: DateTime
}

type PageInfo {
  totalElements: Long!
  totalPages: Int!
}

type PairResourceTypeNotMatchPairResourceTypeInSourceTask implements UserError {
  message(localeSpecification: LocaleSpecificationInput): String!
  pairResourceTypeInTask: ResourceType!
  path: [String!]
}

type PairTaskDetails {
  complexResource: ComplexResource
  resourceType: ResourceType!
}

"Место стоянки"
type ParkingSpot implements IAodbMasterData & ISoftDelete {
  aodbInternalId: String!
  deletedAt: DateTime
  "Идентификатор"
  id: ID!
  lastUpdateDateTime: DateTime!
  "Номер"
  number: String
  "Перрон"
  platform: String
  "Тип"
  type: ParkingSpotType
}

type PatternComment {
  businessRoles: [BusinessRole!]!
  id: ID!
  text: String!
}

type PaxBus implements IResource & IResourceNumberType & ISoftDelete & ITechnicalResource & Mobility {
  businessRoleNames: [String!]!
  businessRoles: [BusinessRole!]!
  carriageOfEmployees: Boolean!
  carriageOfPassengers: Boolean!
  deletedAt: DateTime
  empLifeCycleDependency: Boolean!
  erpResourceId: String @deprecated(reason: "Deprecated in a favour of ErpResource.resource")
  exitAdmittance: Boolean!
  id: ID!
  isPartOfComplexResource: Boolean!
  malfunction: Boolean!
  mobileIdent: String
  mobilityType: MobilityType!
  onlineStatus: OnlineStatus!
  passengerCapacity: Int!
  productionSiteName: String
  resourceGroup: ResourceGroup @deprecated(reason: "No longer supported")
  resourceGroupValidityPeriods(filter: ResourceGroupValidityPeriodFilter): [ResourceGroupValidityPeriod!]!
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivision: Subdivision!
  subdivisionId: String! @deprecated(reason: "Will be removed. Use field subdivison")
  supportedAircraftTypes: [String]! @deprecated(reason: "No longer supported")
  unavailability(filter: ResourceUnavailabilityFilter): [ResourceUnavailabilityPeriod!]!
  waybills(filter: WaybillFilter): [Waybill!]!
}

type PaxStairs implements IResource & IResourceNumberType & ISoftDelete & ITechnicalResource & Mobility {
  businessRoleNames: [String!]!
  businessRoles: [BusinessRole!]!
  controlMethod: String!
  deletedAt: DateTime
  empLifeCycleDependency: Boolean!
  erpResourceId: String @deprecated(reason: "Deprecated in a favour of ErpResource.resource")
  id: ID!
  isPartOfComplexResource: Boolean!
  malfunction: Boolean!
  mobileIdent: String
  mobilityType: MobilityType!
  onlineStatus: OnlineStatus!
  passengerDeckHeight: Int
  productionSiteName: String
  resourceGroup: ResourceGroup @deprecated(reason: "No longer supported")
  resourceGroupValidityPeriods(filter: ResourceGroupValidityPeriodFilter): [ResourceGroupValidityPeriod!]!
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivision: Subdivision!
  subdivisionId: String! @deprecated(reason: "Will be removed. Use field subdivison")
  supportedAircraftTypes: [String]!
  unavailability(filter: ResourceUnavailabilityFilter): [ResourceUnavailabilityPeriod!]!
  waybills(filter: WaybillFilter): [Waybill!]!
}

type PerformerNotInComplexResourceError implements UserError {
  complexResource: ComplexResource!
  message(localeSpecification: LocaleSpecificationInput): String!
  path: [String!]
  performer: ResourceItem!
}

"Должность"
type Position implements ISoftDelete {
  "Код должности"
  code: String!
  deletedAt: DateTime
  "Идентификатор"
  id: ID!
  "Интеграционный id"
  integrationId: String!
  "Наименование"
  name: String
  "Подразделение"
  subdivision: Subdivision @deprecated(reason: "Changed relation to ManyToMany, field will be removed")
  subdivisions(filter: SubdivisionFilter): [Subdivision!]!
  "Уникальный код должности"
  uniqueCode: String! @deprecated(reason: "Added to Employee, field will be removed")
  validityPeriod: OptionalDateTimePeriod!
}

type Property {
  asInt: Int
  asString: String
  id: ID!
}

type Query {
  GPU(id: ID!): GPU
  GPUs: [GPU]!
  _service: _Service!
  airBridge(id: ID!): AirBridge
  airBridges: [AirBridge]!
  airConditioner(id: ID!): AirConditioner
  airConditioners: [AirConditioner]!
  airStartDevice(id: ID!): AirStartDevice
  airStartDevices: [AirStartDevice]!
  aircraft(id: ID!): Aircraft
  aircraftTug(id: ID!): AircraftTug
  aircraftTugs: [AircraftTug]!
  aircraftType(id: ID!): AircraftType!
  aircraftTypeByIataCode(iataCode: String!): AircraftType @deprecated(reason: "No longer supported")
  aircraftTypeOnlyActual(actualDate: DateTime!, aodbInternalId: String!): AircraftType @deprecated(reason: "No longer supported")
  aircraftTypes(filter: AircraftTypeFilter): [AircraftType!]!
  aircraftTypesOnlyActual(actualDate: DateTime!, filter: AircraftTypeFilter): [AircraftType]! @deprecated(reason: "No longer supported")
  aircraftTypesWithValidPeriods(aodbInternalId: String!): [AircraftType]! @deprecated(reason: "No longer supported")
  aircrafts(filter: AircraftFilter): [Aircraft!]!
  airline(id: ID!): Airline!
  airlineByIataCode(iataCode: String!): Airline @deprecated(reason: "No longer supported")
  airlineOnlyActual(actualDate: DateTime!, aodbInternalId: String!): Airline @deprecated(reason: "No longer supported")
  airlines(filter: AirlineFilter): [Airline!]!
  airlinesOnlyActual(actualDate: DateTime!, filter: AirlineFilter): [Airline]! @deprecated(reason: "No longer supported")
  airlinesWithValidPeriods(aodbInternalId: String!): [Airline]! @deprecated(reason: "No longer supported")
  airport(id: ID!): Airport!
  airportOnlyActual(actualDate: DateTime!, aodbInternalId: String!): Airport @deprecated(reason: "No longer supported")
  airports(filter: AirportFilter): [Airport!]!
  airportsOnlyActual(actualDate: DateTime!, filter: AirportFilter): [Airport]! @deprecated(reason: "No longer supported")
  airportsWithValidPeriods(aodbInternalId: String!): [Airport]! @deprecated(reason: "No longer supported")
  allResourceTypes: [ResourceTypeSpec!]!
  ambulift(id: ID!): Ambulift
  ambulifts: [Ambulift]!
  aodbAllocationTypes(code: String, resourceTypeCode: String): [AodbAllocationType]! @deprecated(reason: "No longer supported")
  aodbAllocations(allocationTypeCode: String, beginActual: DateTime, beginPlan: DateTime, endActual: DateTime, endPlan: DateTime, id: ID, queryFrom: DateTime, queryTo: DateTime, resourceCode: String): [AodbAllocation]! @deprecated(reason: "No longer supported")
  aodbArrivals(eta: String, flightNumber: String, id: String): [AodbArrival]! @deprecated(reason: "No longer supported")
  aodbDepartures(etd: String, flightNumber: String, id: String): [AodbDeparture]! @deprecated(reason: "No longer supported")
  aodbMilestone(id: ID!): AodbMilestone!
  aodbMilestones: [AodbMilestone!]!
  aodbResourceTypes(code: String): [AodbResourceType]! @deprecated(reason: "No longer supported")
  aodbResources(code: String, id: String, resourceTypeCode: String): [AodbResource]! @deprecated(reason: "No longer supported")
  applicationParameters: ApplicationParameters!
  baggageTractor(id: ID!): BaggageTractor
  baggageTractors: [BaggageTractor]!
  belt(id: ID!): Belt
  beltLoader(id: ID!): BeltLoader
  beltLoaders: [BeltLoader]!
  belts(filter: BeltFilter): [Belt!]!
  businessRole(id: ID!): BusinessRole!
  businessRoles(filter: BusinessRoleFilter, sort: [BusinessRoleSort!]): [BusinessRole!]!
  businessRuleProviding(id: ID!): BusinessRuleProviding!
  businessRuleProvidings(filter: BusinessRuleProvidingFilter, sort: [BusinessRuleProvidingSort!]): [BusinessRuleProviding!]!
  car(id: ID!): Car
  cars: [Car]!
  checkInCounter(id: ID!): CheckInCounter
  checkInCounters(filter: CheckInCounterFilter): [CheckInCounter!]!
  cities(filter: CityFilter): [City!]!
  city(id: ID!): City!
  comment(id: ID!): Comment @deprecated(reason: "No longer supported")
  comments(filter: CommentFilter): [Comment]! @deprecated(reason: "No longer supported")
  complexResource(id: ID!): ComplexResource!
  complexResources(filter: ComplexResourceFilter): [ComplexResource!]!
  condition(id: ID!): Condition
  conditionGroup(id: ID!): ConditionGroup!
  conditionGroups(filter: ConditionGroupFilter, sort: [ConditionGroupSort!]): [ConditionGroup!]!
  consumableResource(id: ID!): ConsumableResource!
  consumableResourceType(id: ID!): ConsumableResourceType!
  consumableResourceTypes(filter: ConsumableResourceTypeFilter): [ConsumableResourceType!]!
  consumableResources(filter: ConsumableResourceFilter): [ConsumableResource!]!
  containerLoader(id: ID!): ContainerLoader
  containerLoaders: [ContainerLoader]!
  contract(id: ID!): Contract
  contractByCustomer(input: ContractCustomerInput!): Contract
  contracts: [Contract]!
  countries(filter: CountryFilter): [Country!]!
  country(id: ID!): Country!
  currentUser: User
  currentUserInfo: CurrentUserInfo! @deprecated(reason: "Use query 'currentUser'")
  decisionTree(id: ID!): DecisionTree
  decisionTrees(filter: DecisionTreeFilter): [DecisionTree]!
  deicingCar(id: ID!): DeicingCar
  deicingCars: [DeicingCar]!
  delayCode(id: ID!): DelayCode
  delayCodes(filter: DelayCodeFilter): [DelayCode!]!
  employee(id: ID!): Employee
  employeeGroup(id: ID!): EmployeeGroup!
  employeeGroups(filter: EmployeeGroupFilter, sort: [EmployeeGroupSort!]): [EmployeeGroup!]!
  employees(filter: EmployeeFilter, sort: [EmployeeSort!]): [Employee]!
  "Возвращает всех сотрудников, которые работают над операциями, связанными с текущей задачей"
  employeesInBrigadeForTask(taskId: ID!): [Employee]!
  erpIdByResourceType(type: ResourceType!): String
  erpResource(id: ID!): ErpResource!
  erpResources(filter: ErpResourceFilter): [ErpResource!]!
  extinguisher(id: ID!): Extinguisher
  extinguishers: [Extinguisher]!
  fileRecord(fileRecordId: ID!): FileRecord!
  fileRecords(fileRecordFilter: FileRecordFilter!): [FileRecord!]!
  flight(id: ID!): Flight!
  flightPaymentMethod(id: ID!): FlightPaymentMethod!
  flightPaymentMethods: [FlightPaymentMethod!]!
  flightServiceManual(id: ID!): FlightServiceManual!
  flightServiceManuals(filter: FlightServiceManualFilter, sort: [FlightServiceManualSort!]): [FlightServiceManual!]!
  flightServiceType(id: ID!): FlightServiceType
  flightServiceTypes(filter: FlightServiceTypeFilter): [FlightServiceType]!
  flights(filter: FlightFilter): [Flight!]!
  followMeCar(id: ID!): FollowMeCar! @deprecated(reason: "No longer supported")
  followMeCars: [FollowMeCar!]! @deprecated(reason: "No longer supported")
  gasRefueller(id: ID!): GasRefueller
  gasRefuelleres: [GasRefueller]!
  gate(id: ID!): Gate
  gates(filter: GateFilter): [Gate!]!
  getEmployeeGroupViewsToShiftJournalFromDate(employeeId: ID!, shiftId: ID!): DateTime!
  getTaskTransferNorm(id: ID!): TaskTransferNorm!
  getTaskTransferNormList(filter: TaskTransferNormFilter, sort: [TaskTransferNormSort!]): [TaskTransferNorm!]!
  heater(id: ID!): Heater
  heaterCar(id: ID!): HeaterCar
  heaterCars: [HeaterCar]!
  heaters: [Heater]!
  invoiceByTaskId(taskId: ID!): Invoice
  invoiceEmailRequests(invoiceEmailRequestFilter: InvoiceEmailRequestFilter!): [InvoiceEmailRequest!]!
  invoices(invoiceFilter: InvoiceFilter!): [Invoice!]!
  linkedFlights(filter: LinkedFlightFilter): [LinkedFlight!]!
  localPlace(id: ID!): LocalPlace!
  localPlaces(filter: LocalPlaceFilter): [LocalPlace!]!
  location(id: ID!): Location!
  locations(filter: LocationFilter): [Location!]!
  mathDictionaries(filter: MathDictionaryFilter): [MathDictionary]!
  mathDictionary(id: ID!): MathDictionary
  operation(id: ID!): Operation
  operationGroupResourceSpecification(id: ID!): OperationGroupResourceSpecification!
  operationGroupResourceSpecificationInfo: OperationGroupResourceSpecificationInfo!
  operationGroupResourceSpecifications(filter: OperationGroupResourceSpecificationFilter, sort: [OperationGroupResourceSpecificationSort!]): [OperationGroupResourceSpecification!]!
  operationResourceSlot(id: ID!): OperationResourceSlot!
  operationResourceSlots(filter: OperationResourceSlotFilter): [OperationResourceSlot!]!
  operationResourceSpecification(id: ID!): OperationResourceSpecification!
  operationResourceSpecificationCommon(id: ID!): OperationResourceSpecificationCommon!
  operationResourceSpecificationCommons(filter: OperationResourceSpecificationCommonFilter, sort: [OperationResourceSpecificationCommonSort!]): [OperationResourceSpecificationCommon!]!
  operationResourceSpecificationInfo: OperationResourceSpecificationInfo!
  operationResourceSpecifications(filter: OperationResourceSpecificationFilter, sort: [OperationResourceSpecificationSort!]): [OperationResourceSpecification!]!
  operationSpecification(id: ID!): OperationSpecification
  operationSpecificationGroup(id: ID!): OperationSpecificationGroup
  operationSpecificationGroups(filter: OperationSpecificationGroupFilter): [OperationSpecificationGroup!]!
  operationSpecificationNorm(id: ID!): OperationSpecificationNorm!
  operationSpecificationNormInfo: OperationSpecificationNormInfo!
  operationSpecificationNorms(filter: OperationSpecificationNormFilter, sort: [OperationSpecificationNormSort!]): [OperationSpecificationNorm!]!
  operationSpecificationTimeCalculationRule(id: ID!): OperationSpecificationTimeCalculationRule!
  operationSpecificationTimeCalculationRuleInfo: OperationSpecificationTimeCalculationRuleInfo!
  operationSpecificationTimeCalculationRules(filter: OperationSpecificationTimeCalculationRuleFilter, sort: [OperationSpecificationTimeCalculationRuleSort!]): [OperationSpecificationTimeCalculationRule!]!
  operationSpecifications(filter: OperationSpecificationFilter, sort: [OperationSpecificationSort!]): [OperationSpecification]!
  operations(filter: OperationFilter): [Operation]!
  parkingSpot(id: ID!): ParkingSpot!
  parkingSpots(filter: ParkingSpotFilter): [ParkingSpot!]!
  patternComment(id: ID!): PatternComment!
  patternComments(filter: PatternCommentFilter): [PatternComment!]!
  paxBus(id: ID!): PaxBus
  paxBuss: [PaxBus]!
  paxStairs(id: ID!): PaxStairs
  paxStairss: [PaxStairs]!
  position(id: ID!): Position!
  positions(filter: PositionFilter): [Position]!
  properties: [Property!]!
  propertyAsInt(id: ID!): Int
  propertyAsString(id: ID!): String
  reasonCancellationList: [ReasonCancellationTask!]!
  resourceDeficitReport(filter: ResourceDeficitReportFilter!): ResourceDeficitReport!
  resourceGroup(id: ID!): ResourceGroup!
  resourceGroups(filter: ResourceGroupFilter): [ResourceGroup!]!
  resourceLocations(filter: ResourceLocationFilter): [ResourceLocation!]!
  resourceOnLocation(resourceId: ID!, type: ResourceOnLocationType!): ResourceLocation
  resourceSpecByType(resourceType: ResourceType!): ResourceTypeSpec!
  resources(employeeFilter: EmployeeFilter, filter: ResourceFilter): [ResourceItem!]!
  role(id: ID!): Role
  roles: [Role]!
  routeSpecification(id: ID!): RouteSpecification!
  routeSpecificationProvidingInfo: RouteSpecificationProvidingInfo!
  routeSpecifications(filter: RouteSpecificationFilter): [RouteSpecification!]!
  service(id: ID!): Service
  serviceBasket(id: ID!): ServiceBasket!
  serviceBaskets(filter: ServiceBasketFilter): [ServiceBasket!]!
  serviceObject(id: ID!, serviceObjectType: ServiceObjectType): ServiceObjectItem
  serviceObjectSla(id: ID!): ServiceObjectSla!
  serviceObjectSlaInfo: ServiceObjectSlaInfo!
  serviceObjectSlaList(filter: ServiceObjectSlaFilter): [ServiceObjectSla!]!
  serviceObjects(filter: ServiceObjectFilter): [ServiceObjectItem]!
  serviceOffer(id: ID!): ServiceOffer
  serviceOffers(filter: ServiceOfferFilter): [ServiceOffer]!
  serviceStandard(id: ID!): ServiceStandard
  serviceStandardProviding(id: ID!): ServiceStandardProviding!
  serviceStandardProvidingInfo: ServiceStandardProvidingInfo!
  serviceStandardProvidings(filter: ServiceStandardProvidingFilter, sort: [ServiceStandardProvidingSort!]): [ServiceStandardProviding!]!
  serviceStandards(filter: ServiceStandardFilter, sort: [ServiceStandardSort!]): [ServiceStandard]!
  services(filter: ServiceFilter): [Service]
  shift(id: ID!): Shift
  shiftFilterProfileRules(filter: ShiftFilterProfileRuleFilter): [ShiftFilterProfileRule!]!
  shiftFilterProfiles(filter: ShiftFilterProfileFilter): [ShiftFilterProfile!]!
  shiftPages(filter: ShiftFilter, pageSelect: PageSelectInput!, sort: [ShiftSort!]): ShiftPage!
  shifts(filter: ShiftFilter): [Shift]!
  shiftsJournals(filter: ShiftJournalFilter): [ShiftJournal]!
  skill(employeeId: ID!, skillSpecificationId: ID!): Skill!
  skillSpecification(id: ID!): SkillSpecification!
  skillSpecifications(filter: SkillSpecificationFilter, sort: [SkillSpecificationSort!]): [SkillSpecification!]!
  skills(filter: SkillFilter): [Skill!]!
  specialEmphasis(id: ID!): SpecialEmphasis
  specialEmphasises(filter: SpecialEmphasisFilter): [SpecialEmphasis!]!
  stepladder(id: ID!): Stepladder
  stepladders: [Stepladder]!
  subdivision(id: ID!): Subdivision!
  subdivisions(filter: SubdivisionFilter): [Subdivision!]!
  task(id: ID!): Task
  taskFilterProfileRules(filter: TaskFilterProfileRuleFilter): [TaskFilterProfileRule!]!
  taskFilterProfiles(filter: TaskFilterProfileFilter): [TaskFilterProfile!]!
  taskPublicationTimeDirectory(id: ID!): TaskPublicationTimeDirectory!
  taskPublicationTimeDirectoryList: [TaskPublicationTimeDirectory!]!
  taskTransferNormInfo: TaskTransferNormInfo!
  tasks(filter: TaskFilter, sort: [TaskSort!] = [{sortBy: operationScheduledStart, orderBy: ASC}]): [Task]!
  timeLiner(filter: TimeLinerViewFilter!, sort: TimeLinerViewSort = {techBlockSort: [{sortBy: RESOURCE_TYPE, orderBy: ASC}], techResourceSort: [{sortBy: SHORT_TITLE, orderBy: ASC}, {sortBy: RESOURCE_NUMBER, orderBy: ASC}], employeeBlockSort: {groupViewSort: [{sortBy: EMPLOYEE_GROUP_NAME, orderBy: ASC}], employeeViewSort: [{sortBy: LAST_NAME, orderBy: ASC}, {sortBy: FIRST_NAME, orderBy: ASC}, {sortBy: MIDDLE_NAME, orderBy: ASC}]}, allEmployeesByOnShift: true}): TimeLinerView!
  towbar(id: ID!): Towbar
  towbarAdapter(id: ID!): TowbarAdapter
  towbarAdapters: [TowbarAdapter]!
  towbars: [Towbar]!
  typeOperatorAssociations(filter: TypeOperatorAssociationFilter): [TypeOperatorAssociation!]!
  unit(id: ID!): Unit!
  units(filter: UnitFilter): [Unit!]!
  vacuumCleaner(id: ID!): VacuumCleaner
  vacuumCleaners: [VacuumCleaner]!
  vacuumSweeper(id: ID!): VacuumSweeper
  vacuumSweepers: [VacuumSweeper]!
  vipServiceCar(id: ID!): VipServiceCar @deprecated(reason: "No longer supported")
  vipServiceCares: [VipServiceCar]! @deprecated(reason: "No longer supported")
  wasteDisposalMachine(id: ID!): WasteDisposalMachine
  wasteDisposalMachines: [WasteDisposalMachine]!
  waterCar(id: ID!): WaterCar
  waterCars: [WaterCar]!
  waybill(id: ID!): Waybill!
  waybills(filter: WaybillFilter): [Waybill!]!
  waypoint(id: ID!): Waypoint
  waypointSpecification(id: ID!): WaypointSpecification!
  waypointSpecifications(filter: WaypointSpecificationFilter): [WaypointSpecification!]!
  waypoints(filter: WaypointFilter): [Waypoint!]!
}

type ReasonCancellationTask {
  id: ID!
  name: String!
}

type ResourceDeficitData {
  demands: [ResourceDeficitDemand!]!
  resourceRequirements: [Condition!]!
  type: ResourceType!
}

type ResourceDeficitDemand {
  count: Int!
  period: MandatoryDateTimePeriod!
}

type ResourceDeficitReport {
  createdAt: DateTime!
  data: [ResourceDeficitData!]!
  onBehalfOf: Employee
  period: MandatoryDateTimePeriod!
}

"Группа ресурсов"
type ResourceGroup {
  id: ID!
  name: String!
  resourceItems: [ResourceItem!]!
  subdivision: Subdivision
  validityPeriodList: [ResourceGroupValidityPeriod!]!
}

"Суммарная задача группового ресурса"
type ResourceGroupSummaryTask {
  scheduledEnd: DateTime
  scheduledStart: DateTime
  tasks: [Task!]!
}

type ResourceGroupValidityPeriod {
  id: ID!
  period: OptionalDateTimePeriod!
  resourceGroup: ResourceGroup!
  resources: [ResourceItem!]!
  summaryTask(filter: TaskFilter, sort: [TaskSort!]): ResourceGroupSummaryTask!
}

"Пара - тип ресурса и ресурс"
type ResourceItem {
  erpId: String
  resource: Resource
  resourceType: ResourceType
}

type ResourceLocation {
  id: ID!
  period: OptionalDateTimePeriod!
  place: LocalPlace!
}

type ResourcePropertyInfo {
  propertyNames: [String!]!
  resourceType: String!
}

type ResourceRequirementsInfo {
  others: [ConditionInfo!]!
  resources: [ResourcePropertyInfo!]!
}

type ResourceSubscriptionEvent implements ISubscriptionEvent {
  data: ResourceItem
  eventType: SubscriptionEventType!
  id: ID!
  resourceType: ResourceType!
}

type ResourceTypeSpec {
  fileRecord: FileRecord
  resourceType: ResourceType!
}

type ResourceUnavailabilityPeriod {
  comment: String
  createdBy: ResourceUnavailabilityPeriodCreationType!
  id: ID!
  unavailableFrom: DateTime!
  unavailableTo: DateTime!
  "Номер путевого листа. Требуется для связи с ErpResource"
  wayBillNum: String
}

"Роль пользователя"
type Role {
  id: ID!
  name: String!
  serviceStandards: [ServiceStandard]!
}

"Маршрут"
type Route {
  id: ID!
  routeSpecification: RouteSpecification!
  waypoints: [Waypoint!]!
}

"Спецификация маршрута"
type RouteSpecification implements ISoftDelete {
  createdAt: DateTime!
  deletedAt: DateTime
  description(localeSpecification: LocaleSpecificationInput): String
  id: ID!
  waypointSpecifications: [WaypointSpecification!]!
}

"Обусловленная ссылка на спецификацию маршрута"
type RouteSpecificationProviding {
  codeRms: String!
  conditionGroups: [ConditionGroup!]!
  "Условия выполнения ссылки на свойство составного объекта"
  conditions: [Condition!]!
  id: ID!
  operationSpecification: OperationSpecification!
  routeSpecification: RouteSpecification!
}

type RouteSpecificationProvidingInfo {
  conditions: [ConditionInfo!]!
}

"Услуга"
type Service {
  children: [Service!]!
  consumableResourceValues: [ServiceConsumableResourceValue]!
  extendedParamValues: [ExtendedParamValue!]!
  id: ID!
  onDemand: Boolean! @deprecated(reason: "No longer supported")
  onDemandParams: ServiceOnDemandParams
  onDemandStatus: OnDemandStatus
  operations: [Operation]!
  parent: Service
  serviceObject: ServiceObjectItem!
  serviceOffer: ServiceOffer!
  status: ServiceStatus!
}

"Корзина услуг"
type ServiceBasket {
  id: ID!
  serviceBasketItems: [ServiceBasketItem!]!
  serviceObject: ServiceObjectItem!
  status: ServiceBasketStatus!
}

type ServiceBasketItem {
  id: ID!
  operationItems: [ServiceBasketOperationItem!]!
  service: Service
  serviceStandard: ServiceStandard!
}

type ServiceBasketOperationItem {
  operationSpecification: OperationSpecification!
  resultAltEnd: DateTime
  resultAltStart: DateTime
  resultEnd: DateTime
  resultStart: DateTime
  sourceEnd: DateTime
  sourceStart: DateTime
}

type ServiceConsumableResourceValue {
  id: ID!
  type: ConsumableResourceType!
  value: ConsumableResourceValue
  valueType: ConsumableResourceValueType
}

"Пара - тип целевого объекта обслуживания и объекта обслуживания"
type ServiceObjectItem {
  serviceObject: ServiceObject
  serviceObjectType: ServiceObjectType
}

"Справочник временных нормативов на обслуживание ServiceObject"
type ServiceObjectSla {
  conditionGroups: [ConditionGroup!]!
  "Условия применения"
  conditions: [Condition]!
  "Идентификатор"
  id: ID!
  "Значение норматива (в секундах)"
  norm: Int!
  "Тип норматива (TimeInSeconds)"
  normUnit: NormUnit!
  "Тип объекта обслуживания"
  serviceObjectType: ServiceObjectType!
}

type ServiceObjectSlaInfo {
  conditions: [ConditionInfo!]!
}

"Предложение по услуге"
type ServiceOffer {
  contract: Contract
  id: ID!
  "Предоставляется по запросу"
  onDemand: Boolean!
  serviceStandard: ServiceStandard!
  validFrom: Date
  validTo: Date
}

type ServiceOnDemandParams {
  operationScheduledTimes: [ServiceOnDemandParamsOperationScheduledTimes!]!
  resource: ServiceOnDemandParamsResource
  serviceId: ID!
}

type ServiceOnDemandParamsOperationScheduledTimes {
  operationSpecification: OperationSpecification!
  scheduledEnd: DateTime!
  scheduledStart: DateTime!
}

type ServiceOnDemandParamsResource {
  resourceId: ID!
  resourceType: ResourceType!
}

"Стандарт услуги"
type ServiceStandard implements ISoftDelete {
  children(filter: ServiceStandardFilter): [ServiceStandard!]!
  codeRms: String!
  consumableResourceTypes: [ConsumableResourceType!]!
  deletedAt: DateTime
  descriptionEng: String
  descriptionRus: String
  displayInProcessMap: Boolean!
  erpId: String
  extendedParams: [ExtendedParam!]!
  id: ID!
  name: String
  onDemand: ServiceStandardOnDemand @deprecated(reason: "Will be removed")
  operationSpecifications: [OperationSpecification!]!
  parents(filter: ServiceStandardFilter): [ServiceStandard!]!
  responsibleSubdivision: Subdivision @deprecated(reason: "Will be removed")
  serviceObjectType: ServiceObjectType!
  sortKey: String
  type: ServiceStandardType!
  useComplexResource: Boolean!
}

type ServiceStandardOnDemand {
  "Требуется ли расчёт времён операций (по умолчанию true)"
  calculatingOperationTimesRequired: Boolean!
  "Требуется ли подбор ресурса (по умолчанию true)"
  selectionResourcesRequired: Boolean!
  serviceStandardId: ID!
}

"""

Предоставляется ли услуга или нет в рамках условий
Если в справочнике есть запись по услуге - она осуществляется, если нет данных, то не предоставляется
"""
type ServiceStandardProviding {
  codeRms: String!
  conditionGroups: [ConditionGroup!]!
  conditions: [Condition!]!
  id: ID!
  "Предоставляется по запросу"
  onDemand: Boolean! @deprecated(reason: "Will be remove")
  serviceStandard: ServiceStandard!
}

type ServiceStandardProvidingInfo {
  conditions: [ConditionInfo!]!
}

type SetIconToResourceTypeSpecErrors {
  errors: [SetIconToResourceTypeSpecError!]!
}

type SetIconToResourceTypeSpecIconMimeTypeDetectError implements UserError {
  message(localeSpecification: LocaleSpecificationInput): String!
  path: [String!]
}

type SetIconToResourceTypeSpecIconSizeError implements UserError {
  message(localeSpecification: LocaleSpecificationInput): String!
  path: [String!]
}

type SetIconToResourceTypeSpecIconTypeError implements UserError {
  message(localeSpecification: LocaleSpecificationInput): String!
  path: [String!]
}

"Смена"
type Shift {
  createdBy: ShiftCreationType!
  datePlanBegin: DateTime!
  datePlanEnd: DateTime!
  "Сотрудники, прикрепленные к смене"
  employees(filter: EmployeeFilter): [Employee!]!
  id: ID!
  integrationId: String
  shiftJournals(filter: ShiftJournalFilter): [ShiftJournal!]!
  "Статус смены согласно ee расписанию на текущий момент времени"
  status: ShiftStatus!
  type: ShiftType!
}

type ShiftFilterProfile implements IEntity & ISoftDelete {
  deleted: Boolean!
  deletedAt: DateTime
  description(localeSpecification: LocaleSpecificationInput): String
  id: ID!
  rules(filter: ShiftFilterProfileRuleFilter): [ShiftFilterProfileRule!]!
}

type ShiftFilterProfileCreateErrors {
  errors: [UserError!]!
}

type ShiftFilterProfileDeleteErrors {
  errors: [UserError!]!
}

type ShiftFilterProfileRule implements IEntity {
  description(localeSpecification: LocaleSpecificationInput): String
  id: ID!
  positionMatchingStrategy: MatchingStrategy!
  positions: [Position!]!
  resourceType: ResourceType!
  subdivisionMatchingStrategy: MatchingStrategy!
  subdivisions: [Subdivision!]!
}

type ShiftFilterProfileRuleCreateErrors {
  errors: [UserError!]!
}

type ShiftFilterProfileRuleDeleteErrors {
  errors: [ShiftFilterProfileRuleDeleteError!]!
}

type ShiftFilterProfileRuleErrorInUse implements UserError {
  message(localeSpecification: LocaleSpecificationInput): String!
  path: [String!]
  profiles: [ShiftFilterProfile!]!
}

type ShiftFilterProfileRuleUpdateErrors {
  errors: [UserError!]!
}

type ShiftFilterProfileUpdateErrors {
  errors: [UserError!]!
}

"Журнал прихода и ухода сотрудника на/со смены"
type ShiftJournal {
  arrivalDate: DateTime
  complexResources(complexResourceFilter: ComplexResourceFilter): [ComplexResource!]!
  "Статус сотрудника на текущую смену в момент получения данных"
  currentShiftStatus: EmployeeShiftStatus!
  departureDate: DateTime
  employee: Employee!
  employeeGroupViews: [EmployeeGroupView!]!
  employeeId: ID!
  employeeUnavailabilityViews: [ResourceUnavailabilityPeriod!]!
  shift: Shift!
  shiftId: ID!
}

type ShiftJournalErrors {
  errors: [ShiftJournalError!]!
}

type ShiftManualModificationUnsupportedCreationTypeError implements UserError {
  creationType: ShiftCreationType!
  message(localeSpecification: LocaleSpecificationInput): String!
  path: [String!]
}

type ShiftPage implements IPage {
  edges: [Shift]!
  pageInfo: PageInfo!
}

type Skill {
  employee: Employee!
  skillSpecification: SkillSpecification!
  validFrom: DateTime
  validTo: DateTime
}

type SkillSpecification {
  code: String!
  id: ID!
  integrationId: ID!
  name: String
}

type SpecialEmphasis implements IAodbMasterData & ISoftDelete {
  aodbInternalId: String!
  code: String!
  deletedAt: DateTime
  description: String!
  id: ID!
  lastUpdateDateTime: DateTime!
}

type Stepladder implements IResource & IResourceNumberType & ISoftDelete & ITechnicalResource & Mobility {
  businessRoleNames: [String!]!
  businessRoles: [BusinessRole!]!
  deletedAt: DateTime
  empLifeCycleDependency: Boolean!
  erpResourceId: String @deprecated(reason: "Deprecated in a favour of ErpResource.resource")
  id: ID!
  isPartOfComplexResource: Boolean!
  malfunction: Boolean!
  mobileIdent: String
  mobilityType: MobilityType!
  onlineStatus: OnlineStatus!
  productionSiteName: String
  resourceGroup: ResourceGroup @deprecated(reason: "No longer supported")
  resourceGroupValidityPeriods(filter: ResourceGroupValidityPeriodFilter): [ResourceGroupValidityPeriod!]!
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivision: Subdivision!
  subdivisionId: String! @deprecated(reason: "Will be removed. Use field subdivison")
  supportedAircraftTypes: [String]!
  unavailability(filter: ResourceUnavailabilityFilter): [ResourceUnavailabilityPeriod!]!
  waybills(filter: WaybillFilter): [Waybill!]!
}

"Подразделение"
type Subdivision {
  deletedAt: DateTime
  hrmId: String!
  id: ID!
  integrationId: String!
  name: String!
  positions(filter: PositionFilter): [Position!]!
  validityPeriod: OptionalDateTimePeriod!
}

type Subscription {
  flights(filter: FlightSubscriptionFilter): [FlightSubscriptionEvent!]!
  resources(filter: ResourceSubscriptionFilter): [ResourceSubscriptionEvent!]!
  tasks(filter: TaskSubscriptionFilter): [TaskSubscriptionEvent!]!
}

type Task {
  actualArrivalToPlaceExecution: DateTime
  actualDepartureFromPlaceExecution: DateTime
  actualDepartureToPlaceExecution: DateTime
  actualEnd: DateTime
  actualStart: DateTime
  arrivalPlaceExecutionTimeRequired: Boolean!
  availableTaskStatusTransitions(filter: AvailableTaskStatusTransitionFilter): [AvailableTaskStatusTransition]!
  businessRoles: [BusinessRole!]!
  createdAt: DateTime!
  departurePlaceExecutionTimeRequired: Boolean!
  firstOperationRoute(useSla: Boolean = true @deprecated): Route
  id: ID!
  invoices: [Invoice!]!
  operationResourceSlots: [OperationResourceSlot]!
  operations(filter: OperationFilter): [Operation!]!
  pairTaskDetails: PairTaskDetails
  reasonForCancellation: String
  resource: ResourceItem
  resourceAssignmentConflict: TaskAssignmentConflict!
  scheduledArrivalToPlaceExecution: DateTime
  scheduledDepartureFromPlaceExecution: DateTime
  scheduledDepartureToPlaceExecution: DateTime
  scheduledEnd: DateTime!
  scheduledStart: DateTime!
  serviceObject: ServiceObjectItem!
  serviceObjectDetails: TaskServiceObjectDetails
  status: TaskStatus!
  subdivisions: [Subdivision!]!
  updatedAt: DateTime!
  updatedBy: TaskEditorType!
}

type TaskAssignmentConflict {
  missingRequirements: [Condition!]!
  status: TaskAssignmentConflictStatus!
}

type TaskFilterProfile implements IEntity & ISoftDelete {
  deleted: Boolean!
  deletedAt: DateTime
  description(localeSpecification: LocaleSpecificationInput): String
  id: ID!
  rules(filter: TaskFilterProfileRuleFilter): [TaskFilterProfileRule!]!
}

type TaskFilterProfileCreateErrors {
  errors: [UserError!]!
}

type TaskFilterProfileDeleteErrors {
  errors: [UserError!]!
}

type TaskFilterProfileRule implements IEntity {
  businessRoleMatchingStrategy: MatchingStrategy!
  businessRoles: [BusinessRole!]!
  description(localeSpecification: LocaleSpecificationInput): String
  id: ID!
  resourceType: ResourceType!
  subdivisionMatchingStrategy: MatchingStrategy!
  subdivisions: [Subdivision!]!
}

type TaskFilterProfileRuleCreateErrors {
  errors: [UserError!]!
}

type TaskFilterProfileRuleDeleteErrors {
  errors: [TaskFilterProfileRuleDeleteError!]!
}

type TaskFilterProfileRuleErrorInUse implements UserError {
  message(localeSpecification: LocaleSpecificationInput): String!
  path: [String!]
  profiles: [TaskFilterProfile!]!
}

type TaskFilterProfileRuleUpdateErrors {
  errors: [UserError!]!
}

type TaskFilterProfileUpdateErrors {
  errors: [UserError!]!
}

type TaskFlightDetails {
  flightDirectionType: FlightDirectionType
}

type TaskNotRequireComplexResourceWarning implements UserWarning {
  message(localeSpecification: LocaleSpecificationInput): String!
  path: [String!]
}

type TaskPublicationTimeDirectory {
  id: ID!
  publicationTimeDelta: Int!
  subdivision: Subdivision!
}

type TaskRequireComplexResourceError implements UserError {
  message(localeSpecification: LocaleSpecificationInput): String!
  path: [String!]
  performer: ResourceItem!
}

type TaskSubscriptionEvent implements ISubscriptionEvent {
  data: Task
  eventType: SubscriptionEventType!
  id: ID!
}

type TaskTransferNorm {
  codeRms: String!
  conditionGroups: [ConditionGroup!]!
  conditions: [Condition!]!
  id: ID!
  transferNorm: Int!
}

type TaskTransferNormInfo {
  conditions: [ConditionInfo!]!
}

type TechResourceBlockView {
  "Grouped CRs by employee with same type"
  complexResourceViews: [ComplexResourceGroupedByEmployeeView!]!
  resourceType: ResourceType!
  "Resources outside the CRs"
  resources: [IResource!]!
}

type TimeDuration {
  hours: Int!
  minutes: Int!
  seconds: Int!
}

type TimeLinerView {
  employeeBlock: EmployeeBlockView!
  techResourceBlocks: [TechResourceBlockView!]!
}

type TimeZoneParameters {
  abbreviation: String!
  name: String!
}

type Towbar implements IResource & IResourceNumberType & ISoftDelete & ITechnicalResource & Mobility {
  adapters: [TowbarAdapter]
  businessRoleNames: [String!]!
  businessRoles: [BusinessRole!]!
  deletedAt: DateTime
  empLifeCycleDependency: Boolean!
  erpResourceId: String @deprecated(reason: "Deprecated in a favour of ErpResource.resource")
  id: ID!
  isPartOfComplexResource: Boolean!
  malfunction: Boolean!
  mobileIdent: String
  mobilityType: MobilityType!
  onlineStatus: OnlineStatus!
  productionSiteName: String
  resourceGroup: ResourceGroup @deprecated(reason: "No longer supported")
  resourceGroupValidityPeriods(filter: ResourceGroupValidityPeriodFilter): [ResourceGroupValidityPeriod!]!
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivision: Subdivision!
  subdivisionId: String! @deprecated(reason: "Will be removed. Use field subdivison")
  supportedAircraftTypes: [String]!
  unavailability(filter: ResourceUnavailabilityFilter): [ResourceUnavailabilityPeriod!]!
  waybills(filter: WaybillFilter): [Waybill!]!
}

type TowbarAdapter implements IResource & IResourceNumberType & ISoftDelete & ITechnicalResource & Mobility {
  businessRoleNames: [String!]!
  businessRoles: [BusinessRole!]!
  deletedAt: DateTime
  empLifeCycleDependency: Boolean!
  erpResourceId: String @deprecated(reason: "Deprecated in a favour of ErpResource.resource")
  id: ID!
  isPartOfComplexResource: Boolean!
  malfunction: Boolean!
  mobileIdent: String
  mobilityType: MobilityType!
  onlineStatus: OnlineStatus!
  productionSiteName: String
  resourceGroup: ResourceGroup @deprecated(reason: "No longer supported")
  resourceGroupValidityPeriods(filter: ResourceGroupValidityPeriodFilter): [ResourceGroupValidityPeriod!]!
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivision: Subdivision!
  subdivisionId: String! @deprecated(reason: "Will be removed. Use field subdivison")
  supportedAircraftTypes: [String]!
  unavailability(filter: ResourceUnavailabilityFilter): [ResourceUnavailabilityPeriod!]!
  waybills(filter: WaybillFilter): [Waybill!]!
}

type TypeOperatorAssociation {
  operator: Operator!
  propertyType: ObjectPropertyType!
  scope: TypeOperatorAssociationScope!
  valueType: ObjectPropertyType
}

type UnassignResourceFromTaskManualResponse {
  pairTask: Task
  task: Task!
}

type Unit implements ISoftDelete {
  consumableResourceValueType: ConsumableResourceValueType!
  deletedAt: DateTime
  description: String
  id: ID!
  name: String!
}

type UpdateBusinessRoleInResourceErrors {
  errors: [UpdateBusinessRoleInResourceError!]!
}

type User implements IPersonnel {
  employee: Employee!
  number: String!
  shiftFilterProfile: ShiftFilterProfile
  taskFilterProfile: TaskFilterProfile
}

type VacuumCleaner implements IResource & IResourceNumberType & ISoftDelete & ITechnicalResource & Mobility {
  businessRoleNames: [String!]!
  businessRoles: [BusinessRole!]!
  deletedAt: DateTime
  empLifeCycleDependency: Boolean!
  erpResourceId: String @deprecated(reason: "Deprecated in a favour of ErpResource.resource")
  id: ID!
  isPartOfComplexResource: Boolean!
  malfunction: Boolean!
  mobileIdent: String
  mobilityType: MobilityType!
  onlineStatus: OnlineStatus!
  productionSiteName: String
  resourceGroup: ResourceGroup @deprecated(reason: "No longer supported")
  resourceGroupValidityPeriods(filter: ResourceGroupValidityPeriodFilter): [ResourceGroupValidityPeriod!]!
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivision: Subdivision!
  subdivisionId: String! @deprecated(reason: "Will be removed. Use field subdivison")
  supportedAircraftTypes: [String]! @deprecated(reason: "No longer supported")
  unavailability(filter: ResourceUnavailabilityFilter): [ResourceUnavailabilityPeriod!]!
  vacuumCleanerType: String!
  waybills(filter: WaybillFilter): [Waybill!]!
}

type VacuumSweeper implements IResource & IResourceNumberType & ISoftDelete & ITechnicalResource & Mobility {
  businessRoleNames: [String!]!
  businessRoles: [BusinessRole!]!
  cleaningCapabilityGarbage: Boolean!
  cleaningCapabilityPozh: Boolean!
  deletedAt: DateTime
  empLifeCycleDependency: Boolean!
  erpResourceId: String @deprecated(reason: "Deprecated in a favour of ErpResource.resource")
  id: ID!
  isPartOfComplexResource: Boolean!
  malfunction: Boolean!
  mobileIdent: String
  mobilityType: MobilityType!
  onlineStatus: OnlineStatus!
  productionSiteName: String
  resourceGroup: ResourceGroup @deprecated(reason: "No longer supported")
  resourceGroupValidityPeriods(filter: ResourceGroupValidityPeriodFilter): [ResourceGroupValidityPeriod!]!
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivision: Subdivision!
  subdivisionId: String! @deprecated(reason: "Will be removed. Use field subdivison")
  supportedAircraftTypes: [String]! @deprecated(reason: "No longer supported")
  unavailability(filter: ResourceUnavailabilityFilter): [ResourceUnavailabilityPeriod!]!
  waybills(filter: WaybillFilter): [Waybill!]!
}

type VipServiceCar implements IResource & IResourceNumberType & ISoftDelete & ITechnicalResource & Mobility {
  businessRoleNames: [String!]!
  businessRoles: [BusinessRole!]!
  deletedAt: DateTime
  empLifeCycleDependency: Boolean!
  erpResourceId: String @deprecated(reason: "Deprecated in a favour of ErpResource.resource")
  id: ID!
  isPartOfComplexResource: Boolean!
  malfunction: Boolean!
  mobileIdent: String
  mobilityType: MobilityType!
  onlineStatus: OnlineStatus!
  passengerCapacity: Int!
  productionSiteName: String
  resourceGroup: ResourceGroup @deprecated(reason: "No longer supported")
  resourceGroupValidityPeriods(filter: ResourceGroupValidityPeriodFilter): [ResourceGroupValidityPeriod!]!
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  serviceExploitationId: String!
  shortTitle: String
  subdivision: Subdivision!
  subdivisionId: String! @deprecated(reason: "Will be removed. Use field subdivison")
  supportedAircraftTypes: [String]!
  unavailability(filter: ResourceUnavailabilityFilter): [ResourceUnavailabilityPeriod!]!
  waybills(filter: WaybillFilter): [Waybill!]!
}

type WasteDisposalMachine implements IResource & IResourceNumberType & ISoftDelete & ITechnicalResource & Mobility {
  businessRoleNames: [String!]!
  businessRoles: [BusinessRole!]!
  deletedAt: DateTime
  empLifeCycleDependency: Boolean!
  erpResourceId: String @deprecated(reason: "Deprecated in a favour of ErpResource.resource")
  id: ID!
  isPartOfComplexResource: Boolean!
  malfunction: Boolean!
  mobileIdent: String
  mobilityType: MobilityType!
  onlineStatus: OnlineStatus!
  productionSiteName: String
  resourceGroup: ResourceGroup @deprecated(reason: "No longer supported")
  resourceGroupValidityPeriods(filter: ResourceGroupValidityPeriodFilter): [ResourceGroupValidityPeriod!]!
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivision: Subdivision!
  subdivisionId: String! @deprecated(reason: "Will be removed. Use field subdivison")
  supportedAircraftTypes: [String]! @deprecated(reason: "No longer supported")
  tankVolume: Int
  unavailability(filter: ResourceUnavailabilityFilter): [ResourceUnavailabilityPeriod!]!
  waybills(filter: WaybillFilter): [Waybill!]!
}

type WaterCar implements IResource & IResourceNumberType & ISoftDelete & ITechnicalResource & Mobility {
  businessRoleNames: [String!]!
  businessRoles: [BusinessRole!]!
  deletedAt: DateTime
  empLifeCycleDependency: Boolean!
  erpResourceId: String @deprecated(reason: "Deprecated in a favour of ErpResource.resource")
  id: ID!
  isPartOfComplexResource: Boolean!
  malfunction: Boolean!
  mobileIdent: String
  mobilityType: MobilityType!
  onlineStatus: OnlineStatus!
  productionSiteName: String
  resourceGroup: ResourceGroup @deprecated(reason: "No longer supported")
  resourceGroupValidityPeriods(filter: ResourceGroupValidityPeriodFilter): [ResourceGroupValidityPeriod!]!
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivision: Subdivision!
  subdivisionId: String! @deprecated(reason: "Will be removed. Use field subdivison")
  supportedAircraftTypes: [String]! @deprecated(reason: "No longer supported")
  tankVolume: Int
  unavailability(filter: ResourceUnavailabilityFilter): [ResourceUnavailabilityPeriod!]!
  waybills(filter: WaybillFilter): [Waybill!]!
}

type Waybill {
  complexResource: ComplexResource
  createdAt: DateTime!
  dateTimeEnd: DateTime
  dateTimeStart: DateTime
  eventDateTime: DateTime!
  id: ID!
  mobileAsset: ResourceItem!
  personAssigned: Employee
  resourceGroup: ResourceGroup @deprecated(reason: "Will be removed. Use complexResource")
  subdivision: Subdivision
  waybillNum: String!
}

"Путевая точка"
type Waypoint {
  actualArrival: DateTime
  actualDeparture: DateTime
  id: ID!
  scheduledArrival: DateTime
  scheduledDeparture: DateTime
  serviceObjectLocation: ServiceObjectLocation
  value: String
  waypointSpecification: WaypointSpecification!
}

"Спецификация путевой точки"
type WaypointSpecification {
  id: ID!
  location: Location!
  orderNo: Int!
}

type _Service {
  sdl: String!
}

enum AssignedResultStatus {
  PROCESSED
  SKIPPED
}

enum BusinessRoleSortField {
  name
}

enum BusinessRuleProvidingSortField {
  name
}

"Comparable Operators: '>' | '<' | '>=' | '<='"
enum ComparableOperator {
  gt
  gte
  lt
  lte
}

enum ComplexResourceCreationType {
  AUTOMATIC
  MANUAL
}

enum ConditionGroupSortField {
  name
}

"Тип условия"
enum ConditionType {
  ComparableFloatCondition
  ComparableIntCondition
  EmptyValueCondition
  EqualityBooleanCondition
  EqualityFloatCondition
  EqualityIntCondition
  EqualityStringCondition
  HasOfIntCondition
  HasOfStringCondition
  InIntCondition
  InStringCondition
  ObjectComparisonCondition
}

enum ConsumableResourceValueType {
  ConsumableResourcePeriodValue
  ConsumableResourceStringValue
}

"Тип заказчика для договора"
enum CustomerType {
  Airline
}

enum DateTimeRangeCriteriaType {
  AFTER
  COVER
  COVER_FROM_POINT
  COVER_OR_AFTER_FROM_POINT
  COVER_TO_POINT
  INTERSECTION
}

enum EmployeeGroupFilterIsEmpty {
  BUSINESS_ROLES
  SUBDIVISIONS
}

enum EmployeeGroupSortField {
  NAME
}

enum EmployeeGroupValidityPeriodSortField {
  EMPLOYEE_GROUP_NAME
  VALID_FROM
}

enum EmployeeResourceGroupDisplayConfig {
  EMPLOYEE
  EMPLOYEE_TECH
  TECH
}

enum EmployeeSearchMode {
  ALL
  USER_AVAILABLE
}

"Статус сотрудника на смене (в данный момент времени)"
enum EmployeeShiftStatus {
  "не на смене"
  NOT_ON_SHIFT
  "на смене"
  ON_SHIFT
}

enum EmployeeSortField {
  FIRST_NAME
  LAST_NAME
  MIDDLE_NAME
}

enum EmptyValueOperator {
  is_empty
  is_not_empty
}

"Equality operators: '==' | '!='"
enum EqualityOperator {
  eq
  neq
}

enum ExtendedParamValueType {
  STRING
  STRING_ARRAY
}

enum FileRecordStatus {
  BUSY
  DELETED
  ERROR
  OTL_EXP
  PENDING
  STORED
}

enum FlightBillingStatus {
  BIL
}

enum FlightDirectionType {
  ARRIVAL
  CIRCULATING
  DEPARTURE
}

enum FlightFilterIsEmpty {
  GATES
  SPECIAL_EMPHASIS
}

enum FlightOperationalTimeQualifier {
  CNL
  DOS
  GOA
  LDT
  OFB
  ONB
  RFB
  TEN
  TKO
}

enum FlightServiceManualSortField {
  name
}

enum FlightSpecificationType {
  ARRIVAL
  DEPARTURE
  UNDEFINED
}

"Тип рейса"
enum FlightTrafficType {
  D
  I
}

enum HasOfOperator {
  has_all_of
  has_no_of
  has_one_of
}

enum HeatingPrinciple {
  DIESEL_BURNER
  ELECTRIC_HEATER
}

"Comparison Operator On MultipleValues: 'in', '!in'"
enum InOperator {
  in
  not_in
}

enum InvoiceEmailRequestState {
  COMPLETED_WITH_ERROR
  ERROR
  HANDLED_WITH_ERROR
  HANDLED_WITH_SUCCESS
  NEW
  SENT
}

enum LocalPlaceType {
  MOBILE_RESOURCE_BASING
  MOBILE_RESOURCE_SERVICE
  PASSENGER_SERVICE
  ROUTE_POINT
  STAFF_BASING
  STATIONARY_RESOURCE_BASING
  WAREHOUSE
}

enum MatchingStrategy {
  MATCH
  MATCH_OR_EMPTY
}

"Тип мобильности ресурса: стационарный или мобильный"
enum MobilityType {
  "Мобильный"
  Mobile
  "Стационарный"
  Stationary
}

"Тип норматива (в чем мы меряем норматив)"
enum NormUnit {
  "Время в секундах"
  TimeInSeconds
}

enum ObjectComparisonOperator {
  contains
  eq
  gt
  gte
  has_all_of
  has_no_of
  has_one_of
  in
  lt
  lte
  neq
  not_in
}

enum ObjectLocationType {
  BELT
  CHECK_IN_COUNTER
  GATE
  PARKING_SPOT
  SHUTE
}

"Тип или имя объекта"
enum ObjectName {
  Aircraft
  Flight
  ResourceItem
  ServiceObjectItem
}

"Тип свойства объекта"
enum ObjectPropertyType {
  Array_Of_Int
  Array_Of_String
  Boolean
  Date
  DateTime
  Float
  ID
  Int
  String
}

enum OnDemandStatus {
  BASIC
  MANUAL
}

enum OnlineStatus {
  OFFLINE
  ONLINE
}

enum OperationAodbMilestoneAssociationEventType {
  OPERATION_END
  OPERATION_START
}

enum OperationGroupResourceSpecificationSortField {
  operationSpecificationGroupName
  resourceQuantityFormula
}

"Как был создан слот"
enum OperationResourceSlotCreateType {
  "Статус по умолчанию"
  AUTOMATIC
  "Статус при копировании"
  MANUAL
}

"Статус слота"
enum OperationResourceSlotStatus {
  "Статус по умолчанию"
  ACTIVE
  "Статус для отмененных слотов"
  CANCELLED
}

enum OperationResourceSpecificationCommonSortField {
  CODE_RMS
  OPERATION_SPECIFICATION_NAME
  RESOURCE_TYPE
}

enum OperationResourceSpecificationSortField {
  CODE_RMS
  OPERATION_SPECIFICATION_NAME
  RESOURCE_QUANTITY_FORMULA
}

"Тип группировки спецификаций операций"
enum OperationSpecificationGroupingType {
  "Несколько объектов обслуживания"
  MULTIPLE_SERVICE_OBJECTS
  "Один объект обслуживания"
  SINGLE_SERVICE_OBJECT
}

enum OperationSpecificationNormSortField {
  CODE_RMS
  NORM
  NORM_UNIT
  OPERATION_SPECIFICATION_NAME
}

enum OperationSpecificationSortField {
  codeRms
  deletedAt
  description
  name
  serviceStandardName
}

enum OperationSpecificationTimeCalculationRuleSortField {
  CODE_RMS
  OPERATION_SPECIFICATION_NAME
  PLANNED_MOMENT_TYPE
  TIME_OFFSET
}

enum OperationStatus {
  CANCELLED
  COMPLETED
  MANUAL_CANCELLED
  WAITING_EXECUTION
  WORKING
}

enum Operator {
  contains
  eq
  gt
  gte
  has_all_of
  has_no_of
  has_one_of
  in
  is_empty
  is_not_empty
  lt
  lte
  neq
  not_in
}

"Тип места стоянки"
enum ParkingSpotType {
  CONTACT
  DEICING
  HANGAR
  REMOTE
  TAXIWAY
}

enum PassengerCategory {
  BLND
  DEAF
  DPNA
  STRC
  UM
  WCHC
  WCHR
  WCHS
}

enum PassengerCategoryAdditional {
  ESAN
  LEGB
  LEGL
  LEGR
  MEDA
  OXYG
  SVAN
  WCBD
  WCBW
  WCLB
  WCMP
  WCOB
}

enum PlannedMomentType {
  "Конец операции"
  OPERATION_END
  "Начало операции"
  OPERATION_START
}

enum PredefinedLocaleType {
  AIRPORT_DEFAULT
  USER_DEFAULT
}

enum ResourceDeficitReportSearchMode {
  AVAILABLE_BUSINESS_ROLES
  AVAILABLE_RESOURCE_TYPES
  AVAILABLE_SUBDIVISIONS
}

enum ResourceLocationIsEmptyFilter {
  PERIOD_FROM
  PERIOD_TO
}

enum ResourceNumberType {
  Garage
  Inventory
}

enum ResourceOnLocationType {
  CURRENT
  LAST
}

enum ResourceSearchMode {
  ALL_RESOURCE_TYPES
  USER_AVAILABLE_RESOURCE_TYPES
}

enum ResourceSortField {
  RESOURCE_NUMBER
  RESOURCE_TYPE
  SHORT_TITLE
}

"Тип ресурса"
enum ResourceType {
  "Телетрап"
  AirBridge
  "Установка кондиционирования воздуха"
  AirConditioner
  "Установка воздушного запуска"
  AirStartDevice
  "Авиационный тягач"
  AircraftTug
  Ambulift
  "Тягач багажный"
  BaggageTractor
  "Погрузчик ленточный"
  BeltLoader
  "Автомобиль для довозки багажа"
  Car
  "Перегружатель контейнер"
  ContainerLoader
  "Противообледенительная машина"
  DeicingCar
  "Сотрудник"
  Employee
  "Огнетушитель углекислотный"
  Extinguisher
  FollowMeCar @deprecated(reason: "No longer supported")
  "Источник электропитания"
  GPU
  "Аэродромный заправщик газами"
  GasRefueller
  "Подогреватель салонов аэродромный"
  Heater
  HeaterCar
  "Автобус перронный"
  PaxBus
  "Трап"
  PaxStairs
  "Стремянка"
  Stepladder
  "Водило буксировочное"
  Towbar
  "Адаптер водила буксировочного универсального"
  TowbarAdapter
  "Пылесос"
  VacuumCleaner
  "Подметально-вакуумная машина"
  VacuumSweeper
  "Автомобиль для обслуживания VIP пассажиров"
  VipServiceCar @deprecated(reason: "No longer supported")
  "Ассенизационная машина"
  WasteDisposalMachine
  "Водозаправочная машина"
  WaterCar
}

enum ResourceUnavailabilityPeriodCreationType {
  ERP
  HRM
  MANUAL
}

enum RouteSpecificationProvidingSortField {
  CODE_RMS
}

enum SearchCriteriaOperator {
  EQ
  GT
  GTE
  IS_EMPTY
  IS_NOT_EMPTY
  LT
  LTE
  NE
}

"Статус корзины"
enum ServiceBasketStatus {
  CALCULATED
  FAIL_CALCULATION
  IN_CALCULATE
  NEW
}

enum ServiceFilterIsEmpty {
  OPERATIONS
}

"Тип объекта обслуживания"
enum ServiceObjectType {
  "Воздушное судно (ВС)"
  Aircraft
  "Рейс"
  Flight
}

enum ServiceStandardProvidingSortField {
  CODE_RMS
  ON_DEMAND
  SERVICE_STANDARD_NAME
}

enum ServiceStandardSearchMode {
  ALL
  USER_AVAILABLE
}

enum ServiceStandardSortField {
  codeRms
  deletedAt
  erpId
  name
  type
}

enum ServiceStandardType {
  COMMERCIAL
  TECHNOLOGICAL
}

"Статус услуги"
enum ServiceStatus {
  CANCELLED
  COMPLETED
  MANUAL_CANCELLED
  WAITING_EXECUTION
  WORKING
}

enum ShiftCreationType {
  HRM
  MANUAL
}

enum ShiftJournalIsEmptyFilter {
  ARRIVAL_DATE
  DEPARTURE_DATE
}

enum ShiftSearchMode {
  ALL
  USER_AVAILABLE
}

enum ShiftSortField {
  datePlanBegin
  datePlanEnd
  integrationId
}

"Статус смены согласно ee расписанию на текущий момент времени"
enum ShiftStatus {
  "Смена окончена"
  ENDED
  "Смена не началась, но запланирована"
  PLANNED
  "Смена началась"
  STARTED
}

"\"Тип смены, фактически код\\тип часа(ов) в смене\""
enum ShiftType {
  "5 - кормление ребенка. Берем для оценки длительности смены."
  BABY_FEEDING_TIME
  "6 - обед. Берем для оценки длительности смены."
  LUNCH_TIME
  "0 - для технических целей"
  NOT_USED
  "1 - рабочее время день. Берем для оценки длительности смены."
  WORKING_TIME_DAY
  "3 - рабочее время день. Берем для оценки длительности смены."
  WORKING_TIME_DAY_ADDITIONAL
  "2 - рабочее время ночь. Берем для оценки длительности смены."
  WORKING_TIME_NIGHT
  "4 - рабочее время ночь. Берем для оценки длительности смены."
  WORKING_TIME_NIGHT_ADDITIONAL
}

enum SignState {
  CREATED
  DISCARD
  SIGNED
}

enum SkillSpecificationSortField {
  code
  name
}

enum SortOrder {
  ASC
  DESC
}

enum SubscriptionEventType {
  CREATE
  DELETE
  UPDATE
}

enum TaskAssignmentConflictStatus {
  HAS_CONFLICT
  NO_CONFLICT
  UNDEFINED
}

"Как был назначен ресурс на задачу"
enum TaskEditorType {
  AUTOMATIC
  MANUAL
}

enum TaskIsEmptyFilter {
  RESOURCE
}

"Прибытие/убытие на место выполнения"
enum TaskPlaceExecutionType {
  ARRIVAL
  DEPARTURE
}

enum TaskSearchMode {
  ALL_TASKS
  USER_TRANSITIVE_AVAILABLE_TASKS
}

enum TaskSortField {
  operationScheduledStart
}

"Статус задачи"
enum TaskStatus {
  ASSIGNED
  CANCELLED
  CLOSED @deprecated(reason: "No longer supported")
  COMPLETED
  DECLINED
  DELETED
  NEW
  PAUSED @deprecated(reason: "No longer supported")
  PUBLISHED
  WAITING_EXECUTION
  WORKING
}

"Направление движения по жиненному циклу при изменении статуса задачи"
enum TaskStatusDirection {
  BACKWARDS
  FORWARDS
}

enum TaskTransferNormSortField {
  CODE_RMS
}

enum TechResourceBlockViewSortField {
  RESOURCE_TYPE
}

enum TimeType {
  ACT
  EST
  SCT
}

enum TypeOperatorAssociationScope {
  BUSINESS_RULES
  GENERIC_CONDITIONS
}

"Date (example: 2020-12-16)"
scalar Date

"DateTime (ISO8601, example: 2020-01-01T10:11:12+00:00)"
scalar DateTime

"Duration (ISO8601, example: P1DT1H)"
scalar Duration

scalar Long

input AirBridgeCreateInput {
  empLifeCycleDependency: Boolean! = true
  isPartOfComplexResource: Boolean! = false
  malfunction: Boolean! = false
  mobileIdent: String
  mobilityType: MobilityType!
  passengerDeckHeight: Int
  productionSiteName: String
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivisionId: ID!
  supportedAircraftTypes: [String]!
}

input AirBridgeUpdateInput {
  empLifeCycleDependency: Boolean
  isPartOfComplexResource: Boolean
  malfunction: Boolean
  mobileIdent: String
  mobilityType: MobilityType
  passengerDeckHeight: Int
  productionSiteName: String
  resourceNumber: String
  resourceNumberType: ResourceNumberType
  shortTitle: String
  subdivisionId: ID
  supportedAircraftTypes: [String]
}

input AirConditionerCreateInput {
  airTemperature: Int!
  empLifeCycleDependency: Boolean! = true
  isPartOfComplexResource: Boolean! = false
  malfunction: Boolean! = false
  mobileIdent: String
  mobilityType: MobilityType!
  productionSiteName: String
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivisionId: ID!
  supportedAircraftTypes: [String]
}

input AirConditionerUpdateInput {
  airTemperature: Int
  empLifeCycleDependency: Boolean
  isPartOfComplexResource: Boolean
  malfunction: Boolean
  mobileIdent: String
  mobilityType: MobilityType
  productionSiteName: String
  resourceNumber: String
  resourceNumberType: ResourceNumberType
  shortTitle: String
  subdivisionId: ID
}

input AirStartDeviceCreateInput {
  airVolume: Int!
  empLifeCycleDependency: Boolean! = true
  isPartOfComplexResource: Boolean! = false
  malfunction: Boolean! = false
  mobileIdent: String
  mobilityType: MobilityType!
  productionSiteName: String
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivisionId: ID!
  supportedAircraftTypes: [String]!
}

input AirStartDeviceUpdateInput {
  airVolume: Int
  empLifeCycleDependency: Boolean
  isPartOfComplexResource: Boolean
  malfunction: Boolean
  mobileIdent: String
  mobilityType: MobilityType
  productionSiteName: String
  resourceNumber: String
  resourceNumberType: ResourceNumberType
  shortTitle: String
  subdivisionId: ID
  supportedAircraftTypes: [String]
}

input AircraftCreateInput {
  GPU: String
  aircraftTypeCode: String
  aodbInternalId: String!
  comment: String
  internalStaircase: String
  lastUpdateDateTime: DateTime!
  maximumTakeoffWeight: Int
  noiseCategory: String
  owner: String
  packingMethod: String
  seatsQty: Int
  tailNumber: String!
}

input AircraftFilter {
  deleted: Boolean = false
  in: AircraftFilterInInput
  notIn: AircraftFilterInInput
}

input AircraftFilterInInput {
  aodbInternalIds: [String!]
}

input AircraftGetInput {
  id: ID
  tailNumber: String
}

input AircraftTugCreateInput {
  empLifeCycleDependency: Boolean! = true
  equipmentCompatibility: Boolean!
  isPartOfComplexResource: Boolean! = false
  malfunction: Boolean! = false
  mobileIdent: String
  mobilityType: MobilityType!
  productionSiteName: String
  pullingForceMax: Int
  pullingForceMin: Int
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivisionId: ID!
  supportedAircraftTypes: [String]!
  typeOfTractor: String!
}

input AircraftTugUpdateInput {
  empLifeCycleDependency: Boolean
  equipmentCompatibility: Boolean
  isPartOfComplexResource: Boolean
  malfunction: Boolean
  mobileIdent: String
  mobilityType: MobilityType
  productionSiteName: String
  pullingForceMax: Int
  pullingForceMin: Int
  resourceNumber: String
  resourceNumberType: ResourceNumberType
  shortTitle: String
  subdivisionId: ID
  supportedAircraftTypes: [String]
  typeOfTractor: String
}

input AircraftTypeCreateInput {
  aodbInternalId: String!
  aodbPeriodId: String!
  designGroup: String
  engineType: String
  height: Int
  iataCode: String
  icaoCode: String
  lastUpdateDateTime: DateTime!
  length: Int
  maximumTakeoffWeight: Int
  name: String!
  packingMethod: String
  seatCapacity: Int
  validFrom: DateTime
  validTo: DateTime
  wingspan: Int
}

input AircraftTypeFilter {
  deleted: Boolean = false
  in: AircraftTypeFilterInInput
  notIn: AircraftTypeFilterInInput
  validityPeriod: ValidityPeriodFilter
}

input AircraftTypeFilterInInput {
  aodbInternalIds: [String!]
  compositeKeys: [MasterDataPeriodCompositeKeyInput!]
}

input AircraftTypeUpdateInput {
  designGroup: String
  engineType: String
  height: Int
  iataCode: String
  icaoCode: String
  lastUpdateDateTime: DateTime
  length: Int
  maximumTakeoffWeight: Int
  name: String
  packingMethod: String
  seatCapacity: Int
  wingspan: Int
}

input AircraftUpdateInput {
  GPU: String
  aircraftTypeCode: String
  comment: String
  internalStaircase: String
  lastUpdateDateTime: DateTime
  maximumTakeoffWeight: Int
  noiseCategory: String
  owner: String
  packingMethod: String
  seatsQty: Int
  tailNumber: String
}

input AirlineCreateInput {
  aodbInternalId: String!
  aodbPeriodId: String!
  iataCode: String
  icaoCode: String
  lastUpdateDateTime: DateTime!
  name: String!
  registeredInCountryIsoCode: String
  validFrom: DateTime
  validTo: DateTime
}

input AirlineFilter {
  compositeKeys: [MasterDataPeriodCompositeKeyInput!]
  deleted: Boolean = false
  in: AirlineFilterInInput
  notIn: AirlineFilterInInput
  validityPeriod: ValidityPeriodFilter
}

input AirlineFilterInInput {
  aodbInternalIds: [String!]
}

input AirlineUpdateInput {
  iataCode: String
  icaoCode: String
  lastUpdateDateTime: DateTime
  name: String
  registeredInCountryIsoCode: String
}

input AirportCreateInput {
  aodbInternalId: String!
  aodbPeriodId: String!
  cityId: String
  iataCode: String
  icaoCode: String
  lastUpdateDateTime: DateTime!
  name: String
  validFrom: DateTime
  validTo: DateTime
}

input AirportFilter {
  compositeKeys: [MasterDataPeriodCompositeKeyInput!]
  deleted: Boolean = false
  in: AirportFilterInInput
  notIn: AirportFilterInInput
  validityPeriod: ValidityPeriodFilter
}

input AirportFilterInInput {
  aodbInternalIds: [String!]
}

input AirportUpdateInput {
  cityId: String
  iataCode: String
  icaoCode: String
  lastUpdateDateTime: DateTime
  name: String
}

input AmbuliftCreateInput {
  empLifeCycleDependency: Boolean! = true
  isPartOfComplexResource: Boolean! = false
  malfunction: Boolean! = false
  mobileIdent: String
  mobilityType: MobilityType!
  productionSiteName: String
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivisionId: ID!
  supportedAircraftTypes: [String]!
}

input AmbuliftUpdateInput {
  empLifeCycleDependency: Boolean
  isPartOfComplexResource: Boolean
  malfunction: Boolean
  mobileIdent: String
  mobilityType: MobilityType
  productionSiteName: String
  resourceNumber: String
  resourceNumberType: ResourceNumberType
  shortTitle: String
  subdivisionId: ID
  supportedAircraftTypes: [String]
}

input AodbMilestoneCreateInput {
  description: [LocalizedStringInput!]
  qualifier: String!
}

input AodbMilestoneCriteria {
  operator: SearchCriteriaOperator!
  qualifier: String!
  timeType: TimeType!
  value: DateTime
}

input AodbMilestoneUpdateInput {
  description: [LocalizedStringInput!]
  qualifier: String
}

input AodbResourceTypeInput {
  code: ID!
}

input AssignResourceToTaskManualInput {
  complexResourceId: ID
  performer: ResourceItemInput!
}

input AssociatedOperationSpecificationRuleInput {
  operationSpecificationId: String!
  plannedMomentType: PlannedMomentType!
}

input AvailableTaskStatusTransitionFilter {
  includeHidden: Boolean = false
}

input BaggageTractorCreateInput {
  empLifeCycleDependency: Boolean! = true
  isPartOfComplexResource: Boolean! = false
  malfunction: Boolean! = false
  mobileIdent: String
  mobilityType: MobilityType!
  productionSiteName: String
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivisionId: ID!
  supportedAircraftTypes: [String]
}

input BaggageTractorUpdateInput {
  empLifeCycleDependency: Boolean
  isPartOfComplexResource: Boolean
  malfunction: Boolean
  mobileIdent: String
  mobilityType: MobilityType
  productionSiteName: String
  resourceNumber: String
  resourceNumberType: ResourceNumberType
  shortTitle: String
  subdivisionId: ID
}

input BeltCreateInput {
  aodbInternalId: String!
  area: String
  lastUpdateDateTime: DateTime!
  name: String
}

input BeltFilter {
  deleted: Boolean = false
  in: BeltFilterInInput
  notIn: BeltFilterInInput
}

input BeltFilterInInput {
  aodbInternalIds: [String!]
}

input BeltGetInput {
  id: ID
  name: String
}

input BeltLoaderCreateInput {
  empLifeCycleDependency: Boolean! = true
  isPartOfComplexResource: Boolean! = false
  malfunction: Boolean! = false
  mobileIdent: String
  mobilityType: MobilityType!
  productionSiteName: String
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivisionId: ID!
}

input BeltLoaderUpdateInput {
  empLifeCycleDependency: Boolean
  isPartOfComplexResource: Boolean
  malfunction: Boolean
  mobileIdent: String
  mobilityType: MobilityType
  productionSiteName: String
  resourceNumber: String
  resourceNumberType: ResourceNumberType
  shortTitle: String
  subdivisionId: ID
}

input BeltUpdateInput {
  area: String
  lastUpdateDateTime: DateTime
  name: String
}

input BusinessRoleCreateInput {
  description: String
  name: String!
  resourceTypes: [ResourceType!]
}

input BusinessRoleFilter {
  deleted: Boolean = false
  in: BusinessRoleFilterInInput
  notIn: BusinessRoleFilterInInput
}

input BusinessRoleFilterInInput {
  names: [String!]
  resourceTypes: [ResourceType!]
}

input BusinessRoleSort {
  orderBy: SortOrder! = ASC
  sortBy: BusinessRoleSortField!
}

input BusinessRoleUpdateInput {
  description: String
  name: String
  resourceTypes: [ResourceType!]
}

input BusinessRuleInput {
  EmptyValueConditionInput: EmptyValueConditionInput
  EqualityBooleanConditionInput: EqualityBooleanConditionInput
  EqualityFloatConditionInput: EqualityFloatConditionInput
  EqualityIntConditionInput: EqualityIntConditionInput
  EqualityStringConditionInput: EqualityStringConditionInput
  GenericConditionInput: GenericConditionInput
}

input BusinessRuleProvidingCreateInput {
  name: String!
  serviceObjectType: ServiceObjectType!
}

input BusinessRuleProvidingFilter {
  in: BusinessRuleProvidingInFilter
  notIn: BusinessRuleProvidingInFilter
}

input BusinessRuleProvidingInFilter {
  conditionGroupIds: [ID!]
  name: [String!]
}

input BusinessRuleProvidingSort {
  orderBy: SortOrder! = ASC
  sortBy: BusinessRuleProvidingSortField!
}

input BusinessRuleProvidingUpdateInput {
  name: String
}

input CancelTaskInput {
  reasonForCancellation: String
}

input CarCreateInput {
  carriageOfBaggage: Boolean!
  carriageOfEmployees: Boolean!
  carriageOfPassengers: Boolean!
  empLifeCycleDependency: Boolean! = true
  escortOnTerritoryAirport: Boolean!
  isPartOfComplexResource: Boolean! = false
  malfunction: Boolean! = false
  mobileIdent: String
  mobilityType: MobilityType!
  passengerCapacity: Int!
  productionSiteName: String
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivisionId: ID!
  supportedAircraftTypes: [String]
}

input CarUpdateInput {
  carriageOfBaggage: Boolean
  carriageOfEmployees: Boolean
  carriageOfPassengers: Boolean
  empLifeCycleDependency: Boolean
  escortOnTerritoryAirport: Boolean
  isPartOfComplexResource: Boolean
  malfunction: Boolean
  mobileIdent: String
  mobilityType: MobilityType
  passengerCapacity: Int
  productionSiteName: String
  resourceNumber: String
  resourceNumberType: ResourceNumberType
  shortTitle: String
  subdivisionId: ID
}

input ChangeTaskStatusInput {
  forcibly: Boolean! = false
  reasonForCancellation: String
}

input ChangeTaskStatusManualInput {
  forcibly: Boolean = false
  nextStatus: TaskStatus!
  reasonForCancellation: String
}

input CheckInCounterCreateInput {
  aodbInternalId: String!
  lastUpdateDateTime: DateTime!
  name: String
  type: String
}

input CheckInCounterFilter {
  deleted: Boolean = false
  in: CheckInCounterFilterInInput
  notIn: CheckInCounterFilterInInput
}

input CheckInCounterFilterInInput {
  aodbInternalIds: [String!]
}

input CheckInCounterUpdateInput {
  lastUpdateDateTime: DateTime
  name: String
  type: String
}

input CityCreateInput {
  aodbInternalId: String!
  countryId: String!
  iataCode: String
  icaoCode: String
  lastUpdateDateTime: DateTime!
  latitude: Float
  longitude: Float
  name: String
}

input CityFilter {
  deleted: Boolean = false
  in: CityFilterInInput
  notIn: CityFilterInInput
}

input CityFilterInInput {
  aodbInternalIds: [String!]
}

input CityUpdateInput {
  iataCode: String
  icaoCode: String
  lastUpdateDateTime: DateTime
  latitude: Float
  longitude: Float
  name: String
}

input CommentCreateInput {
  authorId: ID
  text: String!
}

input CommentFilter {
  operationId: String
  operationServiceId: String
}

input CommentUpdateInput {
  text: String
}

input ComparableFloatConditionInput {
  object: ObjectPropertyReferenceInput!
  operator: ComparableOperator!
  value: Float!
}

input ComparableIntConditionInput {
  object: ObjectPropertyReferenceInput!
  operator: ComparableOperator!
  value: Int!
}

input ComplexResourceAutomaticCreateInput {
  employeeId: ID!
  name: String!
  resourceItemInput: ResourceItemInput!
  validityPeriodFact: OptionalDateTimePeriodInput
  validityPeriodPlan: OptionalDateTimePeriodInput!
  waybillId: ID!
}

input ComplexResourceAutomaticUpdateInput {
  validityPeriodPlan: OptionalDateTimePeriodInput
}

"Фильтр комплексных ресурсов"
input ComplexResourceFilter {
  deleted: Boolean = false
  in: ComplexResourceFilterInInput
  notIn: ComplexResourceFilterInInput
  validityPeriodFact: [DateTimeRangeCriteria!]
  validityPeriodPlan: [DateTimeRangeCriteria!]
}

input ComplexResourceFilterInInput {
  employeeIds: [ID!]
  resourceIds: [ID!]
  resourceTypes: [ResourceType!]
  waybillIds: [ID!]
}

input ComplexResourceManualCreateInput {
  employeeId: ID!
  name: String!
  resourceItemInput: ResourceItemInput!
  shiftId: ID!
}

input ConditionGroupCreateInput {
  conditionInputs: [ConditionInput!]
  name: String!
  serviceObjectType: ServiceObjectType!
}

input ConditionGroupFilter {
  in: ConditionGroupFilterInInput
  notIn: ConditionGroupFilterInInput
}

input ConditionGroupFilterInInput {
  id: [ID!]
  name: [String!]
}

input ConditionGroupSort {
  orderBy: SortOrder! = ASC
  sortBy: ConditionGroupSortField!
}

input ConditionGroupUpdateInput {
  name: String
}

input ConditionInput {
  ComparableFloatConditionInput: ComparableFloatConditionInput
  ComparableIntConditionInput: ComparableIntConditionInput
  EmptyValueConditionInput: EmptyValueConditionInput
  EqualityBooleanConditionInput: EqualityBooleanConditionInput
  EqualityFloatConditionInput: EqualityFloatConditionInput
  EqualityIntConditionInput: EqualityIntConditionInput
  EqualityStringConditionInput: EqualityStringConditionInput
  GenericConditionInput: GenericConditionInput
  HasOfIntConditionInput: HasOfIntConditionInput
  HasOfStringConditionInput: HasOfStringConditionInput
  InIntConditionInput: InIntConditionInput
  InStringConditionInput: InStringConditionInput
  ObjectComparisonConditionInput: ObjectComparisonConditionInput
}

input ConsumableResourceCreateInput {
  description: String
  name: String!
}

input ConsumableResourceFilter {
  deleted: Boolean = false
}

input ConsumableResourcePeriodInput {
  finish: DateTime
  start: DateTime
}

input ConsumableResourcePeriodValueInput {
  value: ConsumableResourcePeriodInput
}

input ConsumableResourceStringValueInput {
  value: String
}

input ConsumableResourceTypeCreateInput {
  description: String!
  name: String!
  resourceId: String!
  unitId: String!
}

input ConsumableResourceTypeFilter {
  deleted: Boolean = false
  name: String
  resourceId: String
  resourceName: String
}

input ConsumableResourceTypeUpdateInput {
  description: String
}

input ConsumableResourceUpdateInput {
  description: String
  name: String
}

input ConsumableResourceValueInput {
  ConsumableResourcePeriodValueInput: ConsumableResourcePeriodValueInput
  ConsumableResourceStringValueInput: ConsumableResourceStringValueInput
}

input ContainerLoaderCreateInput {
  bearingCapacity: Int!
  empLifeCycleDependency: Boolean! = true
  isPartOfComplexResource: Boolean! = false
  malfunction: Boolean! = false
  mobileIdent: String
  mobilityType: MobilityType!
  productionSiteName: String
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivisionId: ID!
  supportedAircraftTypes: [String]!
}

input ContainerLoaderUpdateInput {
  bearingCapacity: Int
  empLifeCycleDependency: Boolean
  isPartOfComplexResource: Boolean
  malfunction: Boolean
  mobileIdent: String
  mobilityType: MobilityType
  productionSiteName: String
  resourceNumber: String
  resourceNumberType: ResourceNumberType
  shortTitle: String
  subdivisionId: ID
  supportedAircraftTypes: [String]
}

input ContractCreateInput {
  customer: ContractCustomerInput
  validFrom: Date
  validTo: Date
}

input ContractCustomerInput {
  customerId: ID!
  customerType: CustomerType!
}

input ContractUpdateInput {
  customer: ContractCustomerInput
  validFrom: Date
  validTo: Date
}

input CountryCreateInput {
  aodbInternalId: String!
  isoCode: String!
  lastUpdateDateTime: DateTime!
  name: String
}

input CountryFilter {
  deleted: Boolean = false
  in: CountryFilterInInput
  notIn: CountryFilterInInput
}

input CountryFilterInInput {
  aodbInternalIds: [String!]
}

input CountryUpdateInput {
  lastUpdateDateTime: DateTime
  name: String
}

input DateTimeRangeCriteria {
  period: OptionalDateTimePeriodInput!
  type: DateTimeRangeCriteriaType!
}

input DateTimeRangeValueInput {
  "If null - used current system date"
  explicitOrNow: DateTime
  "Offset from date"
  from: Duration!
  "Offset to date"
  to: Duration!
}

input DateTimeValueInput {
  explicit: DateTime
  fromNow: Duration
}

input DecisionTreeCreateInput {
  tree: String!
  type: String!
  validFrom: Date
  validTo: Date
}

input DecisionTreeFilter {
  type: String
}

input DecisionTreeUpdateInput {
  tree: String
  type: String
  validFrom: Date
  validTo: Date
}

input DeicingCarCreateInput {
  empLifeCycleDependency: Boolean! = true
  isPartOfComplexResource: Boolean! = false
  malfunction: Boolean! = false
  mixingSystem: String
  mobileIdent: String
  mobilityType: MobilityType!
  productionSiteName: String
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivisionId: ID!
  supportedAircraftTypes: [String]
  tankVolume: Int
  tankVolumeTypeFour: Int
  tankVolumeTypeOne: Int
}

input DeicingCarUpdateInput {
  empLifeCycleDependency: Boolean
  isPartOfComplexResource: Boolean
  malfunction: Boolean
  mixingSystem: String
  mobileIdent: String
  mobilityType: MobilityType
  productionSiteName: String
  resourceNumber: String
  resourceNumberType: ResourceNumberType
  shortTitle: String
  subdivisionId: ID
  tankVolume: Int
  tankVolumeTypeFour: Int
  tankVolumeTypeOne: Int
}

input DelayCodeCreateInput {
  alphanumericCode: String
  aodbInternalId: String!
  description: String
  lastUpdateDateTime: DateTime!
  numericCode: String!
  summary: String
}

input DelayCodeFilter {
  deleted: Boolean = false
  in: DelayCodeFilterInInput
  notIn: DelayCodeFilterInInput
}

input DelayCodeFilterInInput {
  aodbInternalIds: [String!]
}

input DelayCodeUpdateInput {
  alphanumericCode: String
  description: String
  lastUpdateDateTime: DateTime
  numericCode: String
  summary: String
}

input EmployeeArrivedToShiftInput {
  arrivalDatetime: DateTime
}

input EmployeeAvailabilityFilter {
  availableFrom: DateTime!
  availableTo: DateTime!
}

input EmployeeBlockViewSort {
  employeeViewSort: [EmployeeSort!]
  groupViewSort: [EmployeeGroupValidityPeriodSort!]
}

input EmployeeCreateInput {
  firstName: String!
  integrationId: String!
  isPartOfComplexResource: Boolean! = false
  lastName: String!
  middleName: String!
  mobileIdent: String
  number: String!
  positionId: String!
  productionSiteName: String
  resourceGroupDisplayConfig: EmployeeResourceGroupDisplayConfig! = EMPLOYEE_TECH
  subdivisionId: String!
  subdivisionTripId: String
  validityPeriod: OptionalDateTimePeriodInput!
}

input EmployeeDepartedFromShiftInput {
  departureDatetime: DateTime
}

"Фильтр по сотрудникам"
input EmployeeFilter {
  arrivalDateFrom: DateTime
  availability: EmployeeAvailabilityFilter
  currentShiftStatus: EmployeeShiftStatus
  deleted: Boolean = false
  departureDateTo: DateTime
  firstName: String
  hasBusinessRole: Boolean
  in: EmployeeFilterInInput
  lastName: String
  malfunction: Boolean
  malfunctionedWithTasks: TaskFilter
  middleName: String
  notIn: EmployeeFilterInInput
  positionId: ID
  searchMode: EmployeeSearchMode! = ALL
  shiftDatePlanFrom: DateTime
  shiftDatePlanTo: DateTime
  shiftFilterProfileId: ID
  subdivisionId: ID
  subdivisionTripId: ID
  taskFilterProfileId: ID
  validityPeriodCriteria: [DateTimeRangeCriteria!]
}

input EmployeeFilterInInput {
  businessRoleId: [ID!]
  id: [ID!]
  integrationId: [String!]
  number: [String!]
  subdivisionId: [ID!]
}

input EmployeeGroupCreateInput {
  businessRoleIds: [ID!]
  name: String!
  subdivisionIds: [ID!]!
}

input EmployeeGroupFilter {
  deleted: Boolean = false
  in: EmployeeGroupFilterInInput
  isEmpty: [EmployeeGroupFilterIsEmpty!]
  isNotEmpty: [EmployeeGroupFilterIsEmpty!]
  name: String
  notIn: EmployeeGroupFilterInInput
  shiftFilterProfileId: ID
}

input EmployeeGroupFilterInInput {
  businessRoleIds: [ID!]
  ids: [ID!]
  subdivisionIds: [ID!]
}

input EmployeeGroupSort {
  orderBy: SortOrder! = ASC
  sortBy: EmployeeGroupSortField!
}

input EmployeeGroupUpdateInput {
  businessRoleIds: [ID!]
  subdivisionIds: [ID!]
}

input EmployeeGroupValidityPeriodFilter {
  validityPeriodCriteria: [DateTimeRangeCriteria!]
}

input EmployeeGroupValidityPeriodSort {
  orderBy: SortOrder! = ASC
  sortBy: EmployeeGroupValidityPeriodSortField!
}

input EmployeeGroupViewInput {
  employeeGroupId: ID
  validityPeriod: OptionalDateTimePeriodInput!
}

input EmployeeSkillDataFilter {
  validAt: DateTime
}

input EmployeeSkillInput {
  skillSpecificationId: String!
  validFrom: DateTime
  validTo: DateTime
}

input EmployeeSort {
  orderBy: SortOrder! = ASC
  sortBy: EmployeeSortField!
}

input EmployeeUpdateInput {
  firstName: String
  integrationId: String
  isPartOfComplexResource: Boolean
  lastName: String
  malfunction: Boolean
  middleName: String
  mobileIdent: String
  number: String
  positionId: String
  productionSiteName: String
  resourceGroupDisplayConfig: EmployeeResourceGroupDisplayConfig
  subdivisionId: String
  subdivisionTripId: String
  validityPeriod: OptionalDateTimePeriodInput
}

input EmptyValueConditionInput {
  object: ObjectPropertyReferenceInput!
  operator: EmptyValueOperator!
}

input EqualityBooleanConditionInput {
  object: ObjectPropertyReferenceInput!
  operator: EqualityOperator!
  value: Boolean!
}

input EqualityFloatConditionInput {
  object: ObjectPropertyReferenceInput!
  operator: EqualityOperator!
  value: Float!
}

input EqualityIntConditionInput {
  object: ObjectPropertyReferenceInput!
  operator: EqualityOperator!
  value: Int!
}

input EqualityStringConditionInput {
  object: ObjectPropertyReferenceInput!
  operator: EqualityOperator!
  value: String!
}

input ErpResourceCreateInput {
  availablePeriodEnd: DateTime
  availablePeriodStart: DateTime
  erpInternalId: String!
  fleetNumber: String
  invNumber: String
  mileage: Int
  name: String
  productionYear: Int
  underWarranty: Boolean
}

input ErpResourceFilter {
  deleted: Boolean = false
  fleetNumber: String
  in: ErpResourceFilterInInput
  notIn: ErpResourceFilterInInput
}

input ErpResourceFilterInInput {
  erpInternalIds: [String!]
  ids: [ID!]
}

input ErpResourceUnavailabilityPeriodSaveInput {
  unavailablePeriod: MandatoryDateTimePeriodInput
  wayBillNum: String
}

input ErpResourceUpdateInput {
  availablePeriodEnd: DateTime
  availablePeriodStart: DateTime
  fleetNumber: String
  invNumber: String
  mileage: Int
  name: String
  productionYear: Int
  underWarranty: Boolean
}

input ExtendedParamStringArrayValueInput {
  value: [String]!
}

input ExtendedParamStringValueInput {
  value: String
}

input ExtendedParamValueInput {
  stringArrayInput: ExtendedParamStringArrayValueInput
  stringInput: ExtendedParamStringValueInput
}

input ExtinguisherCreateInput {
  empLifeCycleDependency: Boolean! = true
  isPartOfComplexResource: Boolean! = false
  malfunction: Boolean! = false
  mobileIdent: String
  mobilityType: MobilityType!
  productionSiteName: String
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivisionId: ID!
  supportedAircraftTypes: [String]!
  validCheckPeriod: String
}

input ExtinguisherUpdateInput {
  empLifeCycleDependency: Boolean
  isPartOfComplexResource: Boolean
  malfunction: Boolean
  mobileIdent: String
  mobilityType: MobilityType
  productionSiteName: String
  resourceNumber: String
  resourceNumberType: ResourceNumberType
  shortTitle: String
  subdivisionId: ID
  supportedAircraftTypes: [String]
  validCheckPeriod: String
}

input FileRecordFilter {
  createdRange: TimeRange
  fileName: String
  id: ID
  in: FileRecordFilterInInput
  minioObjectName: String
  notIn: FileRecordFilterInInput
  sizeRange: SizeRange
  status: FileRecordStatus = STORED
}

input FileRecordFilterInInput {
  fileNames: [String!]
  ids: [ID!]
  minioObjectNames: [String!]
  statuses: [FileRecordStatus!]
}

input FileUploadInput {
  comment: String
  contentAsBase64: String!
  fileRecordId: String
  metadata: [InputMetadataParameter!]
  mimeType: String
  originalFileName: String!
  saveInMinioAs: String
}

input FlightAlertInput {
  category: String!
  code: String!
  severity: String!
}

input FlightCreateInput {
  aidxStatus: String
  aircraftAirlineId: ID
  aircraftInput: AircraftGetInput
  aircraftTerminal: String
  aircraftTypeId: ID
  airlineId: ID
  alertInputs: [FlightAlertInput!]
  aodbInternalId: String!
  aodbInternalStatus: String
  arrivalAirportId: ID
  beltInput: BeltGetInput
  beltInputs: [BeltGetInput!]
  cabinCrewNumber: Int
  crewNumber: Int
  delayTime: Int
  departureAirportId: ID
  flightNumber: String!
  flightOnParkingInputs: [FlightOnParkingCreateInput!]
  gateInputs: [GateGetInput!]
  handlingAgentInputs: [FlightHandlingAgentInput!]
  isReadyParkingSpot: Boolean
  lastUpdateDateTime: DateTime
  linkedFlightInput: FlightGetInput
  loadInfoInputs: [FlightLoadInfoInput!]
  numId: ID!
  operationalTimeInputs: [FlightOperationalTimeInput!]
  originDate: DateTime!
  parkingSpotInput: ParkingSpotGetInput
  passengerCountInfoInputs: [FlightPassengerInfoInput!]
  readyForBilling: FlightBillingStatus
  runway: String
  serviceTypeInput: FlightServiceTypeGetInput
  shute: String
  specialEmphasisInput: SpecialEmphasisGetInput
  trafficType: FlightTrafficType
}

input FlightFilter {
  actualArrivalDatetimeFrom: DateTime
  actualArrivalDatetimeTo: DateTime
  actualDepartureDatetimeFrom: DateTime
  actualDepartureDatetimeTo: DateTime
  aodbMilestoneCriteria: [AodbMilestoneCriteria!]
  deleted: Boolean = false
  estimatedArrivalDatetimeFrom: DateTime
  estimatedArrivalDatetimeTo: DateTime
  estimatedDepartureDatetimeFrom: DateTime
  estimatedDepartureDatetimeTo: DateTime
  flightNumber: String
  flightSpecification: FlightSpecificationFilter
  in: FlightFilterInInput
  isEmpty: [FlightFilterIsEmpty!]
  isNotEmpty: [FlightFilterIsEmpty!]
  notIn: FlightFilterInInput
  operationalTimeCriteria: [FlightOperationalTimeCriteria!]
  parkingSpotFilter: ParkingSpotFilter
  queryFrom: DateTime
  queryTo: DateTime
}

input FlightFilterInInput {
  aidxStatus: [String!]
  airlineIataCode: [String]
  aodbInternalIds: [ID!]
  aodbInternalStatus: [String]
  ids: [ID!]
  numIds: [ID!]
  readyForBilling: [FlightBillingStatus]
}

input FlightGetInput {
  id: ID
  numId: String
}

input FlightHandlingAgentInput {
  category: String!
  name: String!
}

input FlightLoadInfoInput {
  loadType: String!
  qualifier: String!
  value: Int!
}

input FlightOnParkingCreateInput {
  actualEndDatetime: DateTime
  actualStartDatetime: DateTime
  parkingSpotGetInput: ParkingSpotGetInput!
  scheduledEndDatetime: DateTime
  scheduledStartDatetime: DateTime
}

input FlightOnParkingUpdateInput {
  actualEndDatetime: DateTime
  actualStartDatetime: DateTime
  parkingSpotGetInput: ParkingSpotGetInput!
  scheduledEndDatetime: DateTime
  scheduledStartDatetime: DateTime
}

input FlightOperationalTimeCriteria {
  operator: SearchCriteriaOperator!
  qualifier: FlightOperationalTimeQualifier!
  timeType: TimeType!
  value: DateTimeValueInput
}

input FlightOperationalTimeInput {
  qualifier: String!
  type: String!
  value: DateTime!
}

input FlightPassengerAdditionalCreateInput {
  additionalCategories: [PassengerCategoryAdditional!]
  category: PassengerCategory!
  name: String!
}

input FlightPassengerAdditionalUpdateInput {
  additionalCategories: [PassengerCategoryAdditional!]
  category: PassengerCategory
  name: String
}

input FlightPassengerInfoInput {
  cabinClass: String!
  passengerType: String!
  qualifier: String!
  value: Int!
}

input FlightServiceManualCreateInput {
  aircraftTypeIds: [ID!]
  airlineIds: [ID!]
  fileRecord: FileUploadInput!
  name: String!
  positionIds: [ID!]
  serviceObjectType: ServiceObjectType!
  subdivisionIds: [ID!]
}

input FlightServiceManualFilter {
  in: FlightServiceManualInFilter
  name: String
  notIn: FlightServiceManualInFilter
  taskId: ID
}

input FlightServiceManualInFilter {
  aircraftTypeIds: [ID!]
  airlineIds: [ID!]
  positionIds: [ID!]
  subdivisionIds: [ID!]
}

input FlightServiceManualSort {
  orderBy: SortOrder! = ASC
  sortBy: FlightServiceManualSortField!
}

input FlightServiceManualUpdateInput {
  aircraftTypeIds: [ID!]
  airlineIds: [ID!]
  fileRecord: FileUploadInput
  name: String
  positionIds: [ID!]
  subdivisionIds: [ID!]
}

input FlightServiceTypeCreateInput {
  aodbInternalId: String!
  category: String!
  code: String!
  description: String
  lastUpdateDateTime: DateTime!
  operations: [String!]!
}

input FlightServiceTypeFilter {
  deleted: Boolean = false
  in: FlightServiceTypeFilterInInput
  notIn: FlightServiceTypeFilterInInput
}

input FlightServiceTypeFilterInInput {
  aodbInternalIds: [String!]
}

input FlightServiceTypeGetInput {
  code: String
  id: ID
}

input FlightServiceTypeUpdateInput {
  category: String
  code: String
  description: String
  lastUpdateDateTime: DateTime
  operations: [String!]
}

input FlightSpecificationFilter {
  type: FlightSpecificationType
}

input FlightSubscriptionFilter {
  flightsFilter: FlightFilter
}

input FlightUpdateInput {
  aidxStatus: String
  aircraftAirlineId: ID
  aircraftInput: AircraftGetInput
  aircraftTerminal: String
  aircraftTypeId: ID
  airlineId: ID
  alertInputs: [FlightAlertInput!]
  aodbInternalStatus: String
  arrivalAirportId: ID
  beltInput: BeltGetInput
  beltInputs: [BeltGetInput!]
  cabinCrewNumber: Int
  crewNumber: Int
  delayTime: Int
  departureAirportId: ID
  flightNumber: String
  flightOnParkingInputs: [FlightOnParkingUpdateInput!]
  gateInputs: [GateGetInput!]
  handlingAgentInputs: [FlightHandlingAgentInput!]
  invoiceId: ID
  isReadyParkingSpot: Boolean
  lastUpdateDateTime: DateTime
  linkedFlightInput: FlightGetInput
  loadInfoInputs: [FlightLoadInfoInput!]
  numId: ID
  operationalTimeInputs: [FlightOperationalTimeInput!]
  originDate: DateTime
  parkingSpotInput: ParkingSpotGetInput
  passengerCountInfoInputs: [FlightPassengerInfoInput!]
  readyForBilling: FlightBillingStatus
  runway: String
  serviceTypeInput: FlightServiceTypeGetInput
  shute: String
  specialEmphasisInput: SpecialEmphasisGetInput
  trafficType: FlightTrafficType
}

input FollowMeCarCreateInput {
  empLifeCycleDependency: Boolean! = true
  isPartOfComplexResource: Boolean! = false
  malfunction: Boolean! = false
  mobileIdent: String
  mobilityType: MobilityType!
  nameUnitTechnicians: String
  productionSiteName: String
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivisionId: ID!
}

input FollowMeCarUpdateInput {
  empLifeCycleDependency: Boolean
  isPartOfComplexResource: Boolean
  malfunction: Boolean
  mobileIdent: String
  mobilityType: MobilityType
  nameUnitTechnicians: String
  productionSiteName: String
  resourceNumber: String
  resourceNumberType: ResourceNumberType
  shortTitle: String
  subdivisionId: ID
}

input GPUCreateInput {
  alternatingCurrent: Int!
  directCurrent: Int!
  empLifeCycleDependency: Boolean! = true
  isPartOfComplexResource: Boolean! = false
  malfunction: Boolean! = false
  mobileIdent: String
  mobilityType: MobilityType!
  productionSiteName: String
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivisionId: ID!
  supportedAircraftTypes: [String]!
}

input GPUUpdateInput {
  alternatingCurrent: Int
  directCurrent: Int
  empLifeCycleDependency: Boolean
  isPartOfComplexResource: Boolean
  malfunction: Boolean
  mobileIdent: String
  mobilityType: MobilityType
  productionSiteName: String
  resourceNumber: String
  resourceNumberType: ResourceNumberType
  shortTitle: String
  subdivisionId: ID
  supportedAircraftTypes: [String]
}

input GasRefuellerCreateInput {
  empLifeCycleDependency: Boolean! = true
  isPartOfComplexResource: Boolean! = false
  malfunction: Boolean! = false
  mobileIdent: String
  mobilityType: MobilityType!
  productionSiteName: String
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivisionId: ID!
  supportedAircraftTypes: [String]
  typeGas: String!
}

input GasRefuellerUpdateInput {
  empLifeCycleDependency: Boolean
  isPartOfComplexResource: Boolean
  malfunction: Boolean
  mobileIdent: String
  mobilityType: MobilityType
  productionSiteName: String
  resourceNumber: String
  resourceNumberType: ResourceNumberType
  shortTitle: String
  subdivisionId: ID
  typeGas: String
}

input GateCreateInput {
  allowedDirection: String
  aodbInternalId: String!
  arrivalCapacity: String
  arrivalSecurityLevels: [String]!
  busRequired: Boolean
  customCheck: String
  departureCapacity: String
  departureSecurityLevels: [String]!
  lastUpdateDateTime: DateTime!
  loungeAvailable: Boolean
  name: String!
  passportCheck: String
  securityCheck: String
  telephone: String
  terminal: String
}

input GateFilter {
  deleted: Boolean
  in: GateFilterInInput
  notIn: GateFilterInInput
}

input GateFilterInInput {
  aodbInternalIds: [String!]
}

input GateGetInput {
  id: ID
  name: String
}

input GateUpdateInput {
  allowedDirection: String
  arrivalCapacity: String
  arrivalSecurityLevels: [String]
  busRequired: Boolean
  customCheck: String
  departureCapacity: String
  departureSecurityLevels: [String]
  lastUpdateDateTime: DateTime
  loungeAvailable: Boolean
  name: String
  passportCheck: String
  securityCheck: String
  telephone: String
  terminal: String
}

input GenericConditionInput {
  object: ObjectPropertyReferenceInput!
  operator: Operator!
  value: GenericConditionValueInput!
}

input GenericConditionValueInput {
  valueBoolean: Boolean
  valueFloat: Float
  valueInt: Int
  valueIntArray: [Int!]
  valueObjectPropertyReference: ObjectPropertyReferenceInput
  valueString: String
  valueStringArray: [String!]
}

input HasOfIntConditionInput {
  object: ObjectPropertyReferenceInput!
  operator: HasOfOperator!
  value: [Int!]!
}

input HasOfStringConditionInput {
  object: ObjectPropertyReferenceInput!
  operator: HasOfOperator!
  value: [String!]!
}

input HeaterCarCreateInput {
  airTemperature: Int!
  empLifeCycleDependency: Boolean! = true
  isPartOfComplexResource: Boolean! = false
  malfunction: Boolean! = false
  mobileIdent: String
  mobilityType: MobilityType!
  productionSiteName: String
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivisionId: ID!
  supportedAircraftTypes: [String]
}

input HeaterCarUpdateInput {
  airTemperature: Int
  empLifeCycleDependency: Boolean
  isPartOfComplexResource: Boolean
  malfunction: Boolean
  mobileIdent: String
  mobilityType: MobilityType
  productionSiteName: String
  resourceNumber: String
  resourceNumberType: ResourceNumberType
  shortTitle: String
  subdivisionId: ID
}

input HeaterCreateInput {
  airTemperature: Int!
  empLifeCycleDependency: Boolean! = true
  heatingPrinciple: HeatingPrinciple!
  isPartOfComplexResource: Boolean! = false
  malfunction: Boolean! = false
  mobileIdent: String
  mobilityType: MobilityType!
  productionSiteName: String
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivisionId: ID!
  supportedAircraftTypes: [String]
}

input HeaterUpdateInput {
  airTemperature: Int
  empLifeCycleDependency: Boolean
  heatingPrinciple: HeatingPrinciple
  isPartOfComplexResource: Boolean
  malfunction: Boolean
  mobileIdent: String
  mobilityType: MobilityType
  productionSiteName: String
  resourceNumber: String
  resourceNumberType: ResourceNumberType
  shortTitle: String
  subdivisionId: ID
}

input InIntConditionInput {
  object: ObjectPropertyReferenceInput!
  operator: InOperator!
  value: [Int!]!
}

input InStringConditionInput {
  object: ObjectPropertyReferenceInput!
  operator: InOperator!
  value: [String!]!
}

input InputMetadataParameter {
  name: String!
  value: String!
}

input InvoiceCreateInput {
  flightId: ID!
}

input InvoiceEmailInput {
  copyTo: [String!]
  invoiceId: ID!
  subject: String
  to: [String!]
}

input InvoiceEmailRequestFilter {
  id: ID
  in: InvoiceEmailRequestFilterIn
  invoiceId: ID
  notIn: InvoiceEmailRequestFilterIn
}

input InvoiceEmailRequestFilterIn {
  idIn: [ID!]
  invoiceIdIn: [ID!]
}

input InvoiceFilter {
  flightId: ID
  id: ID
  in: InvoiceFilterInInput
  notIn: InvoiceFilterInInput
  taskId: ID
}

input InvoiceFilterInInput {
  flightIds: [ID!]
  ids: [ID!]
  taskIds: [ID!]
}

input InvoiceUpdateInput {
  comment: String
}

input ItemResourceAssignRequest {
  employeeId: String!
  resourceTypes: [ResourceType!]
  subdivisions: [String!]
}

input LeaveResourceLocationInput {
  end: DateTime
}

input LinkedFlightFilter {
  arrivalFilter: FlightFilter
  commonFilter: FlightFilter
  departureFilter: FlightFilter
  estimatedDatetimeFrom: DateTime
  estimatedDatetimeTo: DateTime
  needLinkedFlight: Boolean! = false
}

input LocalPlaceFilter {
  deleted: Boolean = false
  in: LocalPlaceInFilter
  notIn: LocalPlaceInFilter
  objectLocationFilter: ObjectLocationFilter
}

input LocalPlaceInFilter {
  codes: [ID!]
  ids: [ID!]
  types: [LocalPlaceType!]
}

input LocaleSpecificationInput {
  locale: String
  predefinedLocale: PredefinedLocaleType
}

input LocalizedStringInput {
  localeSpecification: LocaleSpecificationInput
  value: String
}

input LocationCreateInput {
  description: [LocalizedStringInput!]
  object: ObjectPropertyReferenceInput!
}

input LocationFilter {
  deleted: Boolean = false
}

input LocationUpdateInput {
  description: [LocalizedStringInput!]
  object: ObjectPropertyReferenceInput
}

input MandatoryDateTimePeriodInput {
  from: DateTime!
  to: DateTime!
}

input MasterDataPeriodCompositeKeyInput {
  iataCode: String
  icaoCode: String
  name: String
}

input MathDictionaryCreateInput {
  dictionary: String!
  type: String!
  validFrom: Date
  validTo: Date
}

input MathDictionaryFilter {
  type: String
}

input MathDictionaryUpdateInput {
  dictionary: String
  type: String
  validFrom: Date
  validTo: Date
}

input ObjectComparisonConditionInput {
  object: ObjectPropertyReferenceInput!
  operator: ObjectComparisonOperator!
  value: ObjectPropertyReferenceInput!
}

input ObjectLocationFilter {
  in: ObjectLocationInFilter
  notIn: ObjectLocationInFilter
}

input ObjectLocationInFilter {
  beltIds: [ID!]
  checkInCounterIds: [ID!]
  gateIds: [ID!]
  parkingSpotIds: [ID!]
}

"Одноименный input для типа ObjectPropertyReference"
input ObjectPropertyReferenceInput {
  "Тип или имя объекта (например 'Flight')"
  objectName: ObjectName!
  "Путь к свойству объекта (например 'aircraft.aircraftType.iataCode')"
  propertyName: String!
  "Тип свойства объекта"
  propertyType: ObjectPropertyType!
}

input OperationAodbMilestoneAssociationInput {
  aodbMilestoneId: ID!
  eventType: OperationAodbMilestoneAssociationEventType!
  timeType: TimeType!
}

input OperationCreateInput {
  actualEnd: DateTime
  actualStart: DateTime
  "Массив ID OperationResourceSlot"
  operationResourceSlotIds: [String]!
  operationSpecificationId: String!
  "Маршрут"
  route: OperationRouteInput
  scheduledEnd: DateTime!
  scheduledStart: DateTime!
  serviceId: String!
  serviceObject: OperationServiceObjectInput!
  serviceObjectDetails: OperationServiceObjectDetailsInput
}

input OperationEndInput {
  actualEnd: DateTime
}

input OperationFilter {
  in: OperationFilterInInput
  notIn: OperationFilterInInput
  operationSpecificationId: String
  queryFrom: DateTime
  queryTo: DateTime
  serviceId: String
  serviceObject: OperationServiceObjectFilter
}

input OperationFilterInInput {
  serviceIds: [ID!]
  statuses: [OperationStatus!]
}

input OperationFlightDetailsInput {
  flightDirectionType: FlightDirectionType
}

input OperationGroupResourceSpecificationCreateInput {
  operationSpecificationGroupId: String!
  resourceQuantityFormula: String!
  resourceType: ResourceType!
}

input OperationGroupResourceSpecificationFilter {
  in: OperationGroupResourceSpecificationFilterInInput
  notIn: OperationGroupResourceSpecificationFilterInInput
}

input OperationGroupResourceSpecificationFilterInInput {
  conditionGroupIds: [ID!]
  operationSpecificationGroupIds: [ID!]
}

input OperationGroupResourceSpecificationSort {
  orderBy: SortOrder! = ASC
  sortBy: OperationGroupResourceSpecificationSortField!
}

input OperationGroupResourceSpecificationUpdateInput {
  resourceQuantityFormula: String
}

input OperationResourceSlotFilter {
  createType: OperationResourceSlotCreateType
}

input OperationResourceSlotUpdateInput {
  actualArrivalToPlaceExecution: DateTime
  actualDepartureToPlaceExecution: DateTime
  operationResourceSpecificationId: ID!
  scheduledArrivalToPlaceExecution: DateTime
  scheduledDepartureToPlaceExecution: DateTime
}

input OperationResourceSlotsCreateInput {
  actualArrivalToPlaceExecution: DateTime
  actualDepartureToPlaceExecution: DateTime
  operationResourceSpecificationCommonIds: [ID!]
  operationResourceSpecificationId: ID!
  quantity: Int!
  scheduledArrivalToPlaceExecution: DateTime
  scheduledDepartureToPlaceExecution: DateTime
}

input OperationResourceSpecificationCommonCreateInput {
  operationSpecificationId: ID!
  resourceType: ResourceType!
}

input OperationResourceSpecificationCommonFilter {
  in: OperationResourceSpecificationCommonInFilter
  notIn: OperationResourceSpecificationCommonInFilter
}

input OperationResourceSpecificationCommonInFilter {
  codesRms: [String!]
  conditionGroupIds: [ID!]
  operationSpecificationIds: [ID!]
  resourceTypes: [ResourceType!]
}

input OperationResourceSpecificationCommonSort {
  orderBy: SortOrder! = ASC
  sortBy: OperationResourceSpecificationCommonSortField!
}

input OperationResourceSpecificationCommonUpdateInput {
  operationSpecificationId: ID
}

input OperationResourceSpecificationCreateInput {
  operationSpecificationId: String!
  resourceQuantityFormula: String!
  resourceType: ResourceType!
}

input OperationResourceSpecificationFilter {
  in: OperationResourceSpecificationFilterInInput
  notIn: OperationResourceSpecificationFilterInInput
  operationSpecificationId: String
}

input OperationResourceSpecificationFilterInInput {
  codesRms: [String!]
  conditionGroupIds: [ID!]
  operationSpecificationIds: [ID!]
}

input OperationResourceSpecificationSort {
  orderBy: SortOrder! = ASC
  sortBy: OperationResourceSpecificationSortField!
}

input OperationResourceSpecificationUpdateInput {
  operationSpecificationId: String
  resourceQuantityFormula: String
}

input OperationRouteInput {
  routeSpecificationId: ID!
  waypoints: [OperationWaypointInput!]
}

input OperationScheduledTimesInput {
  operationSpecificationId: String!
  scheduledEnd: DateTime!
  scheduledStart: DateTime!
}

input OperationServiceObjectDetailsInput {
  flightDetails: OperationFlightDetailsInput
}

input OperationServiceObjectFilter {
  serviceObjectId: String
  serviceObjectType: ServiceObjectType
}

input OperationServiceObjectInput {
  serviceObjectId: String!
  serviceObjectType: ServiceObjectType!
}

input OperationSpecificationCreateInput {
  arrivalPlaceExecutionTimeRequired: Boolean!
  businessRoleId: String
  createCopies: Boolean! = false
  departurePlaceExecutionTimeRequired: Boolean!
  description: String
  name: String!
  operationSpecificationGroupId: String
  routeSpecificationProvidings: [OperationSpecificationRouteSpecificationProvidingInput!]
  serviceStandardId: String!
  startAndFinishOperationTimeRequired: Boolean!
  subdivisionId: String
  useComplexResource: Boolean! = false
  useSla: Boolean! = true
}

input OperationSpecificationFilter {
  belongsToGroup: Boolean
  businessRoleId: String
  deleted: Boolean = false
  in: OperationSpecificationFilterInInput
  name: String
  notIn: OperationSpecificationFilterInInput
  operationSpecificationGroupId: String
  serviceStandardId: String
  useSla: Boolean
}

input OperationSpecificationFilterInInput {
  codesRms: [String!]
}

input OperationSpecificationGroupCreateInput {
  groupingType: OperationSpecificationGroupingType! = SINGLE_SERVICE_OBJECT
  name: String!
  serviceObjectType: ServiceObjectType!
}

"Фильтр группы спецификаций операций"
input OperationSpecificationGroupFilter {
  groupingType: OperationSpecificationGroupingType
  name: String
}

input OperationSpecificationGroupUpdateInput {
  groupingType: OperationSpecificationGroupingType
  name: String
}

input OperationSpecificationNormCreateInput {
  norm: Int!
  normUnit: NormUnit!
  operationSpecificationId: String!
}

input OperationSpecificationNormFilter {
  in: OperationSpecificationNormFilterInInput
  notIn: OperationSpecificationNormFilterInInput
  operationSpecificationId: String
}

input OperationSpecificationNormFilterInInput {
  codesRms: [String!]
  conditionGroupIds: [ID!]
  operationSpecificationNormIds: [ID!]
}

input OperationSpecificationNormSort {
  orderBy: SortOrder! = ASC
  sortBy: OperationSpecificationNormSortField!
}

input OperationSpecificationNormUpdateInput {
  norm: Int
  normUnit: NormUnit
  operationSpecificationId: String
}

input OperationSpecificationRouteSpecificationProvidingInput {
  "Для ссылок без единого условия передаётся пустой массив"
  conditions: [ConditionInput!]!
  routeSpecificationId: ID!
}

input OperationSpecificationSort {
  orderBy: SortOrder! = ASC
  sortBy: OperationSpecificationSortField!
}

input OperationSpecificationTimeCalculationRuleCreateInput {
  associatedOperationSpecificationRules: [AssociatedOperationSpecificationRuleInput!]
  blockedByOperationSpecificationId: String
  name: String
  operationSpecificationId: String!
  plannedMoment: String!
  plannedMomentType: PlannedMomentType!
  timeOffset: Int
}

input OperationSpecificationTimeCalculationRuleFilter {
  in: OperationSpecificationTimeCalculationRuleFilterInInput
  notIn: OperationSpecificationTimeCalculationRuleFilterInInput
  operationSpecificationId: ID
}

input OperationSpecificationTimeCalculationRuleFilterInInput {
  codesRms: [String!]
  conditionGroupIds: [ID!]
}

input OperationSpecificationTimeCalculationRuleSort {
  orderBy: SortOrder! = ASC
  sortBy: OperationSpecificationTimeCalculationRuleSortField!
}

input OperationSpecificationTimeCalculationRuleUpdateInput {
  associatedOperationSpecificationRules: [AssociatedOperationSpecificationRuleInput!]
  blockedByOperationSpecificationId: String
  name: String
  operationSpecificationId: String
  plannedMoment: String
  plannedMomentType: PlannedMomentType
  timeOffset: Int
}

input OperationSpecificationUpdateInput {
  arrivalPlaceExecutionTimeRequired: Boolean
  businessRoleId: String
  createCopies: Boolean
  departurePlaceExecutionTimeRequired: Boolean
  description: String
  name: String
  operationSpecificationGroupId: String
  routeSpecificationProvidings: [OperationSpecificationRouteSpecificationProvidingInput!]
  startAndFinishOperationTimeRequired: Boolean
  subdivisionId: String
  useComplexResource: Boolean
  useSla: Boolean
}

input OperationStartInput {
  actualStart: DateTime
}

input OperationUpdateInput {
  "Маршрут"
  route: OperationRouteInput
  scheduledEnd: DateTime
  scheduledStart: DateTime
  serviceObjectDetails: OperationServiceObjectDetailsInput
}

input OperationWaypointInput {
  actualArrival: DateTime
  actualDeparture: DateTime
  scheduledArrival: DateTime
  scheduledDeparture: DateTime
  serviceObjectLocationInput: ServiceObjectLocationInput
  value: String
  waypointSpecificationId: ID!
}

input OptionalDateTimePeriodInput {
  from: DateTime
  to: DateTime
}

input PageSelectInput {
  limit: Int!
  offset: Int!
}

input PairTaskDetailsInput {
  complexResourceId: ID
  resourceType: ResourceType!
}

input ParkingSpotCreateInput {
  aodbInternalId: String!
  lastUpdateDateTime: DateTime!
  number: String!
  type: ParkingSpotType!
}

input ParkingSpotFilter {
  deleted: Boolean = false
  in: ParkingSpotInFilter
  notIn: ParkingSpotInFilter
  type: ParkingSpotType
}

input ParkingSpotGetInput {
  id: ID
  number: String
}

input ParkingSpotInFilter {
  aodbInternalIds: [String!]
  id: [String!]
  number: [String!]
}

input ParkingSpotUpdateInput {
  lastUpdateDateTime: DateTime
  number: String
  type: ParkingSpotType
}

input PatternCommentCreateInput {
  text: String!
}

input PatternCommentFilter {
  employeeId: ID
  in: PatternCommentFilterInInput
  notIn: PatternCommentFilterInInput
  taskFilterProfileId: ID
}

input PatternCommentFilterInInput {
  businessRoleIds: [ID!]
}

input PatternCommentUpdateInput {
  text: String
}

input PaxBusCreateInput {
  carriageOfEmployees: Boolean!
  carriageOfPassengers: Boolean!
  empLifeCycleDependency: Boolean! = true
  exitAdmittance: Boolean!
  isPartOfComplexResource: Boolean! = false
  malfunction: Boolean! = false
  mobileIdent: String
  mobilityType: MobilityType!
  passengerCapacity: Int!
  productionSiteName: String
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivisionId: ID!
  supportedAircraftTypes: [String]
}

input PaxBusUpdateInput {
  carriageOfEmployees: Boolean
  carriageOfPassengers: Boolean
  empLifeCycleDependency: Boolean
  exitAdmittance: Boolean
  isPartOfComplexResource: Boolean
  malfunction: Boolean
  mobileIdent: String
  mobilityType: MobilityType
  passengerCapacity: Int
  productionSiteName: String
  resourceNumber: String
  resourceNumberType: ResourceNumberType
  shortTitle: String
  subdivisionId: ID
}

input PaxStairsCreateInput {
  controlMethod: String!
  empLifeCycleDependency: Boolean! = true
  isPartOfComplexResource: Boolean! = false
  malfunction: Boolean! = false
  mobileIdent: String
  mobilityType: MobilityType!
  passengerDeckHeight: Int
  productionSiteName: String
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivisionId: ID!
  supportedAircraftTypes: [String]!
}

input PaxStairsUpdateInput {
  controlMethod: String
  empLifeCycleDependency: Boolean
  isPartOfComplexResource: Boolean
  malfunction: Boolean
  mobileIdent: String
  mobilityType: MobilityType
  passengerDeckHeight: Int
  productionSiteName: String
  resourceNumber: String
  resourceNumberType: ResourceNumberType
  shortTitle: String
  subdivisionId: ID
  supportedAircraftTypes: [String]
}

input PositionCreateInput {
  code: String!
  integrationId: String!
  name: String!
  validityPeriod: OptionalDateTimePeriodInput!
}

input PositionFilter {
  code: String
  deleted: Boolean = false
  in: PositionFilterInInput
  name: String
  notIn: PositionFilterInInput
  subdivisionHrmId: String
  subdivisionId: String
  validityPeriodCriteria: [DateTimeRangeCriteria!]
}

input PositionFilterInInput {
  integrationId: [String!]
  subdivisionId: [ID!]
}

input PositionUpdateInput {
  code: String
  integrationId: String
  name: String
  validityPeriod: OptionalDateTimePeriodInput
}

input ReasonCancellationTaskCreateInput {
  name: String!
}

input ReasonCancellationTaskUpdateInput {
  name: String
}

input ResourceAssignBatchRequestWrapper {
  assignResources: [ItemResourceAssignRequest!]!
}

input ResourceDeficitReportFilter {
  onBehalfOf: ID
  period: MandatoryDateTimePeriodInput!
  searchModes: [ResourceDeficitReportSearchMode!]
  taskFilterProfileId: ID
}

input ResourceFilter {
  belongsToGroup: Boolean
  deleted: Boolean
  in: ResourceFilterInInput
  isPartOfComplexResource: Boolean
  malfunction: Boolean
  malfunctionedWithTasks: TaskFilter
  mobilityType: MobilityType
  notIn: ResourceFilterInInput
  resourceGroupId: ID
  resourceId: ID
  resourceNumber: String
  resourceNumberType: ResourceNumberType
  resourceType: ResourceType
  resourceTypesIn: [ResourceType]
  searchMode: ResourceSearchMode = ALL_RESOURCE_TYPES
  shiftFilterProfileId: ID
  taskFilterProfileId: ID
}

input ResourceFilterInInput {
  businessRoleIds: [ID!]
  ids: [ID!]
  mobileIdents: [String!]
  resourceTypes: [ResourceType!]
  subdivisionIds: [ID!]
}

input ResourceGroupCreateInput {
  name: String
  subdivisionId: String
}

"Фильтр группы ресурсов"
input ResourceGroupFilter {
  in: ResourceGroupFilterInInput
  name: String
  notIn: ResourceGroupFilterInInput
  period: OptionalDateTimePeriodInput
  searchMode: ResourceSearchMode = ALL_RESOURCE_TYPES
}

input ResourceGroupFilterInInput {
  subdivisionIds: [ID]
}

input ResourceGroupUpdateInput {
  name: String
  subdivisionId: String
}

input ResourceGroupValidityPeriodCreateInput {
  period: OptionalDateTimePeriodInput!
  resourceGroupId: ID!
  resourceIds: [ID!]
}

input ResourceGroupValidityPeriodFilter {
  period: OptionalDateTimePeriodInput
  searchMode: ResourceSearchMode = ALL_RESOURCE_TYPES
}

input ResourceGroupValidityPeriodUpdateInput {
  period: OptionalDateTimePeriodInput!
}

input ResourceItemInput {
  resourceId: ID!
  resourceType: ResourceType!
}

input ResourceLocationFilter {
  in: ResourceLocationInFilter
  isEmpty: [ResourceLocationIsEmptyFilter!]
  isNotEmpty: [ResourceLocationIsEmptyFilter!]
  notIn: ResourceLocationInFilter
  period: [DateTimeRangeCriteria!]
}

input ResourceLocationInFilter {
  placeIds: [ID!]
  resourceIds: [ID!]
}

input ResourceSort {
  orderBy: SortOrder! = ASC
  sortBy: ResourceSortField!
}

input ResourceSubscriptionFilter {
  employeeFilter: EmployeeFilter
  employeeId: ID
  resourceFilter: ResourceFilter
}

input ResourceUnavailabilityFilter {
  eq: ResourceUnavailabilityFilterEqualityInput
  in: ResourceUnavailabilityFilterInInput
  ne: ResourceUnavailabilityFilterEqualityInput
  notIn: ResourceUnavailabilityFilterInInput
  timeHorizon: MandatoryDateTimePeriodInput
}

input ResourceUnavailabilityFilterEqualityInput {
  createdBy: ResourceUnavailabilityPeriodCreationType
  wayBillNum: String
}

input ResourceUnavailabilityFilterInInput {
  wayBillNums: [String]
}

input ResourceUnavailabilityPeriodCreateInput {
  comment: String
  createdBy: ResourceUnavailabilityPeriodCreationType! = MANUAL
  unavailableFrom: DateTime!
  unavailableTo: DateTime!
}

input ResourceUnavailabilityPeriodUpdateInput {
  comment: String
  unavailableFrom: DateTime
  unavailableTo: DateTime
}

input RoleCreateInput {
  name: String!
}

input RoleUpdateInput {
  name: String
}

input RouteSpecificationCreateInput {
  description: [LocalizedStringInput!]
  waypointSpecifications: [RouteSpecificationWaypointSpecificationCreateInput!]!
}

input RouteSpecificationFilter {
  deleted: Boolean = false
}

input RouteSpecificationProvidingFilter {
  in: RouteSpecificationProvidingFilterInInput
  notIn: RouteSpecificationProvidingFilterInInput
  routeSpecificationFilter: RouteSpecificationFilter
}

input RouteSpecificationProvidingFilterInInput {
  codesRms: [String!]
  conditionGroupIds: [ID!]
}

input RouteSpecificationProvidingSort {
  orderBy: SortOrder! = ASC
  sortBy: RouteSpecificationProvidingSortField!
}

input RouteSpecificationWaypointSpecificationCreateInput {
  locationId: ID!
  orderNo: Int
}

input ServiceBasketCreateInput {
  serviceObject: ServiceObjectInput!
  serviceStandardIds: [ID!]
}

input ServiceBasketFilter {
  in: ServiceBasketFilterInInput
  notIn: ServiceBasketFilterInInput
}

input ServiceBasketFilterInInput {
  ids: [ID!]
  serviceObjects: [ServiceObjectInput!]
  statuses: [ServiceBasketStatus!]
}

input ServiceBasketItemUpdateInput {
  operationItems: [ServiceBasketOperationItemInput!]
  serviceBasketItemId: ID!
}

input ServiceBasketOperationItemInput {
  operationSpecificationId: ID!
  resultAltEnd: DateTime
  resultAltStart: DateTime
  resultEnd: DateTime
  resultStart: DateTime
  sourceEnd: DateTime
  sourceStart: DateTime
}

input ServiceBasketUpdateInput {
  items: [ServiceBasketItemUpdateInput!]
  status: ServiceBasketStatus!
}

input ServiceCreateInput {
  onDemand: Boolean = false
  onDemandParams: ServiceOnDemandParamsCreateInput
  onDemandStatus: OnDemandStatus
  parentId: ID
  serviceObject: ServiceObjectInput!
  serviceOfferId: ID!
}

input ServiceFilter {
  in: ServiceFilterInInput
  isEmpty: [ServiceFilterIsEmpty!]
  isNotEmpty: [ServiceFilterIsEmpty!]
  notIn: ServiceFilterInInput
  onDemand: Boolean
  onDemandStatus: OnDemandStatus
  serviceObject: ServiceObjectInput
  serviceOfferId: ID
  serviceStandardFilter: ServiceStandardFilter
  serviceStandardId: ID
}

input ServiceFilterInInput {
  ids: [ID!]
  serviceObjects: [ServiceObjectInput!]
  serviceStandardIds: [ID!]
  statuses: [ServiceStatus!]
}

input ServiceObjectFilter {
  flightFilter: FlightFilter
  in: ServiceObjectInFilter
  notIn: ServiceObjectInFilter
  queryFrom: DateTime
  queryTo: DateTime
}

input ServiceObjectInFilter {
  serviceObjectTypes: [ServiceObjectType!]
}

input ServiceObjectInput {
  serviceObjectId: String!
  serviceObjectType: ServiceObjectType!
}

input ServiceObjectLocationInput {
  beltId: ID
  checkInCounterId: ID
  gateId: ID
  parkingSpotId: ID
}

input ServiceObjectSlaCreateInput {
  norm: Int!
  serviceObjectType: ServiceObjectType!
}

input ServiceObjectSlaFilter {
  in: ServiceObjectSlaFilterInInput
  notIn: ServiceObjectSlaFilterInInput
  serviceObjectType: ServiceObjectType
}

input ServiceObjectSlaFilterInInput {
  conditionGroupIds: [ID!]
}

input ServiceObjectSlaUpdateInput {
  norm: Int
  serviceObjectType: ServiceObjectType
}

input ServiceOfferCreateInput {
  contractId: String
  onDemand: Boolean! = false
  serviceStandardId: String!
  validFrom: Date
  validTo: Date
}

input ServiceOfferFilter {
  onDemand: Boolean
  serviceStandardId: String
}

input ServiceOfferUpdateInput {
  contractId: String
  onDemand: Boolean
  serviceStandardId: String
  validFrom: Date
  validTo: Date
}

input ServiceOnDemandParamsCreateInput {
  operationScheduledTimes: [OperationScheduledTimesInput!]
  resource: ResourceItemInput
}

input ServiceOnDemandParamsUpdateInput {
  operationScheduledTimes: [OperationScheduledTimesInput!]
  resource: ResourceItemInput
}

input ServiceStandardCreateInput {
  descriptionEng: String
  descriptionRus: String
  displayInProcessMap: Boolean! = true
  erpId: String
  name: String!
  onDemand: ServiceStandardOnDemandCreateInput
  responsibleSubdivisionId: ID
  serviceObjectType: ServiceObjectType!
  sortKey: String
  type: ServiceStandardType!
  useComplexResource: Boolean! = false
}

input ServiceStandardFilter {
  deleted: Boolean = false
  displayInProcessMap: Boolean
  employeeId: String
  erpId: String
  in: ServiceStandardFilterInInput
  name: String
  notIn: ServiceStandardFilterInInput
  onDemand: Boolean
  responsibleSubdivisionId: ID
  searchMode: ServiceStandardSearchMode! = USER_AVAILABLE
  type: ServiceStandardType
}

input ServiceStandardFilterInInput {
  codesRms: [String!]
  serviceObjectTypes: [ServiceObjectType!]
}

input ServiceStandardOnDemandCreateInput {
  calculatingOperationTimesRequired: Boolean! = true
  selectionResourcesRequired: Boolean! = true
}

input ServiceStandardOnDemandUpdateInput {
  calculatingOperationTimesRequired: Boolean
  selectionResourcesRequired: Boolean
}

input ServiceStandardProvidingCreateInput {
  onDemand: Boolean!
  serviceStandardId: String!
}

input ServiceStandardProvidingFilter {
  in: ServiceStandardProvidingFilterInInput
  notIn: ServiceStandardProvidingFilterInInput
  onDemand: Boolean
  serviceStandardId: String
}

input ServiceStandardProvidingFilterInInput {
  codesRms: [String!]
  conditionGroupIds: [ID!]
}

input ServiceStandardProvidingSort {
  orderBy: SortOrder! = ASC
  sortBy: ServiceStandardProvidingSortField!
}

input ServiceStandardProvidingUpdateInput {
  onDemand: Boolean
  serviceStandardId: String
}

input ServiceStandardSort {
  orderBy: SortOrder! = ASC
  sortBy: ServiceStandardSortField!
}

input ServiceStandardUpdateInput {
  descriptionEng: String
  descriptionRus: String
  displayInProcessMap: Boolean
  erpId: String
  name: String
  onDemand: ServiceStandardOnDemandUpdateInput
  responsibleSubdivisionId: ID
  sortKey: String
  type: ServiceStandardType
  useComplexResource: Boolean
}

input ServiceUpdateInput {
  onDemandParams: ServiceOnDemandParamsUpdateInput
  parentId: ID
}

input SetResourceLocationInput {
  localPlaceId: ID!
  resourceId: ID!
  start: DateTime
}

input ShiftCreateInput {
  createdBy: ShiftCreationType! = HRM
  datePlanBegin: DateTime!
  datePlanEnd: DateTime!
  integrationId: String
  type: ShiftType! = WORKING_TIME_DAY
}

"Фильтр по сменам"
input ShiftFilter {
  createdBy: ShiftCreationType
  in: ShiftFilterInInput
  notIn: ShiftFilterInInput = {types: [LUNCH_TIME]}
  queryFrom: DateTime
  queryTo: DateTime
  searchMode: ShiftSearchMode = ALL
  shiftFilterProfileId: ID
}

input ShiftFilterInInput {
  id: [ID!]
  integrationId: [String]
  types: [ShiftType!]
}

input ShiftFilterProfileCreateInput {
  description: [LocalizedStringInput!]!
  shiftFilterProfileRuleIds: [ID!]
}

input ShiftFilterProfileFilter {
  deleted: Boolean = false
  in: ShiftFilterProfileFilterInInput
  notIn: ShiftFilterProfileFilterInInput
}

input ShiftFilterProfileFilterInInput {
  ids: [ID!]
}

input ShiftFilterProfileRuleCreateInput {
  description: [LocalizedStringInput!]
  positionIds: [ID!]
  positionMatchingStrategy: MatchingStrategy! = MATCH
  resourceType: ResourceType!
  subdivisionIds: [ID!]
  subdivisionMatchingStrategy: MatchingStrategy! = MATCH
}

input ShiftFilterProfileRuleFilter {
  in: ShiftFilterProfileRuleFilterInInput
  notIn: ShiftFilterProfileRuleFilterInInput
  resourceType: ResourceType
  shiftFilterProfileId: ID
}

input ShiftFilterProfileRuleFilterInInput {
  ids: [ID!]
}

input ShiftFilterProfileRuleUpdateInput {
  description: [LocalizedStringInput!]
  positionIds: [ID!]
  positionMatchingStrategy: MatchingStrategy
  subdivisionIds: [ID!]
  subdivisionMatchingStrategy: MatchingStrategy
}

input ShiftFilterProfileUpdateInput {
  description: [LocalizedStringInput!]
  shiftFilterProfileRuleIds: [ID!]
}

input ShiftJournalFilter {
  actualTimes: [DateTimeRangeCriteria!]
  currentShiftStatus: EmployeeShiftStatus
  employeeFilter: EmployeeFilter
  in: ShiftJournalFilterInInput
  isEmpty: [ShiftJournalIsEmptyFilter!]
  isNotEmpty: [ShiftJournalIsEmptyFilter!]
  notIn: ShiftJournalFilterInInput
  queryFrom: DateTime
  queryTo: DateTime
  searchMode: ShiftSearchMode = ALL
  shiftFilterProfileId: ID
}

input ShiftJournalFilterInInput {
  employeeId: [String!]
  shiftId: [String!]
}

input ShiftSort {
  orderBy: SortOrder! = ASC
  sortBy: ShiftSortField!
}

input ShiftUpdateInput {
  datePlanBegin: DateTime
  datePlanEnd: DateTime
  integrationId: String
}

input SizeRange {
  greaterThan: Long
  lessThan: Long
}

input SkillFilter {
  employeeId: ID
  skillSpecificationId: ID
  "if true - return skills included in validity period or without it (validFrom/validTo is null)"
  validAt: DateTime
  validFrom: DateTime
  validTo: DateTime
}

input SkillSpecificationCreateInput {
  code: String!
  integrationId: ID!
  name: String
}

input SkillSpecificationFilter {
  in: SkillSpecificationFilterInInput
  notIn: SkillSpecificationFilterInInput
}

input SkillSpecificationFilterInInput {
  code: [String!]
  id: [ID!]
  integrationId: [ID!]
  name: [String]
}

input SkillSpecificationSort {
  orderBy: SortOrder! = ASC
  sortBy: SkillSpecificationSortField!
}

input SkillSpecificationUpdateInput {
  code: String
  integrationId: ID
  name: String
}

input SpecialEmphasisCreateInput {
  aodbInternalId: String!
  code: String!
  description: String!
  lastUpdateDateTime: DateTime!
}

input SpecialEmphasisFilter {
  deleted: Boolean = false
  in: SpecialEmphasisFilterInInput
  notIn: SpecialEmphasisFilterInInput
}

input SpecialEmphasisFilterInInput {
  aodbInternalIds: [String!]
}

input SpecialEmphasisGetInput {
  code: String
  id: ID
}

input SpecialEmphasisUpdateInput {
  code: String
  description: String
  lastUpdateDateTime: DateTime
}

input StepladderCreateInput {
  empLifeCycleDependency: Boolean! = true
  isPartOfComplexResource: Boolean! = false
  malfunction: Boolean! = false
  mobileIdent: String
  mobilityType: MobilityType!
  productionSiteName: String
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivisionId: ID!
  supportedAircraftTypes: [String]!
}

input StepladderUpdateInput {
  empLifeCycleDependency: Boolean
  isPartOfComplexResource: Boolean
  malfunction: Boolean
  mobileIdent: String
  mobilityType: MobilityType
  productionSiteName: String
  resourceNumber: String
  resourceNumberType: ResourceNumberType
  shortTitle: String
  subdivisionId: ID
  supportedAircraftTypes: [String]
}

input SubdivisionCreateInput {
  hrmId: String!
  integrationId: String!
  name: String!
  validityPeriod: OptionalDateTimePeriodInput!
}

input SubdivisionFilter {
  deleted: Boolean = false
  in: SubdivisionFilterInInput
  notIn: SubdivisionFilterInInput
  validityPeriodCriteria: [DateTimeRangeCriteria!]
}

input SubdivisionFilterInInput {
  hrmId: [String!]
  integrationId: [String!]
  name: [String!]
}

input SubdivisionUpdateInput {
  hrmId: String
  integrationId: String
  name: String
  validityPeriod: OptionalDateTimePeriodInput
}

input TaskCreateInput {
  actualArrivalToPlaceExecution: DateTime
  actualDepartureFromPlaceExecution: DateTime
  actualDepartureToPlaceExecution: DateTime
  "Массив ID Operation"
  operationIds: [String!]!
  "Массив ID OperationResourceSlot (из Operation)"
  operationResourceSlotIds: [String!]!
  pairTaskDetailsInput: PairTaskDetailsInput
  resource: TaskResourceInput
  scheduledArrival: DateTime
  scheduledArrivalToPlaceExecution: DateTime
  scheduledDeparture: DateTime
  scheduledDepartureFromPlaceExecution: DateTime
  scheduledDepartureToPlaceExecution: DateTime
  serviceObject: TaskServiceObjectInput!
}

input TaskDateTimeRangeFilter {
  scheduledTimes: [DateTimeRangeCriteria!]
}

input TaskFilter {
  dateTimeRanges: TaskDateTimeRangeFilter
  in: TaskFilterInInput
  isComplexResourceRequired: Boolean
  isEmpty: [TaskIsEmptyFilter!]
  isNotEmpty: [TaskIsEmptyFilter!]
  notIn: TaskFilterInInput
  operationId: String
  parallelTasksById: ID
  queryFrom: DateTime
  queryTo: DateTime
  resource: TaskResourceFilter
  scheduledTimeRange: DateTimeRangeValueInput
  searchMode: TaskSearchMode
  serviceId: ID
  serviceObject: TaskServiceObjectInput
  status: TaskStatus
  taskFilterProfileId: ID
}

input TaskFilterInInput {
  complexResourceIds: [ID]
  ids: [ID!]
  pairResourceTypes: [ResourceType!]
  resourceIds: [ID!]
  resourceTypes: [ResourceType!]
  serviceObjectIds: [ID!]
  serviceStandardIds: [ID!]
  statuses: [TaskStatus!]
}

input TaskFilterProfileCreateInput {
  description: [LocalizedStringInput!]!
  taskFilterProfileRuleIds: [ID!]
}

input TaskFilterProfileFilter {
  deleted: Boolean = false
  in: TaskFilterProfileFilterInInput
  notIn: TaskFilterProfileFilterInInput
}

input TaskFilterProfileFilterInInput {
  ids: [ID!]
}

input TaskFilterProfileRuleCreateInput {
  businessRoleIds: [ID!]
  businessRoleMatchingStrategy: MatchingStrategy! = MATCH
  description: [LocalizedStringInput!]
  resourceType: ResourceType!
  subdivisionIds: [ID!]
  subdivisionMatchingStrategy: MatchingStrategy! = MATCH
}

input TaskFilterProfileRuleFilter {
  in: TaskFilterProfileRuleFilterInInput
  notIn: TaskFilterProfileRuleFilterInInput
  resourceType: ResourceType
  taskFilterProfileId: ID
}

input TaskFilterProfileRuleFilterInInput {
  ids: [ID!]
}

input TaskFilterProfileRuleUpdateInput {
  businessRoleIds: [ID!]
  businessRoleMatchingStrategy: MatchingStrategy
  description: [LocalizedStringInput!]
  subdivisionIds: [ID!]
  subdivisionMatchingStrategy: MatchingStrategy
}

input TaskFilterProfileUpdateInput {
  description: [LocalizedStringInput!]
  taskFilterProfileRuleIds: [ID!]
}

input TaskPublicationTimeDirectoryCreateInput {
  publicationTimeDelta: Int!
  subdivisionId: String!
}

input TaskPublicationTimeDirectoryUpdateInput {
  publicationTimeDelta: Int
  subdivisionId: String
}

input TaskResourceFilter {
  resourceId: String
  resourceType: ResourceType
}

input TaskResourceInput {
  resourceId: String
  resourceType: ResourceType!
}

input TaskServiceObjectInput {
  serviceObjectId: String!
  serviceObjectType: ServiceObjectType!
}

input TaskSort {
  orderBy: SortOrder! = ASC
  sortBy: TaskSortField!
}

input TaskSubscriptionFilter {
  employeeId: ID
  tasksFilter: TaskFilter
}

input TaskTransferNormCreateInput {
  transferNorm: Int!
}

input TaskTransferNormFilter {
  in: TaskTransferNormFilterInInput
  notIn: TaskTransferNormFilterInInput
}

input TaskTransferNormFilterInInput {
  codesRms: [String!]
  conditionGroupIds: [ID!]
}

input TaskTransferNormSort {
  orderBy: SortOrder! = ASC
  sortBy: TaskTransferNormSortField!
}

input TaskTransferNormUpdateInput {
  transferNorm: Int
}

input TaskUpdateInput {
  actualArrivalToPlaceExecution: DateTime
  actualDepartureFromPlaceExecution: DateTime
  actualDepartureToPlaceExecution: DateTime
  pairTaskDetailsInput: PairTaskDetailsInput
  scheduledArrivalToPlaceExecution: DateTime
  scheduledDepartureFromPlaceExecution: DateTime
  scheduledDepartureToPlaceExecution: DateTime
  serviceObject: TaskServiceObjectInput
}

input TechResourceBlockViewSort {
  orderBy: SortOrder! = ASC
  sortBy: TechResourceBlockViewSortField! = RESOURCE_TYPE
}

input TimeLinerViewFilter {
  complexResources: ComplexResourceFilter
  employeeGroups: EmployeeGroupValidityPeriodFilter
  employees: EmployeeFilter
  groupTimeRange: DateTimeRangeCriteria!
  malfunctionedWithTasks: TaskFilter
  "Applies to both separate resources and resources in groups"
  searchMode: ResourceSearchMode! = ALL_RESOURCE_TYPES
  taskFilterProfileId: ID
  techResources: ResourceFilter
}

input TimeLinerViewSort {
  allEmployeesByOnShift: Boolean = true
  employeeBlockSort: EmployeeBlockViewSort
  techBlockSort: [TechResourceBlockViewSort!]
  techResourceSort: [ResourceSort!]
}

input TimeRange {
  after: DateTime
  before: DateTime
}

input TowbarAdapterCreateInput {
  empLifeCycleDependency: Boolean! = true
  isPartOfComplexResource: Boolean! = false
  malfunction: Boolean! = false
  mobileIdent: String
  mobilityType: MobilityType!
  productionSiteName: String
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivisionId: ID!
  supportedAircraftTypes: [String]!
}

input TowbarAdapterUpdateInput {
  empLifeCycleDependency: Boolean
  isPartOfComplexResource: Boolean
  malfunction: Boolean
  mobileIdent: String
  mobilityType: MobilityType
  productionSiteName: String
  resourceNumber: String
  resourceNumberType: ResourceNumberType
  shortTitle: String
  subdivisionId: ID
  supportedAircraftTypes: [String]
}

input TowbarCreateInput {
  adapters: [String]
  empLifeCycleDependency: Boolean! = true
  isPartOfComplexResource: Boolean! = false
  malfunction: Boolean! = false
  mobileIdent: String
  mobilityType: MobilityType!
  productionSiteName: String
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivisionId: ID!
  supportedAircraftTypes: [String]!
}

input TowbarUpdateInput {
  adapters: [String]
  empLifeCycleDependency: Boolean
  isPartOfComplexResource: Boolean
  malfunction: Boolean
  mobileIdent: String
  mobilityType: MobilityType
  productionSiteName: String
  resourceNumber: String
  resourceNumberType: ResourceNumberType
  shortTitle: String
  subdivisionId: ID
  supportedAircraftTypes: [String]
}

input TypeOperatorAssociationFilter {
  scope: TypeOperatorAssociationScope
}

input UnitCreateInput {
  consumableResourceValueType: ConsumableResourceValueType! = ConsumableResourceStringValue
  description: String
  name: String!
}

input UnitFilter {
  deleted: Boolean = false
}

input UnitUpdateInput {
  consumableResourceValueType: ConsumableResourceValueType
  description: String
  name: String
}

input VacuumCleanerCreateInput {
  empLifeCycleDependency: Boolean! = true
  isPartOfComplexResource: Boolean! = false
  malfunction: Boolean! = false
  mobileIdent: String
  mobilityType: MobilityType!
  productionSiteName: String
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivisionId: ID!
  supportedAircraftTypes: [String]
  vacuumCleanerType: String!
}

input VacuumCleanerUpdateInput {
  empLifeCycleDependency: Boolean
  isPartOfComplexResource: Boolean
  malfunction: Boolean
  mobileIdent: String
  mobilityType: MobilityType
  productionSiteName: String
  resourceNumber: String
  resourceNumberType: ResourceNumberType
  shortTitle: String
  subdivisionId: ID
  vacuumCleanerType: String
}

input VacuumSweeperCreateInput {
  cleaningCapabilityGarbage: Boolean!
  cleaningCapabilityPozh: Boolean!
  empLifeCycleDependency: Boolean! = true
  isPartOfComplexResource: Boolean! = false
  malfunction: Boolean! = false
  mobileIdent: String
  mobilityType: MobilityType!
  productionSiteName: String
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivisionId: ID!
  supportedAircraftTypes: [String]
}

input VacuumSweeperUpdateInput {
  cleaningCapabilityGarbage: Boolean
  cleaningCapabilityPozh: Boolean
  empLifeCycleDependency: Boolean
  isPartOfComplexResource: Boolean
  malfunction: Boolean
  mobileIdent: String
  mobilityType: MobilityType
  productionSiteName: String
  resourceNumber: String
  resourceNumberType: ResourceNumberType
  shortTitle: String
  subdivisionId: ID
}

input ValidityPeriodFilter {
  actualDate: DateTime
  validityPeriodCriteria: [DateTimeRangeCriteria!]
}

input VipServiceCarCreateInput {
  empLifeCycleDependency: Boolean! = true
  isPartOfComplexResource: Boolean! = false
  malfunction: Boolean! = false
  mobileIdent: String
  mobilityType: MobilityType!
  passengerCapacity: Int!
  productionSiteName: String
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  serviceExploitationId: String!
  shortTitle: String
  subdivisionId: ID!
  supportedAircraftTypes: [String]!
}

input VipServiceCarUpdateInput {
  empLifeCycleDependency: Boolean
  isPartOfComplexResource: Boolean
  malfunction: Boolean
  mobileIdent: String
  mobilityType: MobilityType
  passengerCapacity: Int
  productionSiteName: String
  resourceNumber: String
  resourceNumberType: ResourceNumberType
  serviceExploitationId: String
  shortTitle: String
  subdivisionId: ID
  supportedAircraftTypes: [String]
}

input WasteDisposalMachineCreateInput {
  empLifeCycleDependency: Boolean! = true
  isPartOfComplexResource: Boolean! = false
  malfunction: Boolean! = false
  mobileIdent: String
  mobilityType: MobilityType!
  productionSiteName: String
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivisionId: ID!
  supportedAircraftTypes: [String]
  tankVolume: Int
}

input WasteDisposalMachineUpdateInput {
  empLifeCycleDependency: Boolean
  isPartOfComplexResource: Boolean
  malfunction: Boolean
  mobileIdent: String
  mobilityType: MobilityType
  productionSiteName: String
  resourceNumber: String
  resourceNumberType: ResourceNumberType
  shortTitle: String
  subdivisionId: ID
  tankVolume: Int
}

input WaterCarCreateInput {
  empLifeCycleDependency: Boolean! = true
  isPartOfComplexResource: Boolean! = false
  malfunction: Boolean! = false
  mobileIdent: String
  mobilityType: MobilityType!
  productionSiteName: String
  resourceNumber: String!
  resourceNumberType: ResourceNumberType!
  shortTitle: String
  subdivisionId: ID!
  supportedAircraftTypes: [String]
  tankVolume: Int
}

input WaterCarUpdateInput {
  empLifeCycleDependency: Boolean
  isPartOfComplexResource: Boolean
  malfunction: Boolean
  mobileIdent: String
  mobilityType: MobilityType
  productionSiteName: String
  resourceNumber: String
  resourceNumberType: ResourceNumberType
  shortTitle: String
  subdivisionId: ID
  tankVolume: Int
}

input WaybillCreateInput {
  dateTimeEnd: DateTime
  dateTimeStart: DateTime
  eventDateTime: DateTime!
  mobileAssetID: ID!
  orgUnitID: ID
  personAssignedID: ID
  resourceGroupID: ID
  waybillNum: String!
}

input WaybillFilter {
  createdAfter: DateTime
  dateTimePeriod: MandatoryDateTimePeriodInput
  hasPersonAssigned: Boolean
  hasResourceGroup: Boolean
  in: WaybillFilterInInput
  notIn: WaybillFilterInInput
  shiftFilterProfileId: ID
}

input WaybillFilterInInput {
  personAssignedIds: [ID]
  waybillNum: [String!]
}

input WaybillUpdateInput {
  personAssignedID: ID
  resourceGroupID: ID
}

input WaypointFilter {
  operationId: ID
  waypointSpecificationId: ID
}

input WaypointSpecificationFilter {
  routeSpecificationId: ID
}
